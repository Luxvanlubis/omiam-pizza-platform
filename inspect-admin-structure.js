const puppeteer = require('puppeteer');
const fs = require('fs');

/**
 * Script d'inspection de la structure HTML des modules * Pour identifier les vrais s√©lecteurs CSS √† utiliser
 */
class StructureInspector { constructor() { this.browser = null; this.page = null; this.structure = {}; } async init() { console.log('üîç Initialisation de l\'inspecteur de structure ...'); this.browser = await puppeteer.launch({ headless: false, defaultViewport: { width: 1920, height: 1080 }, args: ['--no-sandbox', '--disable-setuid-sandbox'] }); this.page = await this.browser.newPage(); this.page.setDefaultTimeout(10000); } async login() { console.log('üîê Connexion √† l\'interface ...'); try { await this.page.goto('http://localhost:3000/, { waitUntil: 'networkidle0' }); const currentUrl = this.page.url(); if (currentUrl.includes('/login')) { console.log('üìã Connexion en cours...'); await this.page.waitForSelector('input[name="username"]', { timeout: 5000 }); await this.page.type('input[name="username"]', ); await this.page.waitForSelector('input[name=]', { timeout: 5000 }); await this.page.type('input[name=]', 123'); const submitButton = await this.page.$('button[type="submit"]'); if (submitButton) { await submitButton.click(); await this.page.waitForNavigation({ waitUntil: 'networkidle0', timeout: 10000 }); } } const finalUrl = this.page.url(); if (finalUrl.includes('/)) { console.log('‚úÖ Connexion r√©ussie'); return true; } return false; } catch (error) { console.log('‚ùå Erreur de connexion:', error.message); return false; } } async inspectMainStructure() { console.log('\nüîç Inspection de la structure principale...'); try { // Attendre que la page soit charg√©e await new Promise(resolve => setTimeout(resolve, 2000)); // Capturer la structure g√©n√©rale const mainStructure = await this.page.evaluate(() => { const result = { title: document.title, mainContainers: [], tabs: [], buttons: [], forms: [], tables: [], inputs: [] }; // Conteneurs principaux const containers = document.querySelectorAll('main, .container, .-container, [class*=], [class*="dashboard"]'); containers.forEach((el, i) => { result.mainContainers.push({ index: i, tagName: el.tagName, className: el.className, id: el.id, textContent: el.textContent?.substring(0, 100) + '...' }); }); // Onglets/Tabs const tabs = document.querySelectorAll('[role="tab"], .tab, button[data-tab], .nav-tab'); tabs.forEach((el, i) => { result.tabs.push({ index: i, tagName: el.tagName, className: el.className, id: el.id, textContent: el.textContent?.trim(), dataTab: el.getAttribute('data-tab'), role: el.getAttribute('role') }); }); // Boutons const buttons = document.querySelectorAll('button'); buttons.forEach((el, i) => { if (i < 20) { // Limiter √† 20 boutons result.buttons.push({ index: i, className: el.className, id: el.id, textContent: el.textContent?.trim(), type: el.type, dataTab: el.getAttribute('data-tab') }); } }); // Formulaires const forms = document.querySelectorAll('form'); forms.forEach((el, i) => { result.forms.push({ index: i, className: el.className, id: el.id, action: el.action, method: el.method }); }); // Tables const tables = document.querySelectorAll('table'); tables.forEach((el, i) => { result.tables.push({ index: i, className: el.className, id: el.id, rows: el.querySelectorAll('tr').length, headers: Array.from(el.querySelectorAll('th')).map(th => th.textContent?.trim()) }); }); // Inputs const inputs = document.querySelectorAll('input, select, textarea'); inputs.forEach((el, i) => { if (i < 15) { // Limiter √† 15 inputs result.inputs.push({ index: i, tagName: el.tagName, type: el.type, name: el.name, id: el.id, className: el.className, placeholder: el.placeholder }); } }); return result; }); this.structure.main = mainStructure; console.log('üìä Structure principale captur√©e'); console.log(` - ${mainStructure.tabs.length} onglets trouv√©s`); console.log(` - ${mainStructure.buttons.length} boutons trouv√©s`); console.log(` - ${mainStructure.forms.length} formulaires trouv√©s`); console.log(` - ${mainStructure.tables.length} tables trouv√©es`); } catch (error) { console.log('‚ùå Erreur inspection structure:', error.message); } } async inspectTabContent(tabIndex) { console.log(`\nüîç Inspection du contenu de l'onglet ${tabIndex}...`); try { // Cliquer sur l'onglet const tabSelector = `[role="tab"]:nth-child(${tabIndex + 1})`; const tab = await this.page.$(tabSelector); if (tab) { await tab.click(); await new Promise(resolve => setTimeout(resolve, 2000)); // Capturer le contenu de l'onglet const tabContent = await this.page.evaluate(() => { const result = { activeElements: [], visibleForms: [], visibleTables: [], visibleInputs: [], visibleButtons: [], allClasses: new Set() }; // √âl√©ments visibles const visibleElements = document.querySelectorAll('*:not([hidden]):not([style*="display: none"])'); visibleElements.forEach(el => { if (el.className) { el.className.split(' ').forEach(cls => { if (cls.trim()) result.allClasses.add(cls.trim()); }); } }); // Formulaires visibles const forms = document.querySelectorAll('form:not([hidden]):not([style*="display: none"])'); forms.forEach((el, i) => { const rect = el.getBoundingClientRect(); if (rect.width > 0 && rect.height > 0) { result.visibleForms.push({ index: i, className: el.className, id: el.id, visible: true }); } }); // Tables visibles const tables = document.querySelectorAll('table:not([hidden]):not([style*="display: none"])'); tables.forEach((el, i) => { const rect = el.getBoundingClientRect(); if (rect.width > 0 && rect.height > 0) { result.visibleTables.push({ index: i, className: el.className, id: el.id, rows: el.querySelectorAll('tr').length }); } }); // Boutons visibles const buttons = document.querySelectorAll('button:not([hidden]):not([style*="display: none"])'); buttons.forEach((el, i) => { const rect = el.getBoundingClientRect(); if (rect.width > 0 && rect.height > 0 && i < 10) { result.visibleButtons.push({ index: i, className: el.className, textContent: el.textContent?.trim(), type: el.type }); } }); result.allClasses = Array.from(result.allClasses).sort(); return result; }); this.structure[`tab_${tabIndex}`] = tabContent; console.log(` - ${tabContent.visibleForms.length} formulaires visibles`); console.log(` - ${tabContent.visibleTables.length} tables visibles`); console.log(` - ${tabContent.visibleButtons.length} boutons visibles`); console.log(` - ${tabContent.allClasses.length} classes CSS trouv√©es`); } else { console.log(`‚ùå Onglet ${tabIndex} non trouv√©`); } } catch (error) { console.log(`‚ùå Erreur inspection onglet ${tabIndex}:`, error.message); } } async inspectAllTabs() { console.log('\nüîç Inspection de tous les onglets...'); const tabCount = this.structure.main?.tabs?.length || 0; console.log(`üìä ${tabCount} onglets √† inspecter`); for (let i = 0; i < Math.min(tabCount, 11); i++) { await this.inspectTabContent(i); await new Promise(resolve => setTimeout(resolve, 1000)); } } async generateReport() { const reportPath = 'structure--complete.json'; fs.writeFileSync(reportPath, JSON.stringify(this.structure, null, 2)); console.log('\nüìä === RAPPORT D\'INSPECTION STRUCTURE  ==='); console.log(`üíæ Rapport complet sauvegard√©: ${reportPath}`); // G√©n√©rer des s√©lecteurs recommand√©s const recommendations = { tabs: [], forms: [], tables: [], buttons: [] }; // Analyser les onglets if (this.structure.main?.tabs) { this.structure.main.tabs.forEach((tab, i) => { const selectors = []; if (tab.dataTab) selectors.push(`button[data-tab="${tab.dataTab}"]`); if (tab.role === 'tab') selectors.push(`[role="tab"]:nth-child(${i + 1})`); if (tab.className) selectors.push(`.${tab.className.split(' ')[0]}`); recommendations.tabs.push({ index: i, text: tab.textContent, selectors: selectors }); }); } // Analyser les classes communes const allClasses = new Set(); Object.s(this.structure).forEach( => { if (.startsWith('tab_') && this.structure[].allClasses) { this.structure[].allClasses.forEach(cls => allClasses.add(cls)); } }); recommendations.commonClasses = Array.from(allClasses) .filter(cls => cls.includes() || cls.includes('management') || cls.includes('form') || cls.includes('table')) .sort(); const recommendationsPath = 'selectors-recommendations.json'; fs.writeFileSync(recommendationsPath, JSON.stringify(recommendations, null, 2)); console.log(`üéØ Recommandations de s√©lecteurs: ${recommendationsPath}`); console.log('\nüìã Classes CSS communes trouv√©es:'); recommendations.commonClasses.slice(0, 20).forEach(cls => { console.log(` - .${cls}`); }); } async cleanup() { if (this.browser) { await this.browser.close(); } }
}

// Ex√©cution
async function main() { const inspector = new StructureInspector(); try { await inspector.init(); const loginSuccess = await inspector.login(); if (!loginSuccess) { console.log('‚ùå Impossible de se connecter'); return; } await inspector.inspectMainStructure(); await inspector.inspectAllTabs(); await inspector.generateReport(); } catch (error) { console.error('‚ùå Erreur fatale:', error); } finally { await inspector.cleanup(); }
}

if (require.main === module) { main().catch(console.error);
}

module.exports = StructureInspector;