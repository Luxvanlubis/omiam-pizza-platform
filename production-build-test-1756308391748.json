{
  "timestamp": "2025-08-27T15:26:03.319Z",
  "status": "FAILED",
  "tests": [
    {
      "name": "Vérification des dépendances",
      "status": "PASSED",
      "duration": 2,
      "details": {
        "totalDependencies": 60,
        "devDependencies": 6,
        "criticalDepsFound": 3
      },
      "error": null
    },
    {
      "name": "Validation configuration Next.js",
      "status": "PASSED",
      "duration": 1,
      "details": {
        "configExists": true,
        "hasOptimizations": true,
        "configSize": 2694
      },
      "error": null
    },
    {
      "name": "Build de production",
      "status": "FAILED",
      "duration": 28301,
      "details": {},
      "error": "Build échoué: Command failed: npm run build\nFailed to compile.\n\n./src/components/RestaurantProfile.tsx\nError: \n  \u001b[31mx\u001b[0m Unexpected token `div`. Expected jsx identifier\n    ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\components\\RestaurantProfile.tsx\u001b[0m:11:1]\n \u001b[2m11\u001b[0m | interface Restaurant { id: string; name: string; description: string; address: string; phone: string; email: string; website: string; openingHours: any; deliveryRadius: number; rating: number; totalReviews: number; foundedDate: Date; specialties: string[]; channels: Array<{ name: string; url: string; type: string; }>; media: Array<{ name: string; url: string; type: string; }>; specials: Array<{ name: string; description: string; validUntil: Date; discount: number; }>;\n \u001b[2m12\u001b[0m | }\n \u001b[2m13\u001b[0m | \n \u001b[2m14\u001b[0m | export function RestaurantProfile() { const [restaurant, setRestaurant] = useState<Restaurant | null>(null); const [loading, setLoading] = useState(true); const [error, setError] = useState<string | null>(null); useEffect(() => { const fetchRestaurantData = async () => { try { const response = await fetch('/api/restaurant'); if (!response.ok) { throw new Error('Erreur lors du chargement des données'); } const data = await response.json(); setRestaurant(data); } catch (err) { setError(err instanceof Error ? err.message : 'Erreur inconnue'); } finally { setLoading(false); } }; fetchRestaurantData(); }, []); if (loading) { return ( <div className=\"container mx-auto px-4 py-8\"> <div className=\"animate-pulse space-y-6\"> <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div> <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"> {[...Array(6)].map((_, i) => ( <div ={i} className=\"h-48 bg-gray-200 rounded-lg\"></div> ))} </div> </div> </div> ); } if (error) { return ( <div className=\"container mx-auto px-4 py-8\"> <Card className=\"border-red-200 bg-red-50\"> <CardContent className=\"pt-6\"> <div className=\"flex items-center space-x-2 text-red-600\"> <Award className=\"h-5 w-5\" /> <span>Erreur: {error}</span> </div> </CardContent> </Card> </div> ); } if (!restaurant) { return ( <div className=\"container mx-auto px-4 py-8\"> <Card> <CardContent className=\"pt-6\"> <p className=\"text-center text-gray-500\">Aucune donnée restaurant trouvée</p> </CardContent> </Card> </div> ); } const formatOpeningHours = (hours: any) => { if (!hours || typeof hours !== 'object') return 'Horaires non disponibles'; const daysMap: { [: string]: string } = { monday: 'Lundi', tuesday: 'Mardi', wednesday: 'Mercredi', thursday: 'Jeudi', friday: 'Vendredi', saturday: 'Samedi', sunday: 'Dimanche' }; return Object.entries(hours) .map(([day, time]) => `${daysMap[day] || day}: ${time'Fermé'}`) .join(', '); }; return ( <div className=\"container mx-auto px-4 py-8 space-y-8\"> {/* En-tête du restaurant */} <div className=\"text-center space-y-4\"> <h1 className=\"text-4xl font-bold text-red-800 dark:text-red-600\"> {restaurant.name} </h1> <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\"> {restaurant.description} </p> <div className=\"flex items-center justify-center space-x-4\"> <div className=\"flex items-center space-x-1\"> <Star className=\"h-5 w-5 text-yellow-500 fill-current\" /> <span className=\"font-semibold\">{restaurant.rating}</span> <span className=\"text-gray-500\">({restaurant.totalReviews} avis)</span> </div> <Badge variant=\"secondary\" className=\"flex items-center space-x-1\"> <Calendar className=\"h-4 w-4\" /> <span>Depuis {new Date(restaurant.foundedDate).getFullYear()}</span> </Badge> </div> </div> <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"> {/* Informations de contact */} <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <MapPin className=\"h-5 w-5 text-red-600\" /> <span>Contact & Localisation</span> </CardTitle> </CardHeader> <CardContent className=\"space-y-4\"> <div className=\"flex items-start space-x-3\"> <MapPin className=\"h-4 w-4 text-gray-500 mt-1\" /> <span className=\"text-sm\">{restaurant.address}</span> </div> <div className=\"flex items-center space-x-3\"> <Phone className=\"h-4 w-4 text-gray-500\" /> <a href={`tel:${restaurant.phone}`} className=\"text-sm hover:text-red-600\"> {restaurant.phone} </a> </div> <div className=\"flex items-center space-x-3\"> <Mail className=\"h-4 w-4 text-gray-500\" /> <a href={`mailto:${restaurant.email}`} className=\"text-sm hover:text-red-600\"> {restaurant.email} </a> </div> {restaurant.website && ( <div className=\"flex items-center space-x-3\"> <Globe className=\"h-4 w-4 text-gray-500\" /> <a href={restaurant.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-sm hover:text-red-600 flex items-center space-x-1\" > <span>Site web</span> <ExternalLink className=\"h-3 w-3\" /> </a> </div> )} </CardContent> </Card> {/* Horaires et service */} <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <Clock className=\"h-5 w-5 text-red-600\" /> <span>Horaires & Service</span> </CardTitle> </CardHeader> <CardContent className=\"space-y-4\"> <div className=\"text-sm\"> <p className=\"font-medium mb-2\">Horaires d'ouverture:</p> <p className=\"text-gray-600 leading-relaxed\"> {formatOpeningHours(restaurant.openingHours)} </p> </div> <Separator /> <div className=\"flex items-center space-x-3\"> <Truck className=\"h-4 w-4 text-gray-500\" /> <span className=\"text-sm\"> Livraison dans un rayon de {restaurant.deliveryRadius} km </span> </div> </CardContent> </Card> {/* Spécialités */} <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <ChefHat className=\"h-5 w-5 text-red-600\" /> <span>Nos Spécialités</span> </CardTitle> </CardHeader> <CardContent> <div className=\"flex flex-wrap gap-2\"> {restaurant.specialties.map((specialty, index) => ( <Badge ={index} variant=\"outline\" className=\"text-xs\"> {specialty} </Badge> ))} </div> </CardContent> </Card> {/* Canaux de commande */} {restaurant.channels.length > 0 && ( <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <Users className=\"h-5 w-5 text-red-600\" /> <span>Commander en ligne</span> </CardTitle> </CardHeader> <CardContent className=\"space-y-3\"> {restaurant.channels.map((channel, index) => ( <Button ={index} variant=\"outline\" className=\"w-full justify-between\" asChild > <a href={channel.url} target=\"_blank\" rel=\"noopener noreferrer\"> <span>{channel.name}</span> <ExternalLink className=\"h-4 w-4\" /> </a> </Button> ))} </CardContent> </Card> )} {/* Réseaux sociaux */} {restaurant.media.length > 0 && ( <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <Heart className=\"h-5 w-5 text-red-600\" /> <span>Suivez-nous</span> </CardTitle> </CardHeader> <CardContent className=\"space-y-3\"> {restaurant.media.map((media, index) => ( <Button ={index} variant=\"ghost\" className=\"w-full justify-between\" asChild > <a href={media.url} target=\"_blank\" rel=\"noopener noreferrer\"> <span>{media.name}</span> <ExternalLink className=\"h-4 w-4\" /> </a> </Button> ))} </CardContent> </Card> )} {/* Offres spéciales */} {restaurant.specials.length > 0 && ( <Card className=\"md:col-span-2 lg:col-span-3\"> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <Award className=\"h-5 w-5 text-red-600\" /> <span>Offres Spéciales</span> </CardTitle> </CardHeader> <CardContent> <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"> {restaurant.specials.map((special, index) => ( <Card ={index} className=\"border-orange-200 bg-orange-50 dark:bg-orange-950/20\"> <CardHeader className=\"pb-3\"> <CardTitle className=\"text-lg text-orange-800 dark:text-orange-600\"> {special.name} </CardTitle> <Badge className=\"w-fit bg-orange-600 text-white\"> -{special.discount}% </Badge> </CardHeader> <CardContent> <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\"> {special.description} </p> <p className=\"text-xs text-orange-600 font-medium\"> Valable jusqu'au {new Date(special.validUntil).toLocaleDaring('fr-FR')} </p> </CardContent> </Card> ))} </div> </CardContent> </Card> )} </div> </div> );\n    : \u001b[31;1mu001b[0m\n \u001b[2m15\u001b[0m | }\n    `----\n\nCaused by:\n    Syntax Error\n\nImport trace for requested module:\n./src/components/RestaurantProfile.tsx\n./src/app/restaurant/page.tsx\n\n./src/components/notifications/NotificationSystem.tsx\nModule not found: Can't resolve '@/components/ui/use-toast'\n\nhttps://nextjs.org/docs/messages/module-not-found\n\nImport trace for requested module:\n./src/app/admin/notifications/page.tsx\n\n./src/components/reservation/WaitlistManagement.tsx\nModule not found: Can't resolve '@/components/ui/use-toast'\n\nhttps://nextjs.org/docs/messages/module-not-found\n\nImport trace for requested module:\n./src/app/admin/waitlist/page.tsx\n\n./src/app/admin/stripe-config/page.tsx\nError: \n  \u001b[31mx\u001b[0m Unterminated string constant\n   ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\app\\admin\\stripe-config\\page.tsx\u001b[0m:2:1]\n \u001b[2m2\u001b[0m | import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';\n \u001b[2m3\u001b[0m | import { cookies } from 'next/headers';\n \u001b[2m4\u001b[0m | import { redirect } from 'next/navigation';\n \u001b[2m5\u001b[0m | import StripeConfig from '@/components//StripeConfig;\n   : \u001b[31;1m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n \u001b[2m6\u001b[0m | \n \u001b[2m7\u001b[0m | export const metadata: Metadata = { title: 'Configuration Stripe - istration | OMIAM Pizza', description:  et configuration de l\\'intégration Stripe pour les paiements',\n \u001b[2m8\u001b[0m | };\n   `----\n\n  \u001b[31mx\u001b[0m Expected ',', got 'configuration'\n    ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\app\\admin\\stripe-config\\page.tsx\u001b[0m:4:1]\n \u001b[2m 4\u001b[0m | import { redirect } from 'next/navigation';\n \u001b[2m 5\u001b[0m | import StripeConfig from '@/components//StripeConfig;\n \u001b[2m 6\u001b[0m | \n \u001b[2m 7\u001b[0m | export const metadata: Metadata = { title: 'Configuration Stripe - istration | OMIAM Pizza', description:  et configuration de l\\'intégration Stripe pour les paiements',\n    : \u001b[31;1m                                                                                                              ^^^^^^^^^^^^^\u001b[0m\n \u001b[2m 8\u001b[0m | };\n \u001b[2m 9\u001b[0m | \n \u001b[2m10\u001b[0m | export default async function StripeConfigPage() { const supabase = createServerComponentClient({ cookies }); const { data: { session }, error } = await supabase.auth.getSession(); // Vérifier l'authentification et les permissions if (error || !session?.user) { redirect('/login?callbackUrl=//stripe-config'); } // Vérifier les permissions  (à adapter selon votre système de rôles) // if (session.user.role !== ) { // redirect('/unauthorized'); // } return ( <div className=\"container mx-auto py-8 px-4\"> <div className=\"max-w-4xl mx-auto\"> <div className=\"mb-8\"> <h1 className=\"text-3xl font-bold tracking-tight\">Configuration Stripe</h1> <p className=\"text-muted-foreground mt-2\"> Vérifiez et ez l'intégration Stripe pour les paiements sécurisés </p> </div> <StripeConfig /> </div> </div> );\n    `----\n\nCaused by:\n    Syntax Error\n\nImport trace for requested module:\n./src/app/admin/stripe-config/page.tsx\n\n./src/app/api/notifications/preferences/route.ts\nError: \n  \u001b[31mx\u001b[0m Expected a semicolon\n    ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\app\\api\\notifications\\preferences\\route.ts\u001b[0m:16:1]\n \u001b[2m16\u001b[0m |       error: 'User ID is required'\n \u001b[2m17\u001b[0m |     }, { status: 400 }); } // Valider les champs de préférences const validFields = [ 'orderStatusUpdates', 'promotions', 'newProducts', 'loyaltyRewards', 'systemMessages', 'emailNotifications', 'pushNotifications', 'smsNotifications' ]; const filteredPreferences = Object.s(preferences) .filter( => validFields.includes()) .reduce((obj, ) => { obj[] = preferences[]; return obj; }, {} as any); if (Object.s(filteredPreferences).length === 0) { return NextResponse.json({\n \u001b[2m18\u001b[0m |       error: 'No valid preference fields provided'\n \u001b[2m19\u001b[0m |     }, { status: 400 }); } const updatedPreferences = await pushNotificationService.updateNotificationPreferences( userId, filteredPreferences ); return NextResponse.json(updatedPreferences);   } catch (error) { console.error('Error updating notification preferences:', error instanceof Error ? error.message : String(error)); return NextResponse.json({\n    : \u001b[31;1m     ^\u001b[0m\n \u001b[2m20\u001b[0m |       error: 'Erreur lors de la mise à jour des préférences'\n \u001b[2m21\u001b[0m |     }, { status: 500 }); }\n \u001b[2m22\u001b[0m | }\n    `----\n\n  \u001b[31mx\u001b[0m Expression expected\n    ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\app\\api\\notifications\\preferences\\route.ts\u001b[0m:16:1]\n \u001b[2m16\u001b[0m |       error: 'User ID is required'\n \u001b[2m17\u001b[0m |     }, { status: 400 }); } // Valider les champs de préférences const validFields = [ 'orderStatusUpdates', 'promotions', 'newProducts', 'loyaltyRewards', 'systemMessages', 'emailNotifications', 'pushNotifications', 'smsNotifications' ]; const filteredPreferences = Object.s(preferences) .filter( => validFields.includes()) .reduce((obj, ) => { obj[] = preferences[]; return obj; }, {} as any); if (Object.s(filteredPreferences).length === 0) { return NextResponse.json({\n \u001b[2m18\u001b[0m |       error: 'No valid preference fields provided'\n \u001b[2m19\u001b[0m |     }, { status: 400 }); } const updatedPreferences = await pushNotificationService.updateNotificationPreferences( userId, filteredPreferences ); return NextResponse.json(updatedPreferences);   } catch (error) { console.error('Error updating notification preferences:', error instanceof Error ? error.message : String(error)); return NextResponse.json({\n    : \u001b[31;1m     ^\u001b[0m\n \u001b[2m20\u001b[0m |       error: 'Erreur lors de la mise à jour des préférences'\n \u001b[2m21\u001b[0m |     }, { status: 500 }); }\n \u001b[2m22\u001b[0m | }\n    `----\n\nCaused by:\n    Syntax Error\n\nImport trace for requested module:\n./src/app/api/notifications/preferences/route.ts\n\n\n> Build failed because of webpack errors\n"
    },
    {
      "name": "Validation des artefacts",
      "status": "FAILED",
      "duration": 1,
      "details": {},
      "error": "Fichiers de build manquants: .next/BUILD_ID, .next/static"
    },
    {
      "name": "Test de démarrage production",
      "status": "PASSED",
      "duration": 82,
      "details": {
        "startupTested": true,
        "hasStartupErrors": false,
        "outputPreview": "\"Timeout OK\"\r\n"
      },
      "error": null
    }
  ],
  "buildTime": null,
  "buildSize": null,
  "errors": [
    "Build de production: Build échoué: Command failed: npm run build\nFailed to compile.\n\n./src/components/RestaurantProfile.tsx\nError: \n  \u001b[31mx\u001b[0m Unexpected token `div`. Expected jsx identifier\n    ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\components\\RestaurantProfile.tsx\u001b[0m:11:1]\n \u001b[2m11\u001b[0m | interface Restaurant { id: string; name: string; description: string; address: string; phone: string; email: string; website: string; openingHours: any; deliveryRadius: number; rating: number; totalReviews: number; foundedDate: Date; specialties: string[]; channels: Array<{ name: string; url: string; type: string; }>; media: Array<{ name: string; url: string; type: string; }>; specials: Array<{ name: string; description: string; validUntil: Date; discount: number; }>;\n \u001b[2m12\u001b[0m | }\n \u001b[2m13\u001b[0m | \n \u001b[2m14\u001b[0m | export function RestaurantProfile() { const [restaurant, setRestaurant] = useState<Restaurant | null>(null); const [loading, setLoading] = useState(true); const [error, setError] = useState<string | null>(null); useEffect(() => { const fetchRestaurantData = async () => { try { const response = await fetch('/api/restaurant'); if (!response.ok) { throw new Error('Erreur lors du chargement des données'); } const data = await response.json(); setRestaurant(data); } catch (err) { setError(err instanceof Error ? err.message : 'Erreur inconnue'); } finally { setLoading(false); } }; fetchRestaurantData(); }, []); if (loading) { return ( <div className=\"container mx-auto px-4 py-8\"> <div className=\"animate-pulse space-y-6\"> <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div> <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"> {[...Array(6)].map((_, i) => ( <div ={i} className=\"h-48 bg-gray-200 rounded-lg\"></div> ))} </div> </div> </div> ); } if (error) { return ( <div className=\"container mx-auto px-4 py-8\"> <Card className=\"border-red-200 bg-red-50\"> <CardContent className=\"pt-6\"> <div className=\"flex items-center space-x-2 text-red-600\"> <Award className=\"h-5 w-5\" /> <span>Erreur: {error}</span> </div> </CardContent> </Card> </div> ); } if (!restaurant) { return ( <div className=\"container mx-auto px-4 py-8\"> <Card> <CardContent className=\"pt-6\"> <p className=\"text-center text-gray-500\">Aucune donnée restaurant trouvée</p> </CardContent> </Card> </div> ); } const formatOpeningHours = (hours: any) => { if (!hours || typeof hours !== 'object') return 'Horaires non disponibles'; const daysMap: { [: string]: string } = { monday: 'Lundi', tuesday: 'Mardi', wednesday: 'Mercredi', thursday: 'Jeudi', friday: 'Vendredi', saturday: 'Samedi', sunday: 'Dimanche' }; return Object.entries(hours) .map(([day, time]) => `${daysMap[day] || day}: ${time'Fermé'}`) .join(', '); }; return ( <div className=\"container mx-auto px-4 py-8 space-y-8\"> {/* En-tête du restaurant */} <div className=\"text-center space-y-4\"> <h1 className=\"text-4xl font-bold text-red-800 dark:text-red-600\"> {restaurant.name} </h1> <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\"> {restaurant.description} </p> <div className=\"flex items-center justify-center space-x-4\"> <div className=\"flex items-center space-x-1\"> <Star className=\"h-5 w-5 text-yellow-500 fill-current\" /> <span className=\"font-semibold\">{restaurant.rating}</span> <span className=\"text-gray-500\">({restaurant.totalReviews} avis)</span> </div> <Badge variant=\"secondary\" className=\"flex items-center space-x-1\"> <Calendar className=\"h-4 w-4\" /> <span>Depuis {new Date(restaurant.foundedDate).getFullYear()}</span> </Badge> </div> </div> <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"> {/* Informations de contact */} <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <MapPin className=\"h-5 w-5 text-red-600\" /> <span>Contact & Localisation</span> </CardTitle> </CardHeader> <CardContent className=\"space-y-4\"> <div className=\"flex items-start space-x-3\"> <MapPin className=\"h-4 w-4 text-gray-500 mt-1\" /> <span className=\"text-sm\">{restaurant.address}</span> </div> <div className=\"flex items-center space-x-3\"> <Phone className=\"h-4 w-4 text-gray-500\" /> <a href={`tel:${restaurant.phone}`} className=\"text-sm hover:text-red-600\"> {restaurant.phone} </a> </div> <div className=\"flex items-center space-x-3\"> <Mail className=\"h-4 w-4 text-gray-500\" /> <a href={`mailto:${restaurant.email}`} className=\"text-sm hover:text-red-600\"> {restaurant.email} </a> </div> {restaurant.website && ( <div className=\"flex items-center space-x-3\"> <Globe className=\"h-4 w-4 text-gray-500\" /> <a href={restaurant.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-sm hover:text-red-600 flex items-center space-x-1\" > <span>Site web</span> <ExternalLink className=\"h-3 w-3\" /> </a> </div> )} </CardContent> </Card> {/* Horaires et service */} <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <Clock className=\"h-5 w-5 text-red-600\" /> <span>Horaires & Service</span> </CardTitle> </CardHeader> <CardContent className=\"space-y-4\"> <div className=\"text-sm\"> <p className=\"font-medium mb-2\">Horaires d'ouverture:</p> <p className=\"text-gray-600 leading-relaxed\"> {formatOpeningHours(restaurant.openingHours)} </p> </div> <Separator /> <div className=\"flex items-center space-x-3\"> <Truck className=\"h-4 w-4 text-gray-500\" /> <span className=\"text-sm\"> Livraison dans un rayon de {restaurant.deliveryRadius} km </span> </div> </CardContent> </Card> {/* Spécialités */} <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <ChefHat className=\"h-5 w-5 text-red-600\" /> <span>Nos Spécialités</span> </CardTitle> </CardHeader> <CardContent> <div className=\"flex flex-wrap gap-2\"> {restaurant.specialties.map((specialty, index) => ( <Badge ={index} variant=\"outline\" className=\"text-xs\"> {specialty} </Badge> ))} </div> </CardContent> </Card> {/* Canaux de commande */} {restaurant.channels.length > 0 && ( <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <Users className=\"h-5 w-5 text-red-600\" /> <span>Commander en ligne</span> </CardTitle> </CardHeader> <CardContent className=\"space-y-3\"> {restaurant.channels.map((channel, index) => ( <Button ={index} variant=\"outline\" className=\"w-full justify-between\" asChild > <a href={channel.url} target=\"_blank\" rel=\"noopener noreferrer\"> <span>{channel.name}</span> <ExternalLink className=\"h-4 w-4\" /> </a> </Button> ))} </CardContent> </Card> )} {/* Réseaux sociaux */} {restaurant.media.length > 0 && ( <Card> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <Heart className=\"h-5 w-5 text-red-600\" /> <span>Suivez-nous</span> </CardTitle> </CardHeader> <CardContent className=\"space-y-3\"> {restaurant.media.map((media, index) => ( <Button ={index} variant=\"ghost\" className=\"w-full justify-between\" asChild > <a href={media.url} target=\"_blank\" rel=\"noopener noreferrer\"> <span>{media.name}</span> <ExternalLink className=\"h-4 w-4\" /> </a> </Button> ))} </CardContent> </Card> )} {/* Offres spéciales */} {restaurant.specials.length > 0 && ( <Card className=\"md:col-span-2 lg:col-span-3\"> <CardHeader> <CardTitle className=\"flex items-center space-x-2\"> <Award className=\"h-5 w-5 text-red-600\" /> <span>Offres Spéciales</span> </CardTitle> </CardHeader> <CardContent> <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"> {restaurant.specials.map((special, index) => ( <Card ={index} className=\"border-orange-200 bg-orange-50 dark:bg-orange-950/20\"> <CardHeader className=\"pb-3\"> <CardTitle className=\"text-lg text-orange-800 dark:text-orange-600\"> {special.name} </CardTitle> <Badge className=\"w-fit bg-orange-600 text-white\"> -{special.discount}% </Badge> </CardHeader> <CardContent> <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\"> {special.description} </p> <p className=\"text-xs text-orange-600 font-medium\"> Valable jusqu'au {new Date(special.validUntil).toLocaleDaring('fr-FR')} </p> </CardContent> </Card> ))} </div> </CardContent> </Card> )} </div> </div> );\n    : \u001b[31;1mu001b[0m\n \u001b[2m15\u001b[0m | }\n    `----\n\nCaused by:\n    Syntax Error\n\nImport trace for requested module:\n./src/components/RestaurantProfile.tsx\n./src/app/restaurant/page.tsx\n\n./src/components/notifications/NotificationSystem.tsx\nModule not found: Can't resolve '@/components/ui/use-toast'\n\nhttps://nextjs.org/docs/messages/module-not-found\n\nImport trace for requested module:\n./src/app/admin/notifications/page.tsx\n\n./src/components/reservation/WaitlistManagement.tsx\nModule not found: Can't resolve '@/components/ui/use-toast'\n\nhttps://nextjs.org/docs/messages/module-not-found\n\nImport trace for requested module:\n./src/app/admin/waitlist/page.tsx\n\n./src/app/admin/stripe-config/page.tsx\nError: \n  \u001b[31mx\u001b[0m Unterminated string constant\n   ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\app\\admin\\stripe-config\\page.tsx\u001b[0m:2:1]\n \u001b[2m2\u001b[0m | import { createServerComponentClient } from '@supabase/auth-helpers-nextjs';\n \u001b[2m3\u001b[0m | import { cookies } from 'next/headers';\n \u001b[2m4\u001b[0m | import { redirect } from 'next/navigation';\n \u001b[2m5\u001b[0m | import StripeConfig from '@/components//StripeConfig;\n   : \u001b[31;1m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n \u001b[2m6\u001b[0m | \n \u001b[2m7\u001b[0m | export const metadata: Metadata = { title: 'Configuration Stripe - istration | OMIAM Pizza', description:  et configuration de l\\'intégration Stripe pour les paiements',\n \u001b[2m8\u001b[0m | };\n   `----\n\n  \u001b[31mx\u001b[0m Expected ',', got 'configuration'\n    ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\app\\admin\\stripe-config\\page.tsx\u001b[0m:4:1]\n \u001b[2m 4\u001b[0m | import { redirect } from 'next/navigation';\n \u001b[2m 5\u001b[0m | import StripeConfig from '@/components//StripeConfig;\n \u001b[2m 6\u001b[0m | \n \u001b[2m 7\u001b[0m | export const metadata: Metadata = { title: 'Configuration Stripe - istration | OMIAM Pizza', description:  et configuration de l\\'intégration Stripe pour les paiements',\n    : \u001b[31;1m                                                                                                              ^^^^^^^^^^^^^\u001b[0m\n \u001b[2m 8\u001b[0m | };\n \u001b[2m 9\u001b[0m | \n \u001b[2m10\u001b[0m | export default async function StripeConfigPage() { const supabase = createServerComponentClient({ cookies }); const { data: { session }, error } = await supabase.auth.getSession(); // Vérifier l'authentification et les permissions if (error || !session?.user) { redirect('/login?callbackUrl=//stripe-config'); } // Vérifier les permissions  (à adapter selon votre système de rôles) // if (session.user.role !== ) { // redirect('/unauthorized'); // } return ( <div className=\"container mx-auto py-8 px-4\"> <div className=\"max-w-4xl mx-auto\"> <div className=\"mb-8\"> <h1 className=\"text-3xl font-bold tracking-tight\">Configuration Stripe</h1> <p className=\"text-muted-foreground mt-2\"> Vérifiez et ez l'intégration Stripe pour les paiements sécurisés </p> </div> <StripeConfig /> </div> </div> );\n    `----\n\nCaused by:\n    Syntax Error\n\nImport trace for requested module:\n./src/app/admin/stripe-config/page.tsx\n\n./src/app/api/notifications/preferences/route.ts\nError: \n  \u001b[31mx\u001b[0m Expected a semicolon\n    ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\app\\api\\notifications\\preferences\\route.ts\u001b[0m:16:1]\n \u001b[2m16\u001b[0m |       error: 'User ID is required'\n \u001b[2m17\u001b[0m |     }, { status: 400 }); } // Valider les champs de préférences const validFields = [ 'orderStatusUpdates', 'promotions', 'newProducts', 'loyaltyRewards', 'systemMessages', 'emailNotifications', 'pushNotifications', 'smsNotifications' ]; const filteredPreferences = Object.s(preferences) .filter( => validFields.includes()) .reduce((obj, ) => { obj[] = preferences[]; return obj; }, {} as any); if (Object.s(filteredPreferences).length === 0) { return NextResponse.json({\n \u001b[2m18\u001b[0m |       error: 'No valid preference fields provided'\n \u001b[2m19\u001b[0m |     }, { status: 400 }); } const updatedPreferences = await pushNotificationService.updateNotificationPreferences( userId, filteredPreferences ); return NextResponse.json(updatedPreferences);   } catch (error) { console.error('Error updating notification preferences:', error instanceof Error ? error.message : String(error)); return NextResponse.json({\n    : \u001b[31;1m     ^\u001b[0m\n \u001b[2m20\u001b[0m |       error: 'Erreur lors de la mise à jour des préférences'\n \u001b[2m21\u001b[0m |     }, { status: 500 }); }\n \u001b[2m22\u001b[0m | }\n    `----\n\n  \u001b[31mx\u001b[0m Expression expected\n    ,-[\u001b[36;1;4mF:\\OMIAM z ai workspace-83f2679f-c7ce-409a-9e01-dfac21829333\\src\\app\\api\\notifications\\preferences\\route.ts\u001b[0m:16:1]\n \u001b[2m16\u001b[0m |       error: 'User ID is required'\n \u001b[2m17\u001b[0m |     }, { status: 400 }); } // Valider les champs de préférences const validFields = [ 'orderStatusUpdates', 'promotions', 'newProducts', 'loyaltyRewards', 'systemMessages', 'emailNotifications', 'pushNotifications', 'smsNotifications' ]; const filteredPreferences = Object.s(preferences) .filter( => validFields.includes()) .reduce((obj, ) => { obj[] = preferences[]; return obj; }, {} as any); if (Object.s(filteredPreferences).length === 0) { return NextResponse.json({\n \u001b[2m18\u001b[0m |       error: 'No valid preference fields provided'\n \u001b[2m19\u001b[0m |     }, { status: 400 }); } const updatedPreferences = await pushNotificationService.updateNotificationPreferences( userId, filteredPreferences ); return NextResponse.json(updatedPreferences);   } catch (error) { console.error('Error updating notification preferences:', error instanceof Error ? error.message : String(error)); return NextResponse.json({\n    : \u001b[31;1m     ^\u001b[0m\n \u001b[2m20\u001b[0m |       error: 'Erreur lors de la mise à jour des préférences'\n \u001b[2m21\u001b[0m |     }, { status: 500 }); }\n \u001b[2m22\u001b[0m | }\n    `----\n\nCaused by:\n    Syntax Error\n\nImport trace for requested module:\n./src/app/api/notifications/preferences/route.ts\n\n\n> Build failed because of webpack errors\n",
    "Validation des artefacts: Fichiers de build manquants: .next/BUILD_ID, .next/static"
  ],
  "warnings": []
}