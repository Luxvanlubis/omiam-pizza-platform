import { , expect } from '@playwright/;

.describe('Homepage', () => { .beforeEach(async ({ page }) => { await page.goto('/'); }); ('should load the homepage successfully', async ({ page }) => { // Vérifier que la page se charge await expect(page).toHaveTitle(/.*/); // Vérifier que le body est présent await expect(page.locator('body')).toBeVisible(); }); ('should have proper meta tags', async ({ page }) => { // Vérifier les meta tags essentiels const viewport = page.locator('meta[name="viewport"]'); await expect(viewport).toHaveAttribute('content', 'width=device-width, initial-scale=1'); // Vérifier que les meta tags de sécurité sont présents const charset = page.locator('meta[charset]'); await expect(charset).toBeAttached(); }); ('should be responsive', async ({ page }) => { //  sur mobile await page.setViewportSize({ width: 375, height: 667 }); await expect(page.locator('body')).toBeVisible(); //  sur tablet await page.setViewportSize({ width: 768, height: 1024 }); await expect(page.locator('body')).toBeVisible(); //  sur desktop await page.setViewportSize({ width: 1920, height: 1080 }); await expect(page.locator('body')).toBeVisible(); }); ('should have working navigation', async ({ page }) => { // Vérifier que les liens de navigation fonctionnent // (à adapter selon votre structure de navigation) // Exemple: vérifier qu'il n'y a pas d'erreurs 404 page.on('response', response => { if (response.status() === 404) { throw new Error(`404 error on ${response.url()}`); } }); // Attendre que la page soit complètement chargée await page.waitForLoadState('networkidle'); }); ('should have proper accessibility', async ({ page }) => { // Vérifier les éléments d'accessibilité de base const skipLink = page.locator('[href="#main-content"], [href="#main"]'); if (await skipLink.count() > 0) { await expect(skipLink).toBeVisible(); } // Vérifier que les images ont des alt texts (si présentes) const images = page.locator('img'); const imageCount = await images.count(); for (let i = 0; i < imageCount; i++) { const img = images.nth(i); const alt = await img.getAttribute('alt'); const ariaLabel = await img.getAttribute('aria-label'); const role = await img.getAttribute('role'); // L'image doit avoir soit un alt, soit un aria-label, soit role="presentation" expect(alt !== null || ariaLabel !== null || role === 'presentation').toBeTruthy(); } }); ('should load without console errors', async ({ page }) => { const consoleErrors: string[] = []; page.on('console', msg => { if (msg.type() === 'error') { consoleErrors.push(msg.text()); } }); await page.goto('/'); await page.waitForLoadState('networkidle'); // Filtrer les erreurs connues/acceptables const significantErrors = consoleErrors.filter(error => { // Ignorer certaines erreurs communes en développement return !error.includes('favicon.ico') && !error.includes('_next/static') && !error.includes('WebSocket'); }); expect(significantErrors).toHaveLength(0); }); ('should have proper performance', async ({ page }) => { // Mesurer les Core Web Vitals await page.goto('/'); const performanceMetrics = await page.evaluate(() => { return new Promise((resolve) => { new PerformanceObserver((list) => { const entries = list.getEntries(); const metrics = { lcp: 0, fid: 0, cls: 0 }; entries.forEach((entry) => { if (entry.entryType === 'largest-contentful-paint') { metrics.lcp = entry.startTime; } if (entry.entryType === 'first-input') { metrics.fid = (entry as any).processingStart - entry.startTime; } if (entry.entryType === 'layout-shift' && !(entry as any).hadRecentInput) { metrics.cls += (entry as any).value; } }); resolve(metrics); }).observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] }); // Timeout après 5 secondes setTimeout(() => resolve({ lcp: 0, fid: 0, cls: 0 }), 5000); }); }); // Vérifications basiques de performance // LCP devrait être < 2.5s, FID < 100ms, CLS < 0.1 // Ces valeurs peuvent être ajustées selon vos besoins console.log('Performance metrics:', performanceMetrics); });
});