const fetch = require('node-fetch');

// Configuration Supabase
const supabaseUrl = 'https://bnjmxkjpngvkmelhknjv.supabase.co';
const supabaseService = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJuam14a2pwbmd2a21lbGhrbmp2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTgwMzUxNiwiZXhwIjoyMDcxMzc5NTE2fQ.F5d5kZ3Q81tQeFfoFCKHGqHUEQ196xgXblR8ZxV8dnU';

async function createCMSTable() { try { console.log('üöÄ Cr√©ation de la table CMS via API REST...'); // SQL pour cr√©er la table content_items const createTableSQL = ` -- Cr√©er la table content_items CREATE TABLE IF NOT EXISTS public.content_items ( id UUID DEFAULT gen_random_uuid() PRIMARY , VARCHAR(255) UNIQUE NOT NULL, title VARCHAR(500) NOT NULL, content TEXT NOT NULL, type VARCHAR(50) NOT NULL, page VARCHAR(100) NOT NULL, section VARCHAR(100) NOT NULL, metadata JSONB DEFAULT '{}', is_published BOOLEAN DEFAULT false, version INTEGER DEFAULT 1, tags TEXT[] DEFAULT '{}', seo_title VARCHAR(255), seo_description TEXT, seo_words TEXT[], created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), created_by UUID, updated_by UUID ); -- Cr√©er les index CREATE INDEX IF NOT EXISTS idx_content_items_ ON public.content_items(); CREATE INDEX IF NOT EXISTS idx_content_items_page ON public.content_items(page); CREATE INDEX IF NOT EXISTS idx_content_items_type ON public.content_items(type); CREATE INDEX IF NOT EXISTS idx_content_items_published ON public.content_items(is_published); CREATE INDEX IF NOT EXISTS idx_content_items_page_section ON public.content_items(page, section); -- Fonction pour updated_at CREATE OR REPLACE FUNCTION public.update_updated_at_column() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = NOW(); RETURN NEW; END; $$ language 'plpgsql'; -- Trigger pour updated_at DROP TRIGGER IF EXISTS update_content_items_updated_at ON public.content_items; CREATE TRIGGER update_content_items_updated_at BEFORE UPDATE ON public.content_items FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column(); -- Activer RLS ALTER TABLE public.content_items ENABLE ROW LEVEL SECURITY; -- Politique pour lecture publique DROP POLICY IF EXISTS "Public can read published content" ON public.content_items; CREATE POLICY "Public can read published content" ON public.content_items FOR SELECT USING (is_published = true); -- Politique pour gestion par utilisateurs authentifi√©s DROP POLICY IF EXISTS "Authenticated users can manage content" ON public.content_items; CREATE POLICY "Authenticated users can manage content" ON public.content_items FOR ALL USING (auth.role() = 'authenticated'); `; // Ex√©cuter le SQL via l'API REST const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${supabaseService}`, 'api: supabaseService }, body: JSON.stringify({ sql: createTableSQL }) }); if (!response.ok) { const errorText = await response.text(); console.log('‚ùå Erreur API:', response.status, errorText); // Essayer une approche alternative avec l'API SQL directe console.log('üîÑ Tentative avec l\'API SQL directe...'); const sqlResponse = await fetch(`${supabaseUrl}/rest/v1/rpc/sql`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${supabaseService}`, 'api: supabaseService }, body: JSON.stringify({ query: createTableSQL }) }); if (!sqlResponse.ok) { const sqlErrorText = await sqlResponse.text(); console.log('‚ùå Erreur SQL API:', sqlResponse.status, sqlErrorText); throw new Error(`√âchec de cr√©ation de table: ${sqlErrorText}`); } console.log('‚úÖ Table cr√©√©e via API SQL directe'); } else { console.log('‚úÖ Table cr√©√©e via API RPC'); } // V√©rifier que la table existe maintenant console.log('üîç V√©rification de la cr√©ation de table...'); const checkResponse = await fetch(`${supabaseUrl}/rest/v1/content_items?select=count`, { method: 'GET', headers: { 'Authorization': `Bearer ${supabaseService}`, 'api: supabaseService, 'Range': '0-0' } }); if (checkResponse.ok) { console.log('‚úÖ Table content_items confirm√©e comme existante'); // Maintenant ins√©rer les donn√©es de console.log('üìù Insertion des donn√©es de ...'); const Data = [ { : 'hero.title', title: 'Titre Principal', content: 'Bienvenue chez OMIAM - Saveurs Authentiques du Maroc', type: 'title', page: 'home', section: 'hero', is_published: true, metadata: { priority: 'high', featured: true } }, { : 'hero.description', title: 'Description Hero', content: 'D√©couvrez nos plats traditionnels marocains pr√©par√©s avec amour et des ingr√©dients frais.', type: 'description', page: 'home', section: 'hero', is_published: true, metadata: { style: 'large' } }, { : 'hero.cta', title: 'Bouton CTA', content: 'Commander maintenant', type: 'button', page: 'home', section: 'hero', is_published: true, metadata: { variant: 'primary', size: 'large' } } ]; const insertResponse = await fetch(`${supabaseUrl}/rest/v1/content_items`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${supabaseService}`, 'api: supabaseService, 'Prefer': 'return=representation' }, body: JSON.stringify(Data) }); if (insertResponse.ok) { const insertedData = await insertResponse.json(); console.log(`‚úÖ ${insertedData.length} √©l√©ments de  ins√©r√©s`); insertedData.forEach(item => { console.log(`  - ${item.}: ${item.title}`); }); console.log('\nüéâ Configuration CMS termin√©e avec succ√®s!'); console.log('\nüí° Prochaines √©tapes:'); console.log(' 1. er l\'interface  CMS'); console.log(' 2. V√©rifier l\'affichage des donn√©es'); console.log(' 3. Ajouter plus de contenu via l\'interface'); } else { const insertErrorText = await insertResponse.text(); console.log('‚ö†Ô∏è Erreur lors de l\'insertion:', insertResponse.status, insertErrorText); } } else { const checkErrorText = await checkResponse.text(); console.log('‚ùå Table non trouv√©e apr√®s cr√©ation:', checkResponse.status, checkErrorText); } } catch (error) { console.error('‚ùå Erreur g√©n√©rale:', error.message); console.log('\nüîß Solutions alternatives:'); console.log(' 1. Utiliser l\'interface Supabase Dashboard'); console.log(' 2. Ex√©cuter le SQL manuellement'); console.log(' 3. V√©rifier les permissions de la cl√© de service'); }
}

// Ex√©cuter la cr√©ation
if (require.main === module) { createCMSTable();
}

module.exports = { createCMSTable };