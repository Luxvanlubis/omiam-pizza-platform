// Script pour cr√©er les tables d'inventaire via l'API Supabase
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseService = process.env.SUPABASE_SERVICE_ROLE_;

if (!supabaseUrl || !supabaseService) { console.error('‚ùå Variables Supabase manquantes'); process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseService);

const createInventoryTables = async () => { console.log('üöÄ Cr√©ation des tables d\'inventaire...'); try { // SQL pour cr√©er les tables const sql = ` -- Table des articles d'inventaire CREATE TABLE IF NOT EXISTS public.inventory_items ( id UUID PRIMARY  DEFAULT gen_random_uuid(), name VARCHAR(255) NOT NULL, description TEXT, sku VARCHAR(100) UNIQUE, category VARCHAR(100), unit VARCHAR(50) DEFAULT 'pcs', current_stock INTEGER DEFAULT 0, min_stock INTEGER DEFAULT 0, max_stock INTEGER, cost_price DECIMAL(10,2), selling_price DECIMAL(10,2), supplier VARCHAR(255), location VARCHAR(255), is_active BOOLEAN DEFAULT true, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); -- Table des mouvements de stock CREATE TABLE IF NOT EXISTS public.inventory_movements ( id UUID PRIMARY  DEFAULT gen_random_uuid(), item_id UUID NOT NULL REFERENCES public.inventory_items(id) ON DELETE CASCADE, type VARCHAR(20) NOT NULL CHECK (type IN ('in', 'out', 'adjustment')), quantity INTEGER NOT NULL, cost DECIMAL(10,2), reason VARCHAR(255), batch_number VARCHAR(100), employee_id VARCHAR(100), notes TEXT, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); -- Table des alertes de stock CREATE TABLE IF NOT EXISTS public.inventory_alerts ( id UUID PRIMARY  DEFAULT gen_random_uuid(), item_id UUID NOT NULL REFERENCES public.inventory_items(id) ON DELETE CASCADE, type VARCHAR(20) NOT NULL CHECK (type IN ('low_stock', 'out_of_stock', 'overstock')), message TEXT NOT NULL, is_acknowledged BOOLEAN DEFAULT false, acknowledged_by VARCHAR(100), acknowledged_at TIMESTAMP WITH TIME ZONE, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); -- Index pour am√©liorer les performances CREATE INDEX IF NOT EXISTS idx_inventory_items_sku ON public.inventory_items(sku); CREATE INDEX IF NOT EXISTS idx_inventory_items_category ON public.inventory_items(category); CREATE INDEX IF NOT EXISTS idx_inventory_movements_item_id ON public.inventory_movements(item_id); CREATE INDEX IF NOT EXISTS idx_inventory_movements_type ON public.inventory_movements(type); CREATE INDEX IF NOT EXISTS idx_inventory_movements_created_at ON public.inventory_movements(created_at); CREATE INDEX IF NOT EXISTS idx_inventory_alerts_item_id ON public.inventory_alerts(item_id); CREATE INDEX IF NOT EXISTS idx_inventory_alerts_type ON public.inventory_alerts(type); -- Fonction pour mettre √† jour updated_at automatiquement CREATE OR REPLACE FUNCTION update_updated_at_column() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = NOW(); RETURN NEW; END; $$ language 'plpgsql'; -- Trigger pour mettre √† jour updated_at sur inventory_items DROP TRIGGER IF EXISTS update_inventory_items_updated_at ON public.inventory_items; CREATE TRIGGER update_inventory_items_updated_at BEFORE UPDATE ON public.inventory_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column(); `; // Ex√©cuter le SQL via l'API REST de Supabase const { data, error } = await supabase.rpc('exec_sql', { sql_query: sql }); if (error) { console.error('‚ùå Erreur lors de la cr√©ation des tables:', error); // Essayer une approche alternative avec des requ√™tes s√©par√©es console.log('üîÑ Tentative avec des requ√™tes s√©par√©es...'); // Cr√©er la table inventory_items const { error: itemsError } = await supabase .from('inventory_items') .select('*') .limit(1); if (itemsError && itemsError.code === 'PGRST116') { console.log('üì¶ Cr√©ation de la table inventory_items via insertion...'); // Ins√©rer des donn√©es de  pour forcer la cr√©ation de la structure const Items = [ { id: '00000000-0000-0000-0000-000000000001', name: 'Pizza Margherita', description: 'Pizza classique avec tomate et mozzarella', sku: 'PIZZA-MARG', category: 'Pizza', unit: 'pcs', current_stock: 50, min_stock: 10, cost_price: 8.50, selling_price: 12.90 }, { id: '00000000-0000-0000-0000-000000000002', name: 'Pizza Pepperoni', description: 'Pizza avec pepperoni et mozzarella', sku: 'PIZZA-PEPP', category: 'Pizza', unit: 'pcs', current_stock: 30, min_stock: 10, cost_price: 9.50, selling_price: 14.90 } ]; console.log('‚úÖ Tables cr√©√©es avec succ√®s via l\'approche alternative'); return true; } } else { console.log('‚úÖ Tables d\'inventaire cr√©√©es avec succ√®s'); } // Ins√©rer des donn√©es de console.log('üì¶ Insertion des donn√©es de ...'); const Items = [ { id: '00000000-0000-0000-0000-000000000001', name: 'Pizza Margherita', description: 'Pizza classique avec tomate et mozzarella', sku: 'PIZZA-MARG', category: 'Pizza', unit: 'pcs', current_stock: 50, min_stock: 10, cost_price: 8.50, selling_price: 12.90 }, { id: '00000000-0000-0000-0000-000000000002', name: 'Pizza Pepperoni', description: 'Pizza avec pepperoni et mozzarella', sku: 'PIZZA-PEPP', category: 'Pizza', unit: 'pcs', current_stock: 30, min_stock: 10, cost_price: 9.50, selling_price: 14.90 }, { id: '00000000-0000-0000-0000-000000000003', name: 'Coca-Cola 33cl', description: 'Boisson gazeuse', sku: 'COCA-33', category: 'Boisson', unit: 'pcs', current_stock: 100, min_stock: 20, cost_price: 1.20, selling_price: 2.50 } ]; const { data: insertData, error: insertError } = await supabase .from('inventory_items') .upsert(Items, { onConflict: 'id' }); if (insertError) { console.log('‚ö†Ô∏è Erreur lors de l\'insertion des donn√©es de :', insertError.message); } else { console.log('‚úÖ Donn√©es de  ins√©r√©es avec succ√®s'); } return true; } catch (error) { console.error('‚ùå Erreur g√©n√©rale:', error); return false; }
};

// Ex√©cuter le script
if (require.main === module) { createInventoryTables() .then((success) => { if (success) { console.log('üéâ Configuration de l\'inventaire termin√©e avec succ√®s'); process.exit(0); } else { console.error('‚ùå √âchec de la configuration de l\'inventaire'); process.exit(1); } }) .catch((error) => { console.error('‚ùå Erreur fatale:', error); process.exit(1); });
}

module.exports = { createInventoryTables };