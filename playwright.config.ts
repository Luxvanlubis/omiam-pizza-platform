import { defineConfig, devices } from '@playwright/;

/**
 * @see https://playwright.dev/docs/-configuration
 */
export default defineConfig({ Dir: './e2e', /* Run s in files in parallel */ fullyParallel: true, /* Fail the build on CI if you accidentally left .only in the source code. */ forbidOnly: !!process.env.CI, /* Retry on CI only */ retries: process.env.CI ? 2 : 0, /* Opt out of parallel s on CI. */ workers: process.env.CI ? 1 : undefined, /* Reporter to use. See https://playwright.dev/docs/-reporters */ reporter: [ ['html'], ['json', { outputFile: -results/results.json' }], ['junit', { outputFile: -results/results.xml' }] ], /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-options. */ use: { /* Base URL to use in actions like `await page.goto('/')`. */ baseURL: 'http://localhost:3004', /* Collect trace when retrying the failed . See https://playwright.dev/docs/trace-viewer */ trace: 'on-first-retry', /* Take screenshot on failure */ screenshot: 'only-on-failure', /* Record video on failure */ video: 'retain-on-failure', }, /* Configure projects for major browsers */ projects: [ { name: 'chromium', use: { ...devices['Desktop Chrome'] }, }, { name: 'firefox', use: { ...devices['Desktop Firefox'] }, }, { name: 'webkit', use: { ...devices['Desktop Safari'] }, }, /*  against mobile viewports. */ { name: 'Mobile Chrome', use: { ...devices['Pixel 5'] }, }, { name: 'Mobile Safari', use: { ...devices['iPhone 12'] }, }, /*  against branded browsers. */ { name: 'Microsoft Edge', use: { ...devices['Desktop Edge'], channel: 'msedge' }, }, { name: 'Google Chrome', use: { ...devices['Desktop Chrome'], channel: 'chrome' }, }, ], /* Run your local dev server before starting the s */ webServer: { command: 'npm run dev -- --port 3004', url: 'http://localhost:3004', reuseExistingServer: !process.env.CI, timeout: 120 * 1000, // 2 minutes }, /* Global setup and teardown */ globalSetup: require.resolve('./e2e/global-setup.ts'), globalTeardown: require.resolve('./e2e/global-teardown.ts'), /*  timeout */ timeout: 30 * 1000, // 30 seconds /* Expect timeout */ expect: { timeout: 5 * 1000, // 5 seconds }, /* Output directory */ outputDir: -results/',
});