'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { CheckCircle, XCircle, AlertTriangle, CreditCard, , Webhook, Shield, Loader2, RefreshCw
} from 'lucide-react';
import { stripeService } from '@/lib/stripe-service';
import { getStripe } from '@/lib/stripe';

interface StripeStatus { isConfigured: boolean; isMockMode: boolean; publishable: string | null; Present: boolean; webhookPresent: boolean; clientStripeLoaded: boolean; healthCheck: { status: 'healthy' | 'error' | 'loading'; mode: 'live' | 'mock'; error?: string; };
}

export default function StripeConfig() { const [status, setStatus] = useState<StripeStatus>({ isConfigured: false, isMockMode: true, publishable: null, Present: false, webhookPresent: false, clientStripeLoaded: false, healthCheck: { status: 'loading', mode: 'mock' } }); const [isLoading, setIsLoading] = useState(true); const [Results, setResults] = useState<{ paymentIntent?: any; customer?: any; error?: string; }>({}); useEffect(() => { checkStripeConfiguration(); }, []); const checkStripeConfiguration = async () => { setIsLoading(true); try { // V√©rifier les variables d'environnement c√¥t√© client const publishable = process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_; const Present = !!process.env.STRIPE__; const webhookPresent = !!process.env.STRIPE_WEBHOOK_; // er le chargement de Stripe c√¥t√© client let clientStripeLoaded = false; try { const stripe = await getStripe(); clientStripeLoaded = !!stripe; } catch (error) { console.error('Erreur lors du chargement de Stripe:', error); } // Health check du service const healthCheck = await stripeService.healthCheck(); const isMockMode = stripeService.isMockMode(); const isConfigured = !isMockMode && !!publishable && publishable.startsWith('pk_'); setStatus({ isConfigured, isMockMode, publishable, Present, webhookPresent, clientStripeLoaded, healthCheck }); } catch (error) { console.error('Erreur lors de la v√©rification:', error); setStatus(prev => ({ ...prev, healthCheck: { status: 'error', mode: 'mock', error: error instanceof Error ? error.message : 'Erreur inconnue' } })); } finally { setIsLoading(false); } }; const runStripes = async () => { setResults({}); try { //  1: Cr√©er un PaymentIntent console.log('üß™ : Cr√©ation PaymentIntent...'); const paymentIntent = await stripeService.createPaymentIntent(10.50, 'eur', { : 'true', source: 'config- }); //  2: Cr√©er un Customer console.log('üß™ : Cr√©ation Customer...'); const customer = await stripeService.createCustomer( @example.com', User', { : 'true' } ); setResults({ paymentIntent, customer }); } catch (error) { setResults({ error: error instanceof Error ? error.message : 'Erreur lors des s' }); } }; const getStatusIcon = (condition: boolean, loading = false) => { if (loading) return <Loader2 className="h-4 w-4 animate-spin" />; return condition ? <CheckCircle className="h-4 w-4 text-green-500" /> : <XCircle className="h-4 w-4 text-red-500" />; }; const getStatusBadge = () => { if (isLoading) { return <Badge variant="secondary"><Loader2 className="h-3 w-3 mr-1 animate-spin" />V√©rification...</Badge>; } if (status.isConfigured) { return <Badge variant="default" className="bg-green-500"><CheckCircle className="h-3 w-3 mr-1" />Configur√©</Badge>; } if (status.isMockMode) { return <Badge variant="secondary"><AlertTriangle className="h-3 w-3 mr-1" />Mode Mock</Badge>; } return <Badge variant="destructive"><XCircle className="h-3 w-3 mr-1" />Non configur√©</Badge>; }; return ( <div className="space-y-6"> {/* En-t√™te */} <Card> <CardHeader> <div className="flex items-center justify-between"> <div className="flex items-center gap-3"> <CreditCard className="h-6 w-6" /> <div> <CardTitle>Configuration Stripe</CardTitle> <p className="text-sm text-muted-foreground mt-1"> V√©rification et  de l'int√©gration Stripe </p> </div> </div> <div className="flex items-center gap-2"> {getStatusBadge()} <Button variant="outline" size="sm" onClick={checkStripeConfiguration} disabled={isLoading} > <RefreshCw className={`h-4 w-4 mr-1 ${isLoading ? 'animate-spin' : ''}`} /> Actualiser </Button> </div> </div> </CardHeader> </Card> {/* Statut de la configuration */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Shield className="h-5 w-5" /> Statut de la Configuration </CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div className="flex items-center justify-between p-3 border rounded-lg"> <div className="flex items-center gap-2"> < className="h-4 w-4" /> <span className="text-sm font-medium">Cl√© Publique</span> </div> <div className="flex items-center gap-2"> {getStatusIcon(!!status.publishable, isLoading)} <span className="text-xs text-muted-foreground"> {status.publishable ? `${status.publishable.substring(0, 12)}...` : 'Non configur√©e' } </span> </div> </div> <div className="flex items-center justify-between p-3 border rounded-lg"> <div className="flex items-center gap-2"> < className="h-4 w-4" /> <span className="text-sm font-medium">Cl√© Secr√®te</span> </div> <div className="flex items-center gap-2"> {getStatusIcon(status.Present, isLoading)} <span className="text-xs text-muted-foreground"> {status.Present ? 'Configur√©e' : 'Non configur√©e'} </span> </div> </div> <div className="flex items-center justify-between p-3 border rounded-lg"> <div className="flex items-center gap-2"> <Webhook className="h-4 w-4" /> <span className="text-sm font-medium">Webhook </span> </div> <div className="flex items-center gap-2"> {getStatusIcon(status.webhookPresent, isLoading)} <span className="text-xs text-muted-foreground"> {status.webhookPresent ? 'Configur√©' : 'Non configur√©'} </span> </div> </div> <div className="flex items-center justify-between p-3 border rounded-lg"> <div className="flex items-center gap-2"> <CreditCard className="h-4 w-4" /> <span className="text-sm font-medium">Stripe.js</span> </div> <div className="flex items-center gap-2"> {getStatusIcon(status.clientStripeLoaded, isLoading)} <span className="text-xs text-muted-foreground"> {status.clientStripeLoaded ? 'Charg√©' : 'Erreur'} </span> </div> </div> </div> <Separator /> {/* Health Check */} <div className="space-y-2"> <h4 className="text-sm font-medium">Health Check</h4> <div className="flex items-center gap-2"> {status.healthCheck.status === 'loading' && <Loader2 className="h-4 w-4 animate-spin" />} {status.healthCheck.status === 'healthy' && <CheckCircle className="h-4 w-4 text-green-500" />} {status.healthCheck.status === 'error' && <XCircle className="h-4 w-4 text-red-500" />} <span className="text-sm"> Mode: <Badge variant="outline">{status.healthCheck.mode}</Badge> </span> {status.healthCheck.error && ( <span className="text-sm text-red-500">- {status.healthCheck.error}</span> )} </div> </div> </CardContent> </Card> {/* Alertes et recommandations */} {status.isMockMode && ( <Alert> <AlertTriangle className="h-4 w-4" /> <AlertDescription> <strong>Mode Mock activ√©</strong> - L'application fonctionne avec des paiements simul√©s. Configurez vos cl√©s Stripe pour activer les vrais paiements. <br /> <a href="/STRIPE_SETUP_GUIDE.md" className="text-blue-500 hover:underline mt-2 inline-block"> üìñ Voir le guide de configuration Stripe </a> </AlertDescription> </Alert> )} {!status.webhookPresent && status.isConfigured && ( <Alert> <AlertTriangle className="h-4 w-4" /> <AlertDescription> <strong>Webhook non configur√©</strong> - Les notifications de paiement ne fonctionneront pas correctement. Configurez votre webhook Stripe pour recevoir les confirmations de paiement. </AlertDescription> </Alert> )} {/* s fonctionnels */} <Card> <CardHeader> <CardTitle>s Fonctionnels</CardTitle> <p className="text-sm text-muted-foreground"> ez les fonctionnalit√©s Stripe de base </p> </CardHeader> <CardContent className="space-y-4"> <Button onClick={runStripes} className="w-full"> <CreditCard className="h-4 w-4 mr-2" /> Lancer les s </Button> {Results.error && ( <Alert> <XCircle className="h-4 w-4" /> <AlertDescription> <strong>Erreur lors des s:</strong> {Results.error} </AlertDescription> </Alert> )} {(Results.paymentIntent || Results.customer) && ( <div className="space-y-3"> <h4 className="text-sm font-medium text-green-600">‚úÖ s r√©ussis</h4> {Results.paymentIntent && ( <div className="p-3 bg-green-50 border border-green-200 rounded-lg"> <p className="text-sm font-medium">PaymentIntent cr√©√©</p> <p className="text-xs text-muted-foreground"> ID: {Results.paymentIntent.id} </p> </div> )} {Results.customer && ( <div className="p-3 bg-green-50 border border-green-200 rounded-lg"> <p className="text-sm font-medium">Customer cr√©√©</p> <p className="text-xs text-muted-foreground"> ID: {Results.customer.id} </p> </div> )} </div> )} </CardContent> </Card> </div> );
}