'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Package, Clock, CheckCircle, XCircle, Truck, MapPin, Phone, Mail, RefreshCw, Search, Filter
} from 'lucide-react';
import { supabaseIntegrationService } from '@/lib/supabase-integration-service';
import toast from 'react-hot-toast';

interface Order { id: string; orderNumber: string; customerName: string; customerEmail: string; customerPhone: string; status: 'pending' | 'confirmed' | 'preparing' | 'ready' | 'delivered' | 'cancelled'; items: OrderItem[]; total: number; createdAt: string; estimatedDelivery?: string; deliveryAddress?: string; notes?: string;
}

interface OrderItem { id: string; name: string; quantity: number; price: number; customizations?: string[];
}

const mockOrders: Order[] = [ { id: '1', orderNumber: 'ORD-001', customerName: 'Jean Dupont', customerEmail: 'jean.dupont@email.com', customerPhone: '+33 1 23 45 67 89', status: 'preparing', items: [ { id: '1', name: 'Pizza Margherita', quantity: 2, price: 12.50 }, { id: '2', name: 'Coca-Cola', quantity: 2, price: 2.50 } ], total: 30.00, createdAt: new Date().toISOString(), estimatedDelivery: new Date(Date.now() + 30 * 60000).toISOString(), deliveryAddress: '123 Rue de la Paix, Paris' }, { id: '2', orderNumber: 'ORD-002', customerName: 'Marie Martin', customerEmail: 'marie.martin@email.com', customerPhone: '+33 1 98 76 54 32', status: 'ready', items: [ { id: '3', name: 'Pizza Pepperoni', quantity: 1, price: 14.00 } ], total: 14.00, createdAt: new Date(Date.now() - 15 * 60000).toISOString(), estimatedDelivery: new Date(Date.now() + 15 * 60000).toISOString(), deliveryAddress: '456 Avenue des Champs, Lyon' }
];

export function OrderTracking() { const [orders, setOrders] = useState<Order[]>(mockOrders); const [filteredOrders, setFilteredOrders] = useState<Order[]>(mockOrders); const [searchTerm, setSearchTerm] = useState(''); const [statusFilter, setStatusFilter] = useState<string>('all'); const [isLoading, setIsLoading] = useState(false); const refreshOrders = async () => { setIsLoading(true); try { // Simulate API call await new Promise(resolve => setTimeout(resolve, 1000)); toast.success('Commandes actualisées'); } catch (error) { toast.error('Erreur lors de l\'actualisation'); } finally { setIsLoading(false); } }; const updateOrderStatus = async (orderId: string, newStatus: Order['status']) => { try { setOrders(prev => prev.map(order => order.id === orderId ? { ...order, status: newStatus } : order )); toast.success('Statut mis à jour'); } catch (error) { toast.error('Erreur lors de la mise à jour'); } }; const getStatusColor = (status: Order['status']) => { switch (status) { case 'pending': return 'bg-yellow-100 text-yellow-800'; case 'confirmed': return 'bg-blue-100 text-blue-800'; case 'preparing': return 'bg-orange-100 text-orange-800'; case 'ready': return 'bg-green-100 text-green-800'; case 'delivered': return 'bg-gray-100 text-gray-800'; case 'cancelled': return 'bg-red-100 text-red-800'; default: return 'bg-gray-100 text-gray-800'; } }; const getStatusIcon = (status: Order['status']) => { switch (status) { case 'pending': return <Clock className="h-4 w-4" />; case 'confirmed': return <CheckCircle className="h-4 w-4" />; case 'preparing': return <Package className="h-4 w-4" />; case 'ready': return <Truck className="h-4 w-4" />; case 'delivered': return <CheckCircle className="h-4 w-4" />; case 'cancelled': return <XCircle className="h-4 w-4" />; default: return <Clock className="h-4 w-4" />; } }; useEffect(() => { let filtered = orders; if (searchTerm) { filtered = filtered.filter(order => order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) || order.customerName.toLowerCase().includes(searchTerm.toLowerCase()) || order.customerEmail.toLowerCase().includes(searchTerm.toLowerCase()) ); } if (statusFilter !== 'all') { filtered = filtered.filter(order => order.status === statusFilter); } setFilteredOrders(filtered); }, [orders, searchTerm, statusFilter]); return ( <div data-id="order-tracking" className="space-y-6"> <Card> <CardHeader> <div className="flex items-center justify-between"> <div> <CardTitle className="flex items-center gap-2"> <Package className="h-5 w-5" /> Suivi des Commandes </CardTitle> <CardDescription> Gérez et suivez toutes les commandes en temps réel </CardDescription> </div> <Button onClick={refreshOrders} disabled={isLoading} variant="outline" > <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} /> Actualiser </Button> </div> </CardHeader> <CardContent> <Tabs defaultValue="active" className="space-y-4"> <TabsList> <TabsTrigger value="active">Commandes Actives</TabsTrigger> <TabsTrigger value="history">Historique</TabsTrigger> <TabsTrigger value="analytics">Analytiques</TabsTrigger> </TabsList> <TabsContent value="active" className="space-y-4"> {/* Filtres et recherche */} <div className="flex gap-4 items-end"> <div className="flex-1"> <Label htmlFor="search">Rechercher</Label> <div className="relative"> <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" /> <Input id="search" placeholder="Numéro de commande, nom client..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10" /> </div> </div> <div> <Label htmlFor="status-filter">Statut</Label> <Select value={statusFilter} onValueChange={setStatusFilter}> <SelectTrigger className="w-40"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="all">Tous</SelectItem> <SelectItem value="pending">En attente</SelectItem> <SelectItem value="confirmed">Confirmé</SelectItem> <SelectItem value="preparing">En préparation</SelectItem> <SelectItem value="ready">Prêt</SelectItem> <SelectItem value="delivered">Livré</SelectItem> <SelectItem value="cancelled">Annulé</SelectItem> </SelectContent> </Select> </div> </div> {/* Liste des commandes */} <ScrollArea className="h-[600px]"> <div className="space-y-4"> {filteredOrders.map((order) => ( <Card ={order.id} className="p-4"> <div className="flex items-start justify-between"> <div className="space-y-2"> <div className="flex items-center gap-2"> <h3 className="font-semibold">{order.orderNumber}</h3> <Badge className={getStatusColor(order.status)}> {getStatusIcon(order.status)} <span className="ml-1 capitalize">{order.status}</span> </Badge> </div> <div className="text-sm text-gray-600"> <div className="flex items-center gap-4"> <span className="font-medium">{order.customerName}</span> <span className="flex items-center gap-1"> <Mail className="h-3 w-3" /> {order.customerEmail} </span> <span className="flex items-center gap-1"> <Phone className="h-3 w-3" /> {order.customerPhone} </span> </div> {order.deliveryAddress && ( <div className="flex items-center gap-1 mt-1"> <MapPin className="h-3 w-3" /> {order.deliveryAddress} </div> )} </div> <div className="text-sm"> <strong>Articles:</strong> {order.items.map((item, index) => ( <span ={item.id}> {index > 0 && ', '} {item.quantity}x {item.name} </span> ))} </div> <div className="text-sm font-medium"> Total: {order.total.toFixed(2)}€ </div> </div> <div className="flex flex-col gap-2"> <Select value={order.status} onValueChange={(value) => updateOrderStatus(order.id, value as Order['status'])} > <SelectTrigger className="w-32"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="pending">En attente</SelectItem> <SelectItem value="confirmed">Confirmé</SelectItem> <SelectItem value="preparing">En préparation</SelectItem> <SelectItem value="ready">Prêt</SelectItem> <SelectItem value="delivered">Livré</SelectItem> <SelectItem value="cancelled">Annulé</SelectItem> </SelectContent> </Select> {order.estimatedDelivery && ( <div className="text-xs text-gray-500"> Livraison estimée: <br /> {new Date(order.estimatedDelivery).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })} </div> )} </div> </div> </Card> ))} {filteredOrders.length === 0 && ( <div className="text-center py-8 text-gray-500"> Aucune commande trouvée </div> )} </div> </ScrollArea> </TabsContent> <TabsContent value="history"> <div className="text-center py-8 text-gray-500"> Historique des commandes (à implémenter) </div> </TabsContent> <TabsContent value="analytics"> <div className="text-center py-8 text-gray-500"> Analytiques des commandes (à implémenter) </div> </TabsContent> </Tabs> </CardContent> </Card> </div> );
}

export default OrderTracking;