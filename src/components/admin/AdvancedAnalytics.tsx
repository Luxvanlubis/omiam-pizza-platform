"use client";

import { useState, useEffect, useMemo } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { BarChart3, TrendingUp, TrendingDown, Users, ShoppingCart, DollarSign, Clock, Pizza, Star, Calendar, Download, Target, Zap, Award, AlertTriangle, Brain, Activity, Eye, Settings, Bell, MapPin, Smartphone, Globe, CreditCard, Package, Truck, MessageSquare, ThumbsUp, ThumbsDown, Lightbulb, PieChart, LineChart, BarChart, Gauge
} from "lucide-react";
import { cn } from "@/lib/utils";
import { useI18n } from "@/hooks/useI18n";
import { useLocalizedFormat } from "@/hooks/useLocalizedFormat";

// Types avancés pour les analytics
interface AdvancedMetric { id: string; label: string; value: number; previousValue: number; change: number; changeType: 'increase' | 'decrease' | 'neutral'; period: string; target?: number; unit: 'currency' | 'number' | 'percentage' | 'time'; category: 'revenue' | 'orders' | 'customers' | 'operations'; priority: 'high' | 'medium' | 'low'; trend: number[]; forecast?: number; confidence?: number;
}

interface RealTimeData { timestamp: Date; activeUsers: number; ordersInProgress: number; revenue: number; conversionRate: number; averageOrderValue: number; deliveryTime: number;
}

interface PredictionData { metric: string; currentValue: number; predictedValue: number; confidence: number; factors: string[]; recommendation: string; impact: 'positive' | 'negative' | 'neutral';
}

interface CustomerInsight { segment: string; behavior: string; value: number; growth: number; retention: number; satisfaction: number; recommendations: string[];
}

interface Alert { id: string; type: 'warning' | 'error' | 'info' | 'success'; title: string; message: string; timestamp: Date; isRead: boolean; action?: string; priority: 'high' | 'medium' | 'low';
}

interface GeographicData { region: string; orders: number; revenue: number; growth: number; marketShare: number; avgDeliveryTime: number;
}

interface ChannelPerformance { channel: string; orders: number; revenue: number; conversion: number; cost: number; roi: number; trend: number;
}

// Données simulées avancées
const advancedMetrics: AdvancedMetric[] = [ { id: 'revenue', label: 'Chiffre d\'affaires', value: 45680, previousValue: 38920, change: 17.4, changeType: 'increase', period: 'vs mois dernier', target: 50000, unit: 'currency', category: 'revenue', priority: 'high', trend: [32000, 35000, 38920, 42000, 45680], forecast: 48500, confidence: 85 }, { id: 'orders', label: 'Commandes totales', value: 2847, previousValue: 2456, change: 15.9, changeType: 'increase', period: 'vs mois dernier', target: 3000, unit: 'number', category: 'orders', priority: 'high', trend: [2100, 2300, 2456, 2650, 2847], forecast: 2950, confidence: 78 }, { id: 'aov', label: 'Panier moyen', value: 16.04, previousValue: 15.85, change: 1.2, changeType: 'increase', period: 'vs mois dernier', target: 18.00, unit: 'currency', category: 'revenue', priority: 'medium', trend: [15.2, 15.4, 15.85, 15.9, 16.04], forecast: 16.8, confidence: 72 }, { id: 'conversion', label: 'Taux de conversion', value: 4.8, previousValue: 4.2, change: 14.3, changeType: 'increase', period: 'vs mois dernier', target: 5.5, unit: 'percentage', category: 'customers', priority: 'high', trend: [3.8, 4.0, 4.2, 4.5, 4.8], forecast: 5.1, confidence: 81 }, { id: 'delivery_time', label: 'Temps de livraison moyen', value: 28, previousValue: 32, change: -12.5, changeType: 'increase', period: 'vs mois dernier', target: 25, unit: 'time', category: 'operations', priority: 'high', trend: [35, 33, 32, 30, 28], forecast: 26, confidence: 88 }, { id: 'customer_satisfaction', label: 'Satisfaction client', value: 4.7, previousValue: 4.5, change: 4.4, changeType: 'increase', period: 'vs mois dernier', target: 4.8, unit: 'number', category: 'customers', priority: 'medium', trend: [4.2, 4.3, 4.5, 4.6, 4.7], forecast: 4.8, confidence: 75 }
];

const realTimeData: RealTimeData = { timestamp: new Date(), activeUsers: 127, ordersInProgress: 23, revenue: 1847.50, conversionRate: 5.2, averageOrderValue: 17.80, deliveryTime: 26
};

const predictions: PredictionData[] = [ { metric: 'Revenus hebdomadaires', currentValue: 11420, predictedValue: 13250, confidence: 82, factors: ['Météo favorable', 'Promotion weekend', 'Nouveau produit'], recommendation: 'Augmenter le stock de 15% pour répondre à la demande', impact: 'positive' }, { metric: 'Taux d\'abandon panier', currentValue: 23.5, predictedValue: 19.2, confidence: 76, factors: ['Optimisation checkout', 'Réduction frais livraison'], recommendation: 'Implémenter le checkout express', impact: 'positive' }, { metric: 'Coût acquisition client', currentValue: 8.50, predictedValue: 12.30, confidence: 71, factors: ['Concurrence accrue', 'Hausse coûts publicitaires'], recommendation: 'Diversifier les canaux d\'acquisition', impact: 'negative' }
];

const customerInsights: CustomerInsight[] = [ { segment: 'Clients VIP', behavior: 'Commandes fréquentes, panier élevé', value: 156.80, growth: 23.5, retention: 94, satisfaction: 4.9, recommendations: ['Programme de fidélité exclusif', 'Livraison prioritaire'] }, { segment: 'Familles', behavior: 'Commandes weekend, produits familiaux', value: 89.40, growth: 18.2, retention: 67, satisfaction: 4.6, recommendations: ['Menus famille', 'Promotions weekend'] }, { segment: 'Étudiants', behavior: 'Prix sensibles, commandes tardives', value: 34.20, growth: 31.8, retention: 45, satisfaction: 4.3, recommendations: ['Offres étudiantes', 'Livraison nocturne'] }
];

const alerts: Alert[] = [ { id: '1', type: 'warning', title: 'Stock faible détecté', message: 'Margherita Royale - Stock restant: 12 unités', timestamp: new Date(Date.now() - 15 * 60 * 1000), isRead: false, action: 'Réapprovisionner', priority: 'high' }, { id: '2', type: 'info', title: 'Pic de commandes', message: 'Augmentation de 45% des commandes dans la dernière heure', timestamp: new Date(Date.now() - 30 * 60 * 1000), isRead: false, priority: 'medium' }, { id: '3', type: 'success', title: 'Objectif atteint', message: 'Objectif de satisfaction client (4.7/5) dépassé!', timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), isRead: true, priority: 'low' }
];

const geographicData: GeographicData[] = [ { region: 'Centre-ville', orders: 1247, revenue: 18450, growth: 15.2, marketShare: 35, avgDeliveryTime: 22 }, { region: 'Quartier Nord', orders: 892, revenue: 13680, growth: 8.7, marketShare: 28, avgDeliveryTime: 31 }, { region: 'Zone Sud', orders: 634, revenue: 9870, growth: 22.1, marketShare: 18, avgDeliveryTime: 35 }
];

const channelPerformance: ChannelPerformance[] = [ { channel: 'Application mobile', orders: 1456, revenue: 23480, conversion: 6.8, cost: 2340, roi: 903, trend: 18.5 }, { channel: 'Site web', orders: 987, revenue: 15670, conversion: 4.2, cost: 1890, roi: 729, trend: 12.3 }, { channel: 'Téléphone', orders: 234, revenue: 4280, conversion: 8.9, cost: 450, roi: 851, trend: -5.2 }
];

export function AdvancedAnalytics() { const { t } = useI18n(); const { formatCurrency, formatNumber, formatDate } = useLocalizedFormat(); const [selectedPeriod, setSelectedPeriod] = useState("30d"); const [selectedCategory, setSelectedCategory] = useState("all"); const [isRealTimeEnabled, setIsRealTimeEnabled] = useState(true); const [selectedMetrics, setSelectedMetrics] = useState<string[]>(['revenue', 'orders', 'conversion']); const [isLoading, setIsLoading] = useState(false); const [alertsFilter, setAlertsFilter] = useState<'all' | 'unread' | 'high'>('unread'); const [dashboardLayout, setDashboardLayout] = useState<'grid' | 'list'>('grid'); const [autoRefresh, setAutoRefresh] = useState(true); const [refreshInterval, setRefreshInterval] = useState(30); // Filtrage des métriques par catégorie const filteredMetrics = useMemo(() => { if (selectedCategory === 'all') return advancedMetrics; return advancedMetrics.filter(metric => metric.category === selectedCategory); }, [selectedCategory]); // Filtrage des alertes const filteredAlerts = useMemo(() => { switch (alertsFilter) { case 'unread': return alerts.filter(alert => !alert.isRead); case 'high': return alerts.filter(alert => alert.priority === 'high'); default: return alerts; } }, [alertsFilter]); // Auto-refresh des données useEffect(() => { if (!autoRefresh) return; const interval = setInterval(() => { if (isRealTimeEnabled) { // Simuler la mise à jour des données en temps réel console.log('Refreshing real-time data...'); } }, refreshInterval * 1000); return () => clearInterval(interval); }, [autoRefresh, refreshInterval, isRealTimeEnabled]); const handleRefresh = async () => { setIsLoading(true); // Simuler un appel API await new Promise(resolve => setTimeout(resolve, 1500)); setIsLoading(false); }; const handleExport = (format: 'csv' | 'pdf' | 'excel') => { console.log(`Exporting advanced analytics as ${format}`); // Implémenter la logique d'export }; const toggleMetric = (metricId: string) => { setSelectedMetrics(prev => prev.includes(metricId) ? prev.filter(id => id !== metricId) : [...prev, metricId] ); }; const getMetricIcon = (category: string) => { switch (category) { case 'revenue': return DollarSign; case 'orders': return ShoppingCart; case 'customers': return Users; case 'operations': return Clock; default: return BarChart3; } }; const formatMetricValue = (metric: AdvancedMetric) => { switch (metric.unit) { case 'currency': return formatCurrency(metric.value); case 'percentage': return `${metric.value}%`; case 'time': return `${metric.value} min`; default: return formatNumber(metric.value); } }; const MetricCard = ({ metric, isSelected }: { metric: AdvancedMetric; isSelected: boolean }) => { const Icon = getMetricIcon(metric.category); const progress = metric.target ? (metric.value / metric.target) * 100 : 0; return ( <Card className={cn( "hover:shadow-lg transition-all duration-200 cursor-pointer", isSelected && "ring-2 ring-red-500" )} onClick={() => toggleMetric(metric.id)} > <CardContent className="p-6"> <div className="flex items-center justify-between mb-4"> <div className="space-y-1"> <p className="text-sm font-medium text-muted-foreground">{metric.label}</p> <p className="text-2xl font-bold text-red-600"> {formatMetricValue(metric)} </p> </div> <div className="p-3 bg-red-100 dark:bg-red-900/20 rounded-full"> <Icon className="h-6 w-6 text-red-600" /> </div> </div> <div className="space-y-3"> <div className="flex items-center gap-2"> <div className={cn( "flex items-center gap-1 text-sm font-medium", metric.changeType === 'increase' ? "text-green-600" : "text-red-600" )}> {metric.changeType === 'increase' ? ( <TrendingUp className="h-4 w-4" /> ) : ( <TrendingDown className="h-4 w-4" /> )} {Math.abs(metric.change)}% </div> <span className="text-sm text-muted-foreground">{metric.period}</span> </div> {metric.target && ( <div className="space-y-1"> <div className="flex justify-between text-xs"> <span>Objectif: {formatMetricValue({...metric, value: metric.target})}</span> <span>{Math.round(progress)}%</span> </div> <Progress value={progress} className="h-2" /> </div> )} {metric.forecast && ( <div className="flex items-center gap-2 text-xs text-muted-foreground"> <Brain className="h-3 w-3" /> <span>Prévision: {formatMetricValue({...metric, value: metric.forecast})}</span> <Badge variant="outline" className="text-xs"> {metric.confidence}% confiance </Badge> </div> )} </div> </CardContent> </Card> ); }; const RealTimeWidget = () => ( <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Activity className="h-5 w-5 text-green-500" /> Données en temps réel <Badge variant="outline" className="ml-auto"> <div className="w-2 h-2 bg-green-500 rounded-full mr-1 animate-pulse" /> Live </Badge> </CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-2 md:grid-cols-3 gap-4"> <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg"> <Eye className="h-5 w-5 text-blue-600 mx-auto mb-1" /> <p className="text-2xl font-bold text-blue-600">{realTimeData.activeUsers}</p> <p className="text-xs text-muted-foreground">Utilisateurs actifs</p> </div> <div className="text-center p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg"> <Clock className="h-5 w-5 text-orange-600 mx-auto mb-1" /> <p className="text-2xl font-bold text-orange-600">{realTimeData.ordersInProgress}</p> <p className="text-xs text-muted-foreground">Commandes en cours</p> </div> <div className="text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg"> <DollarSign className="h-5 w-5 text-green-600 mx-auto mb-1" /> <p className="text-2xl font-bold text-green-600">{formatCurrency(realTimeData.revenue)}</p> <p className="text-xs text-muted-foreground">CA aujourd'hui</p> </div> </div> </CardContent> </Card> ); const PredictionsWidget = () => ( <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Brain className="h-5 w-5 text-purple-600" /> Prédictions IA </CardTitle> <CardDescription> Analyses prédictives basées sur l'IA et le machine learning </CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> {predictions.map((prediction, index) => ( <div ={index} className="p-4 border rounded-lg space-y-2"> <div className="flex items-center justify-between"> <h4 className="font-semibold">{prediction.metric}</h4> <Badge variant={prediction.impact === 'positive' ? 'default' : prediction.impact === 'negative' ? 'destructive' : 'secondary'} > {prediction.confidence}% confiance </Badge> </div> <div className="flex items-center gap-4 text-sm"> <span>Actuel: <strong>{formatNumber(prediction.currentValue)}</strong></span> <span>Prévu: <strong>{formatNumber(prediction.predictedValue)}</strong></span> <div className={cn( "flex items-center gap-1", prediction.impact === 'positive' ? "text-green-600" : prediction.impact === 'negative' ? "text-red-600" : "text-gray-600" )}> {prediction.impact === 'positive' ? <TrendingUp className="h-3 w-3" /> : prediction.impact === 'negative' ? <TrendingDown className="h-3 w-3" /> : null} {Math.abs(((prediction.predictedValue - prediction.currentValue) / prediction.currentValue) * 100).toFixed(1)}% </div> </div> <p className="text-sm text-muted-foreground">{prediction.recommendation}</p> <div className="flex flex-wrap gap-1"> {prediction.factors.map((factor, i) => ( <Badge ={i} variant="outline" className="text-xs">{factor}</Badge> ))} </div> </div> ))} </div> </CardContent> </Card> ); const AlertsWidget = () => ( <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Bell className="h-5 w-5 text-yellow-600" /> Alertes système {filteredAlerts.filter(a => !a.isRead).length > 0 && ( <Badge variant="destructive" className="ml-auto"> {filteredAlerts.filter(a => !a.isRead).length} </Badge> )} </CardTitle> <div className="flex gap-2"> <Button variant={alertsFilter === 'all' ? 'default' : 'outline'} size="sm" onClick={() => setAlertsFilter('all')} > Toutes </Button> <Button variant={alertsFilter === 'unread' ? 'default' : 'outline'} size="sm" onClick={() => setAlertsFilter('unread')} > Non lues </Button> <Button variant={alertsFilter === 'high' ? 'default' : 'outline'} size="sm" onClick={() => setAlertsFilter('high')} > Priorité haute </Button> </div> </CardHeader> <CardContent> <div className="space-y-3"> {filteredAlerts.map((alert) => ( <Alert ={alert.id} className={cn( "transition-all duration-200", !alert.isRead && "border-l-4 border-l-red-500" )}> <div className="flex items-start gap-3"> {alert.type === 'warning' && <AlertTriangle className="h-4 w-4 text-yellow-600 mt-0.5" />} {alert.type === 'error' && <AlertTriangle className="h-4 w-4 text-red-600 mt-0.5" />} {alert.type === 'info' && <Bell className="h-4 w-4 text-blue-600 mt-0.5" />} {alert.type === 'success' && <ThumbsUp className="h-4 w-4 text-green-600 mt-0.5" />} <div className="flex-1"> <div className="flex items-center justify-between"> <h5 className="font-semibold text-sm">{alert.title}</h5> <span className="text-xs text-muted-foreground"> {formatDate(alert.timestamp, { timeStyle: 'short' })} </span> </div> <AlertDescription className="text-sm mt-1"> {alert.message} </AlertDescription> {alert.action && ( <Button variant="outline" size="sm" className="mt-2"> {alert.action} </Button> )} </div> </div> </Alert> ))} </div> </CardContent> </Card> ); return ( <div className="space-y-6" data-id="advanced-analytics"> {/* Header avec contrôles avancés */} <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4"> <div> <h2 className="text-3xl font-bold text-red-800 dark:text-red-600">Analytics Avancées</h2> <p className="text-muted-foreground">Tableaux de bord intelligents avec IA prédictive</p> </div> <div className="flex flex-wrap items-center gap-3"> <Select value={selectedPeriod} onValueChange={setSelectedPeriod}> <SelectTrigger className="w-32"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="24h">24 heures</SelectItem> <SelectItem value="7d">7 jours</SelectItem> <SelectItem value="30d">30 jours</SelectItem> <SelectItem value="90d">90 jours</SelectItem> <SelectItem value="1y">1 an</SelectItem> </SelectContent> </Select> <Select value={selectedCategory} onValueChange={setSelectedCategory}> <SelectTrigger className="w-40"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="all">Toutes catégories</SelectItem> <SelectItem value="revenue">Revenus</SelectItem> <SelectItem value="orders">Commandes</SelectItem> <SelectItem value="customers">Clients</SelectItem> <SelectItem value="operations">Opérations</SelectItem> </SelectContent> </Select> <div className="flex items-center gap-2"> <Switch checked={isRealTimeEnabled} onCheckedChange={setIsRealTimeEnabled} id="realtime" /> <Label htmlFor="realtime" className="text-sm">Temps réel</Label> </div> <Button variant="outline" onClick={handleRefresh} disabled={isLoading} > <Activity className={cn("h-4 w-4 mr-2", isLoading && "animate-spin")} /> Actualiser </Button> <Dialog> <DialogTrigger asChild> <Button variant="outline"> <Settings className="h-4 w-4 mr-2" /> Paramètres </Button> </DialogTrigger> <DialogContent> <DialogHeader> <DialogTitle>Paramètres du tableau de bord</DialogTitle> <DialogDescription> Personnalisez votre expérience d'analyse </DialogDescription> </DialogHeader> <div className="space-y-4"> <div className="flex items-center justify-between"> <Label htmlFor="auto-refresh">Actualisation automatique</Label> <Switch id="auto-refresh" checked={autoRefresh} onCheckedChange={setAutoRefresh} /> </div> <div className="space-y-2"> <Label htmlFor="refresh-interval">Intervalle (secondes)</Label> <Input id="refresh-interval" type="number" value={refreshInterval} onChange={(e) => setRefreshInterval(Number(e.target.value))} min="10" max="300" /> </div> <div className="flex items-center justify-between"> <Label htmlFor="layout">Disposition</Label> <Select value={dashboardLayout} onValueChange={(value: 'grid' | 'list') => setDashboardLayout(value)}> <SelectTrigger className="w-32"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="grid">Grille</SelectItem> <SelectItem value="list">Liste</SelectItem> </SelectContent> </Select> </div> </div> </DialogContent> </Dialog> <div className="flex items-center gap-1"> <Button variant="outline" size="sm" onClick={() => handleExport('csv')}> <Download className="h-4 w-4 mr-1" /> CSV </Button> <Button variant="outline" size="sm" onClick={() => handleExport('excel')}> <Download className="h-4 w-4 mr-1" /> Excel </Button> <Button variant="outline" size="sm" onClick={() => handleExport('pdf')}> <Download className="h-4 w-4 mr-1" /> PDF </Button> </div> </div> </div> {/* Widgets temps réel et alertes */} {isRealTimeEnabled && ( <div className="grid lg:grid-cols-3 gap-6"> <div className="lg:col-span-2"> <RealTimeWidget /> </div> <AlertsWidget /> </div> )} {/* Métriques principales */} <div className={cn( "grid gap-6", dashboardLayout === 'grid' ? "md:grid-cols-2 lg:grid-cols-3" : "grid-cols-1" )}> {filteredMetrics.map((metric) => ( <MetricCard ={metric.id} metric={metric} isSelected={selectedMetrics.includes(metric.id)} /> ))} </div> <Tabs defaultValue="predictions" className="space-y-6"> <TabsList className="grid w-full grid-cols-6"> <TabsTrigger value="predictions">Prédictions IA</TabsTrigger> <TabsTrigger value="insights">Insights clients</TabsTrigger> <TabsTrigger value="geographic">Géographique</TabsTrigger> <TabsTrigger value="channels">Canaux</TabsTrigger> <TabsTrigger value="trends">Tendances</TabsTrigger> <TabsTrigger value="reports">Rapports</TabsTrigger> </TabsList> <TabsContent value="predictions" className="space-y-6"> <PredictionsWidget /> </TabsContent> <TabsContent value="insights" className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Users className="h-5 w-5 text-blue-600" /> Insights clients avancés </CardTitle> <CardDescription> Analyse comportementale et segmentation intelligente </CardDescription> </CardHeader> <CardContent> <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"> {customerInsights.map((insight, index) => ( <div ={index} className="p-4 border rounded-lg space-y-4"> <div className="flex items-center justify-between"> <h4 className="font-semibold">{insight.segment}</h4> <Badge variant="outline">{formatCurrency(insight.value)} LTV</Badge> </div> <p className="text-sm text-muted-foreground">{insight.behavior}</p> <div className="grid grid-cols-2 gap-3 text-sm"> <div> <p className="text-muted-foreground">Croissance</p> <p className="font-semibold text-green-600">+{insight.growth}%</p> </div> <div> <p className="text-muted-foreground">Rétention</p> <p className="font-semibold">{insight.retention}%</p> </div> <div> <p className="text-muted-foreground">Satisfaction</p> <div className="flex items-center gap-1"> <Star className="h-3 w-3 text-yellow-500" /> <span className="font-semibold">{insight.satisfaction}</span> </div> </div> </div> <div className="space-y-2"> <p className="text-sm font-medium">Recommandations:</p> <div className="space-y-1"> {insight.recommendations.map((rec, i) => ( <div ={i} className="flex items-center gap-2 text-sm"> <Lightbulb className="h-3 w-3 text-yellow-500" /> <span>{rec}</span> </div> ))} </div> </div> </div> ))} </div> </CardContent> </Card> </TabsContent> <TabsContent value="geographic" className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <MapPin className="h-5 w-5 text-green-600" /> Performance géographique </CardTitle> <CardDescription> Analyse des ventes par zone géographique </CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> {geographicData.map((region, index) => ( <div ={index} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"> <div className="flex items-center gap-4"> <div className="w-12 h-12 bg-green-100 dark:bg-green-900/20 rounded-lg flex items-center justify-center"> <MapPin className="h-6 w-6 text-green-600" /> </div> <div> <h4 className="font-semibold">{region.region}</h4> <p className="text-sm text-muted-foreground"> Part de marché: {region.marketShare}% </p> </div> </div> <div className="flex items-center gap-6 text-right"> <div> <p className="text-sm text-muted-foreground">Commandes</p> <p className="font-semibold">{formatNumber(region.orders)}</p> </div> <div> <p className="text-sm text-muted-foreground">Revenus</p> <p className="font-semibold text-green-600">{formatCurrency(region.revenue)}</p> </div> <div> <p className="text-sm text-muted-foreground">Croissance</p> <div className="flex items-center gap-1"> <TrendingUp className="h-3 w-3 text-green-600" /> <span className="font-semibold text-green-600">+{region.growth}%</span> </div> </div> <div> <p className="text-sm text-muted-foreground">Livraison</p> <p className="font-semibold">{region.avgDeliveryTime} min</p> </div> </div> </div> ))} </div> </CardContent> </Card> </TabsContent> <TabsContent value="channels" className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Smartphone className="h-5 w-5 text-purple-600" /> Performance des canaux </CardTitle> <CardDescription> Analyse comparative des canaux de vente </CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> {channelPerformance.map((channel, index) => ( <div ={index} className="p-4 border rounded-lg space-y-3"> <div className="flex items-center justify-between"> <div className="flex items-center gap-3"> {channel.channel.includes('mobile') && <Smartphone className="h-5 w-5 text-purple-600" />} {channel.channel.includes('web') && <Globe className="h-5 w-5 text-blue-600" />} {channel.channel.includes('Téléphone') && <MessageSquare className="h-5 w-5 text-green-600" />} <h4 className="font-semibold">{channel.channel}</h4> </div> <div className={cn( "flex items-center gap-1 text-sm font-medium", channel.trend > 0 ? "text-green-600" : "text-red-600" )}> {channel.trend > 0 ? <TrendingUp className="h-3 w-3" /> : <TrendingDown className="h-3 w-3" />} {Math.abs(channel.trend)}% </div> </div> <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-sm"> <div> <p className="text-muted-foreground">Commandes</p> <p className="font-semibold">{formatNumber(channel.orders)}</p> </div> <div> <p className="text-muted-foreground">Revenus</p> <p className="font-semibold text-green-600">{formatCurrency(channel.revenue)}</p> </div> <div> <p className="text-muted-foreground">Conversion</p> <p className="font-semibold">{channel.conversion}%</p> </div> <div> <p className="text-muted-foreground">Coût</p> <p className="font-semibold">{formatCurrency(channel.cost)}</p> </div> <div> <p className="text-muted-foreground">ROI</p> <p className="font-semibold text-blue-600">{channel.roi}%</p> </div> </div> </div> ))} </div> </CardContent> </Card> </TabsContent> <TabsContent value="trends" className="space-y-6"> <div className="grid md:grid-cols-2 gap-6"> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <TrendingUp className="h-5 w-5 text-green-600" /> Tendances positives </CardTitle> </CardHeader> <CardContent className="space-y-3"> <div className="flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg"> <div className="flex items-center gap-2"> <Smartphone className="h-4 w-4 text-green-600" /> <span className="text-sm">Commandes mobiles</span> </div> <Badge variant="secondary">+23%</Badge> </div> <div className="flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg"> <div className="flex items-center gap-2"> <Users className="h-4 w-4 text-green-600" /> <span className="text-sm">Clients fidèles</span> </div> <Badge variant="secondary">+15%</Badge> </div> <div className="flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg"> <div className="flex items-center gap-2"> <Star className="h-4 w-4 text-green-600" /> <span className="text-sm">Satisfaction client</span> </div> <Badge variant="secondary">+8%</Badge> </div> <div className="flex items-center justify-between p-3 bg-green-50 dark:bg-green-900/20 rounded-lg"> <div className="flex items-center gap-2"> <Clock className="h-4 w-4 text-green-600" /> <span className="text-sm">Temps de livraison</span> </div> <Badge variant="secondary">-12%</Badge> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <AlertTriangle className="h-5 w-5 text-yellow-600" /> Points d'attention </CardTitle> </CardHeader> <CardContent className="space-y-3"> <div className="flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg"> <div className="flex items-center gap-2"> <ShoppingCart className="h-4 w-4 text-yellow-600" /> <span className="text-sm">Taux d'abandon panier</span> </div> <Badge variant="outline">+3%</Badge> </div> <div className="flex items-center justify-between p-3 bg-red-50 dark:bg-red-900/20 rounded-lg"> <div className="flex items-center gap-2"> <DollarSign className="h-4 w-4 text-red-600" /> <span className="text-sm">Coût acquisition</span> </div> <Badge variant="destructive">+12%</Badge> </div> <div className="flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg"> <div className="flex items-center gap-2"> <Package className="h-4 w-4 text-yellow-600" /> <span className="text-sm">Ruptures de stock</span> </div> <Badge variant="outline">+5%</Badge> </div> <div className="flex items-center justify-between p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg"> <div className="flex items-center gap-2"> <ThumbsDown className="h-4 w-4 text-yellow-600" /> <span className="text-sm">Réclamations</span> </div> <Badge variant="outline">+2%</Badge> </div> </CardContent> </Card> </div> </TabsContent> <TabsContent value="reports" className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <BarChart3 className="h-5 w-5 text-indigo-600" /> Rapports personnalisés </CardTitle> <CardDescription> Générez des rapports détaillés selon vos besoins </CardDescription> </CardHeader> <CardContent> <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4"> <Button variant="outline" className="h-24 flex-col gap-2"> <PieChart className="h-6 w-6" /> <span>Rapport de ventes</span> </Button> <Button variant="outline" className="h-24 flex-col gap-2"> <LineChart className="h-6 w-6" /> <span>Analyse de tendances</span> </Button> <Button variant="outline" className="h-24 flex-col gap-2"> <Users className="h-6 w-6" /> <span>Rapport clients</span> </Button> <Button variant="outline" className="h-24 flex-col gap-2"> <Package className="h-6 w-6" /> <span>Inventaire</span> </Button> <Button variant="outline" className="h-24 flex-col gap-2"> <Truck className="h-6 w-6" /> <span>Livraisons</span> </Button> <Button variant="outline" className="h-24 flex-col gap-2"> <Gauge className="h-6 w-6" /> <span>Performance</span> </Button> </div> </CardContent> </Card> </TabsContent> </Tabs> </div> );
}