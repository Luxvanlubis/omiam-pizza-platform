'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Download, Trash2, Edit, Eye, Shield, AlertTriangle, CheckCircle, Mail, User, FileText
} from 'lucide-react';
import { toast } from 'sonner';

type RequestType = 'access' | 'rectification' | 'erasure' | 'portability' | 'opposition' | 'limitation';

interface GDPRRequest { type: RequestType; email: string; firstName: string; lastName: string; phone?: string; description: string; identityDocument?: File;
}

const requestTypes = { access: { title: 'Droit d\'accès', description: 'Obtenir une copie de toutes vos données personnelles', icon: Eye, color: 'blue' }, rectification: { title: 'Droit de rectification', description: 'Corriger des données inexactes ou incomplètes', icon: Edit, color: 'green' }, erasure: { title: 'Droit d\'effacement', description: 'Demander la suppression de vos données personnelles', icon: Trash2, color: 'red' }, portability: { title: 'Droit à la portabilité', description: 'Récupérer vos données dans un format structuré', icon: Download, color: 'purple' }, opposition: { title: 'Droit d\'opposition', description: 'Vous opposer au traitement de vos données', icon: Shield, color: 'orange' }, limitation: { title: 'Droit de limitation', description: 'Limiter le traitement de vos données', icon: AlertTriangle, color: 'yellow' }
};

export default function UserRightsManager() { const [selectedRequest, setSelectedRequest] = useState<RequestType | null>(null); const [formData, setFormData] = useState<Partial<GDPRRequest>>({}); const [isSubmitting, setIsSubmitting] = useState(false); const [submitted, setSubmitted] = useState(false); const [acceptedTerms, setAcceptedTerms] = useState(false); const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); if (!selectedRequest || !acceptedTerms) { toast.error('Veuillez sélectionner un type de demande et accepter les conditions'); return; } setIsSubmitting(true); try { // Simulation d'envoi de la demande RGPD const requestData = { ...formData, type: selectedRequest, timestamp: new Date().toISOString(), requestId: `GDPR-${Date.now()}` }; // Dans un vrai projet, ceci serait un appel API await new Promise(resolve => setTimeout(resolve, 2000)); console.log('Demande RGPD soumise:', requestData); setSubmitted(true); toast.success('Votre demande a été envoyée avec succès'); } catch (error) { toast.error('Erreur lors de l\'envoi de la demande'); } finally { setIsSubmitting(false); } }; const resetForm = () => { setSelectedRequest(null); setFormData({}); setSubmitted(false); setAcceptedTerms(false); }; if (submitted) { return ( <div className="max-w-2xl mx-auto p-6"> <Card> <CardHeader className="text-center"> <div className="mx-auto w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4"> <CheckCircle className="h-8 w-8 text-green-600" /> </div> <CardTitle className="text-green-800">Demande envoyée avec succès</CardTitle> <CardDescription> Votre demande d'exercice de droits RGPD a été transmise à notre équipe </CardDescription> </CardHeader> <CardContent className="space-y-4"> <Alert> <Mail className="h-4 w-4" /> <AlertDescription> Vous recevrez un accusé de réception par email dans les prochaines minutes. Nous traiterons votre demande dans un délai maximum d'un mois. </AlertDescription> </Alert> <div className="bg-blue-50 p-4 rounded-lg"> <h4 className="font-semibold text-blue-900 mb-2">Prochaines étapes :</h4> <ul className="text-blue-700 space-y-1 text-sm"> <li>• Vérification de votre identité (si nécessaire)</li> <li>• Traitement de votre demande par notre DPO</li> <li>• Réponse dans un délai d'un mois maximum</li> <li>• Suivi par email de l'avancement</li> </ul> </div> <div className="flex gap-3"> <Button onClick={resetForm} variant="outline" className="flex-1"> Nouvelle demande </Button> <Button asChild className="flex-1"> <a href="/politique-confidentialite">Politique de confidentialité</a> </Button> </div> </CardContent> </Card> </div> ); } return ( <div className="max-w-4xl mx-auto p-6 space-y-8"> <div className="text-center mb-8"> <div className="flex items-center justify-center gap-3 mb-4"> <Shield className="h-8 w-8 text-blue-600" /> <h1 className="text-3xl font-bold text-gray-900">Exercer vos droits RGPD</h1> </div> <p className="text-gray-600 max-w-2xl mx-auto"> Conformément au RGPD, vous disposez de plusieurs droits concernant vos données personnelles. Sélectionnez le type de demande qui correspond à votre besoin. </p> </div> {!selectedRequest ? ( <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4"> {Object.entries(requestTypes).map(([, request]) => { const Icon = request.icon; return ( <Card ={} className="cursor-pointer hover:shadow-lg transition-shadow border-2 hover:border-blue-200" onClick={() => setSelectedRequest( as RequestType)} > <CardHeader className="text-center pb-2"> <div className={`mx-auto w-12 h-12 bg-${request.color}-100 rounded-full flex items-center justify-center mb-3`}> <Icon className={`h-6 w-6 text-${request.color}-600`} /> </div> <CardTitle className="text-lg">{request.title}</CardTitle> </CardHeader> <CardContent> <p className="text-sm text-gray-600 text-center"> {request.description} </p> </CardContent> </Card> ); })} </div> ) : ( <Card> <CardHeader> <div className="flex items-center gap-3"> <Button variant="ghost" size="sm" onClick={() => setSelectedRequest(null)} > ← Retour </Button> <div> <CardTitle className="flex items-center gap-2"> {React.createElement(requestTypes[selectedRequest].icon, { className: 'h-5 w-5' })} {requestTypes[selectedRequest].title} </CardTitle> <CardDescription> {requestTypes[selectedRequest].description} </CardDescription> </div> </div> </CardHeader> <CardContent> <form onSubmit={handleSubmit} className="space-y-6"> <div className="grid md:grid-cols-2 gap-4"> <div className="space-y-2"> <Label htmlFor="firstName">Prénom *</Label> <Input id="firstName" required value={formData.firstName''} onChange={(e) => setFormData(prev => ({ ...prev, firstName: e.target.value }))} placeholder="Votre prénom" /> </div> <div className="space-y-2"> <Label htmlFor="lastName">Nom *</Label> <Input id="lastName" required value={formData.lastName''} onChange={(e) => setFormData(prev => ({ ...prev, lastName: e.target.value }))} placeholder="Votre nom" /> </div> </div> <div className="grid md:grid-cols-2 gap-4"> <div className="space-y-2"> <Label htmlFor="email">Email *</Label> <Input id="email" type="email" required value={formData.email''} onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))} placeholder="votre.email@exemple.com" /> </div> <div className="space-y-2"> <Label htmlFor="phone">Téléphone</Label> <Input id="phone" type="tel" value={formData.phone''} onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))} placeholder="Votre numéro de téléphone" /> </div> </div> <div className="space-y-2"> <Label htmlFor="description">Description de votre demande *</Label> <Textarea id="description" required rows={4} value={formData.description''} onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))} placeholder="Décrivez précisément votre demande..." /> </div> {selectedRequest === 'erasure' && ( <Alert> <AlertTriangle className="h-4 w-4" /> <AlertDescription> <strong>Attention :</strong> La suppression de vos données est définitive. Certaines données peuvent être conservées pour des obligations légales (comptabilité, traçabilité alimentaire). </AlertDescription> </Alert> )} <div className="bg-gray-50 p-4 rounded-lg"> <h4 className="font-semibold mb-3 flex items-center gap-2"> <FileText className="h-4 w-4" /> Pièce d'identité (optionnel) </h4> <p className="text-sm text-gray-600 mb-3"> Pour accélérer le traitement, vous pouvez joindre une copie de votre pièce d'identité. </p> <Input type="file" accept=".pdf,.jpg,.jpeg,.png" onChange={(e) => { const file = e.target.files?.[0]; if (file) { setFormData(prev => ({ ...prev, identityDocument: file })); } }} /> </div> <div className="flex items-start space-x-2"> <Checkbox id="terms" checked={acceptedTerms} onCheckedChange={(checked) => setAcceptedTerms(checked as boolean)} /> <Label htmlFor="terms" className="text-sm leading-relaxed"> J'accepte que mes données soient traitées dans le cadre de cette demande d'exercice de droits RGPD. Je certifie que les informations fournies sont exactes. </Label> </div> <div className="flex gap-3"> <Button type="button" variant="outline" onClick={() => setSelectedRequest(null)} className="flex-1" > Annuler </Button> <Button type="submit" disabled={isSubmitting || !acceptedTerms} className="flex-1" > {isSubmitting ? 'Envoi en cours...' : 'Envoyer la demande'} </Button> </div> </form> </CardContent> </Card> )} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Mail className="h-5 w-5" /> Besoin d'aide ? </CardTitle> </CardHeader> <CardContent> <div className="grid md:grid-cols-2 gap-4"> <div> <h4 className="font-semibold mb-2">Contact DPO</h4> <p className="text-sm text-gray-600 mb-1">Email : dpo@omiam-guingamp.fr</p> <p className="text-sm text-gray-600">Réponse sous 48h maximum</p> </div> <div> <h4 className="font-semibold mb-2">Délais de traitement</h4> <p className="text-sm text-gray-600 mb-1">Réponse : 1 mois maximum</p> <p className="text-sm text-gray-600">Accusé de réception : 24h</p> </div> </div> </CardContent> </Card> </div> );
}