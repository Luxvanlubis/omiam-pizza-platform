"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { MapPin, Phone, Mail, Globe, Clock, Star, Calendar, Users, Truck, ExternalLink, Award, Heart, ChefHat
} from "lucide-react";

interface Restaurant { id: string; name: string; description: string; address: string; phone: string; email: string; website: string; openingHours: any; deliveryRadius: number; rating: number; totalReviews: number; foundedDate: Date; specialties: string[]; channels: Array<{ name: string; url: string; type: string; }>; media: Array<{ name: string; url: string; type: string; }>; specials: Array<{ name: string; description: string; validUntil: Date; discount: number; }>;
}

export function RestaurantProfile() { const [restaurant, setRestaurant] = useState<Restaurant | null>(null); const [loading, setLoading] = useState(true); const [error, setError] = useState<string | null>(null); useEffect(() => { const fetchRestaurantData = async () => { try { const response = await fetch('/api/restaurant'); if (!response.ok) { throw new Error('Erreur lors du chargement des données'); } const data = await response.json(); setRestaurant(data); } catch (err) { setError(err instanceof Error ? err.message : 'Erreur inconnue'); } finally { setLoading(false); } }; fetchRestaurantData(); }, []); if (loading) { return ( <div className="container mx-auto px-4 py-8"> <div className="animate-pulse space-y-6"> <div className="h-8 bg-gray-200 rounded w-1/3"></div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {[...Array(6)].map((_, i) => ( <div ={i} className="h-48 bg-gray-200 rounded-lg"></div> ))} </div> </div> </div> ); } if (error) { return ( <div className="container mx-auto px-4 py-8"> <Card className="border-red-200 bg-red-50"> <CardContent className="pt-6"> <div className="flex items-center space-x-2 text-red-600"> <Award className="h-5 w-5" /> <span>Erreur: {error}</span> </div> </CardContent> </Card> </div> ); } if (!restaurant) { return ( <div className="container mx-auto px-4 py-8"> <Card> <CardContent className="pt-6"> <p className="text-center text-gray-500">Aucune donnée restaurant trouvée</p> </CardContent> </Card> </div> ); } const formatOpeningHours = (hours: any) => { if (!hours || typeof hours !== 'object') return 'Horaires non disponibles'; const daysMap: { [: string]: string } = { monday: 'Lundi', tuesday: 'Mardi', wednesday: 'Mercredi', thursday: 'Jeudi', friday: 'Vendredi', saturday: 'Samedi', sunday: 'Dimanche' }; return Object.entries(hours) .map(([day, time]) => `${daysMap[day] || day}: ${time'Fermé'}`) .join(', '); }; return ( <div className="container mx-auto px-4 py-8 space-y-8"> {/* En-tête du restaurant */} <div className="text-center space-y-4"> <h1 className="text-4xl font-bold text-red-800 dark:text-red-600"> {restaurant.name} </h1> <p className="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto"> {restaurant.description} </p> <div className="flex items-center justify-center space-x-4"> <div className="flex items-center space-x-1"> <Star className="h-5 w-5 text-yellow-500 fill-current" /> <span className="font-semibold">{restaurant.rating}</span> <span className="text-gray-500">({restaurant.totalReviews} avis)</span> </div> <Badge variant="secondary" className="flex items-center space-x-1"> <Calendar className="h-4 w-4" /> <span>Depuis {new Date(restaurant.foundedDate).getFullYear()}</span> </Badge> </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {/* Informations de contact */} <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <MapPin className="h-5 w-5 text-red-600" /> <span>Contact & Localisation</span> </CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="flex items-start space-x-3"> <MapPin className="h-4 w-4 text-gray-500 mt-1" /> <span className="text-sm">{restaurant.address}</span> </div> <div className="flex items-center space-x-3"> <Phone className="h-4 w-4 text-gray-500" /> <a href={`tel:${restaurant.phone}`} className="text-sm hover:text-red-600"> {restaurant.phone} </a> </div> <div className="flex items-center space-x-3"> <Mail className="h-4 w-4 text-gray-500" /> <a href={`mailto:${restaurant.email}`} className="text-sm hover:text-red-600"> {restaurant.email} </a> </div> {restaurant.website && ( <div className="flex items-center space-x-3"> <Globe className="h-4 w-4 text-gray-500" /> <a href={restaurant.website} target="_blank" rel="noopener noreferrer" className="text-sm hover:text-red-600 flex items-center space-x-1" > <span>Site web</span> <ExternalLink className="h-3 w-3" /> </a> </div> )} </CardContent> </Card> {/* Horaires et service */} <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Clock className="h-5 w-5 text-red-600" /> <span>Horaires & Service</span> </CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="text-sm"> <p className="font-medium mb-2">Horaires d'ouverture:</p> <p className="text-gray-600 leading-relaxed"> {formatOpeningHours(restaurant.openingHours)} </p> </div> <Separator /> <div className="flex items-center space-x-3"> <Truck className="h-4 w-4 text-gray-500" /> <span className="text-sm"> Livraison dans un rayon de {restaurant.deliveryRadius} km </span> </div> </CardContent> </Card> {/* Spécialités */} <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <ChefHat className="h-5 w-5 text-red-600" /> <span>Nos Spécialités</span> </CardTitle> </CardHeader> <CardContent> <div className="flex flex-wrap gap-2"> {restaurant.specialties.map((specialty, index) => ( <Badge ={index} variant="outline" className="text-xs"> {specialty} </Badge> ))} </div> </CardContent> </Card> {/* Canaux de commande */} {restaurant.channels.length > 0 && ( <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Users className="h-5 w-5 text-red-600" /> <span>Commander en ligne</span> </CardTitle> </CardHeader> <CardContent className="space-y-3"> {restaurant.channels.map((channel, index) => ( <Button ={index} variant="outline" className="w-full justify-between" asChild > <a href={channel.url} target="_blank" rel="noopener noreferrer"> <span>{channel.name}</span> <ExternalLink className="h-4 w-4" /> </a> </Button> ))} </CardContent> </Card> )} {/* Réseaux sociaux */} {restaurant.media.length > 0 && ( <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Heart className="h-5 w-5 text-red-600" /> <span>Suivez-nous</span> </CardTitle> </CardHeader> <CardContent className="space-y-3"> {restaurant.media.map((media, index) => ( <Button ={index} variant="ghost" className="w-full justify-between" asChild > <a href={media.url} target="_blank" rel="noopener noreferrer"> <span>{media.name}</span> <ExternalLink className="h-4 w-4" /> </a> </Button> ))} </CardContent> </Card> )} {/* Offres spéciales */} {restaurant.specials.length > 0 && ( <Card className="md:col-span-2 lg:col-span-3"> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Award className="h-5 w-5 text-red-600" /> <span>Offres Spéciales</span> </CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {restaurant.specials.map((special, index) => ( <Card ={index} className="border-orange-200 bg-orange-50 dark:bg-orange-950/20"> <CardHeader className="pb-3"> <CardTitle className="text-lg text-orange-800 dark:text-orange-600"> {special.name} </CardTitle> <Badge className="w-fit bg-orange-600 text-white"> -{special.discount}% </Badge> </CardHeader> <CardContent> <p className="text-sm text-gray-600 dark:text-gray-300 mb-2"> {special.description} </p> <p className="text-xs text-orange-600 font-medium"> Valable jusqu'au {new Date(special.validUntil).toLocaleDaring('fr-FR')} </p> </CardContent> </Card> ))} </div> </CardContent> </Card> )} </div> </div> );
}