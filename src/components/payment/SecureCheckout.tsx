'use client';

import React, { useState, useEffect } from 'react';
import { Elements, CardElement, useStripe, useElements
} from '@stripe/react-stripe-js';
import { getStripe, STRIPE_CONFIG } from '@/lib/stripe';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2, CreditCard, Shield, Lock } from 'lucide-react';
import { useCartStore } from '@/store/cart-store';

// Interface pour les informations client
interface CustomerInfo { email: string; name: string; phone?: string;
}

// Interface pour les informations de livraison
interface DeliveryInfo { address: string; city: string; postalCode: string;
}

// Props du composant de checkout
interface SecureCheckoutProps { customerInfo: CustomerInfo; deliveryInfo?: DeliveryInfo; orderType: 'dine-in' | 'takeaway' | 'delivery'; onSuccess: (paymentIntentId: string) => void; onError: (error: string) => void;
}

// Composant de formulaire de paiement
function CheckoutForm({ customerInfo, deliveryInfo, orderType, onSuccess, onError }: SecureCheckoutProps) { const stripe = useStripe(); const elements = useElements(); const { items, getTotalPrice } = useCartStore(); const [isProcessing, setIsProcessing] = useState(false); const [paymentError, setPaymentError] = useState<string | null>(null); const [client, setClient] = useState<string | null>(null); const [paymentIntentId, setPaymentIntentId] = useState<string | null>(null); // Créer le PaymentIntent au montage du composant useEffect(() => { createPaymentIntent(); }, []); const createPaymentIntent = async () => { try { const response = await fetch('/api/create-payment-intent', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ items: items.map(item => ({ id: item.id, name: item.name, price: item.price, quantity: item.quantity })), customerInfo, deliveryInfo, orderType }) }); const data = await response.json(); if (!response.ok) { throw new Error(data.error'Erreur lors de la création du paiement'); } setClient(data.client); setPaymentIntentId(data.paymentIntentId); } catch (error: any) { setPaymentError(error.message); onError(error.message); } }; const handleSubmit = async (event: React.FormEvent) => { event.preventDefault(); if (!stripe || !elements || !client) { return; } setIsProcessing(true); setPaymentError(null); const cardElement = elements.getElement(CardElement); if (!cardElement) { setPaymentError('Élément de carte non trouvé'); setIsProcessing(false); return; } try { // Confirmer le paiement avec Stripe const { error, paymentIntent } = await stripe.confirmCardPayment(client, { payment_method: { card: cardElement, billing_details: { name: customerInfo.name, email: customerInfo.email, phone: customerInfo.phone, address: deliveryInfo ? { line1: deliveryInfo.address, city: deliveryInfo.city, postal_code: deliveryInfo.postalCode, country: 'FR' } : undefined } } }); if (error) { // Gestion des erreurs spécifiques let errorMessage = 'Erreur de paiement'; switch (error.code) { case 'card_declined': errorMessage = 'Votre carte a été refusée. Veuillez vérifier vos informations ou utiliser une autre carte.'; break; case 'expired_card': errorMessage = 'Votre carte a expiré. Veuillez utiliser une carte valide.'; break; case 'incorrect_cvc': errorMessage = 'Le code de sécurité (CVC) est incorrect.'; break; case 'insufficient_funds': errorMessage = 'Fonds insuffisants sur votre carte.'; break; case 'processing_error': errorMessage = 'Erreur de traitement. Veuillez réessayer.'; break; default: errorMessage = error.message'Erreur de paiement inconnue'; } setPaymentError(errorMessage); onError(errorMessage); } else if (paymentIntent && paymentIntent.status === 'succeeded') { // Paiement réussi onSuccess(paymentIntent.id); } } catch (error: any) { setPaymentError('Erreur inattendue lors du paiement'); onError('Erreur inattendue lors du paiement'); } finally { setIsProcessing(false); } }; // Configuration des styles pour CardElement const cardElementOptions = { style: { base: { fontSize: '16px', color: '#424770', '::placeholder': { color: '#aab7c4', }, fontFamily: 'system-ui, -apple-system, sans-serif', }, invalid: { color: '#9e2146', }, }, hidePostalCode: true, // Code postal géré séparément }; return ( <Card className="w-full max-w-md mx-auto"> <CardHeader> <CardTitle className="flex items-center gap-2"> <CreditCard className="h-5 w-5" /> Paiement sécurisé </CardTitle> <div className="flex items-center gap-2 text-sm text-muted-foreground"> <Shield className="h-4 w-4" /> <span>Protégé par Stripe - Certifié PCI DSS</span> </div> </CardHeader> <CardContent> <form onSubmit={handleSubmit} className="space-y-4"> {/* Résumé de la commande */} <div className="bg-muted p-3 rounded-lg"> <div className="flex justify-between items-center"> <span className="font-medium">Total à payer</span> <span className="text-lg font-bold">{getTotalPrice().toFixed(2)} €</span> </div> <div className="text-sm text-muted-foreground mt-1"> {items.length} article(s) - {orderType === 'dine-in' ? 'Sur place' : orderType === 'takeaway' ? 'À emporter' : 'Livraison'} </div> </div> {/* Champ de carte sécurisé */} <div className="space-y-2"> <label className="text-sm font-medium flex items-center gap-2"> <Lock className="h-4 w-4" /> Informations de carte bancaire </label> <div className="border rounded-md p-3 bg-background"> <CardElement options={cardElementOptions} /> </div> <div className="text-xs text-muted-foreground"> Vos informations de paiement sont chiffrées et sécurisées. Nous ne stockons aucune donnée de carte bancaire. </div> </div> {/* Affichage des erreurs */} {paymentError && ( <Alert variant="destructive"> <AlertDescription>{paymentError}</AlertDescription> </Alert> )} {/* Bouton de paiement */} <Button type="submit" className="w-full" disabled={!stripe || !client || isProcessing} > {isProcessing ? ( <> <Loader2 className="mr-2 h-4 w-4 animate-spin" /> Traitement en cours... </> ) : ( <> <Lock className="mr-2 h-4 w-4" /> Payer {getTotalPrice().toFixed(2)} € </> )} </Button> {/* Informations de sécurité */} <div className="text-xs text-center text-muted-foreground space-y-1"> <div className="flex items-center justify-center gap-1"> <Shield className="h-3 w-3" /> <span>Paiement 100% sécurisé SSL/TLS</span> </div> <div>Cartes acceptées: Visa, Mastercard, American Express</div> </div> </form> </CardContent> </Card> );
}

// Composant principal avec Elements Provider
export default function SecureCheckout(props: SecureCheckoutProps) { const [stripePromise] = useState(() => getStripe()); return ( <Elements stripe={stripePromise} options={{ appearance: { theme: 'stripe', variables: { colorPrimary: '#0570de', colorBackground: '#ffffff', colorText: '#30313d', colorDanger: '#df1b41', fontFamily: 'system-ui, -apple-system, sans-serif', spacingUnit: '4px', borderRadius: '6px', } }, loader: 'auto' }} > <CheckoutForm {...props} /> </Elements> );
}