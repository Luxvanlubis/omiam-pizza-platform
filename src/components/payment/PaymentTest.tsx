'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, XCircle, AlertTriangle, CreditCard, Shield, Lock } from 'lucide-react';

interface SecurityCheck { name: string; description: string; status: 'pass' | 'fail' | 'warning' | 'pending'; details?: string;
}

interface PaymentResult { success: boolean; message: string; paymentIntentId?: string; error?: string;
}

const Payment: React.FC = () => { const [isingPayment, setIsingPayment] = useState(false); const [paymentResult, setPaymentResult] = useState<PaymentResult | null>(null); const [securityChecks, setSecurityChecks] = useState<SecurityCheck[]>([ { name: 'HTTPS Forc√©', description: 'V√©rification que toutes les communications utilisent HTTPS', status: typeof window !== 'undefined' && window.location.protocol === 'https:' ? 'pass' : 'fail', details: typeof window !== 'undefined' ? `Protocole actuel: ${window.location.protocol}` : 'Non disponible c√¥t√© serveur' }, { name: 'Headers de S√©curit√©', description: 'Pr√©sence des headers CSP, HSTS, X-Frame-Options', status: 'pending', details: 'V√©rification en cours...' }, { name: 'Stripe Elements', description: 'Chargement s√©curis√© des composants Stripe', status: 'pending', details:  de chargement...' }, { name: 'Variables d\'Environnement', description: 'Configuration des cl√©s Stripe', status: 'pending', details: 'V√©rification des cl√©s...' } ]); const getStatusIcon = (status: SecurityCheck['status']) => { switch (status) { case 'pass': return <CheckCircle className="h-4 w-4 text-green-500" />; case 'fail': return <XCircle className="h-4 w-4 text-red-500" />; case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-500" />; default: return <div className="h-4 w-4 rounded-full bg-gray-300 animate-pulse" />; } }; const getStatusBadge = (status: SecurityCheck['status']) => { const variants = { pass: 'bg-green-100 text-green-800', fail: 'bg-red-100 text-red-800', warning: 'bg-yellow-100 text-yellow-800', pending: 'bg-gray-100 text-gray-800' }; const labels = { pass: 'Conforme', fail: '√âchec', warning: 'Attention', pending: 'En cours' }; return ( <Badge className={variants[status]}> {labels[status]} </Badge> ); }; const PaymentAPI = async () => { setIsingPayment(true); setPaymentResult(null); try { const response = await fetch('/api/create-payment-intent', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ amount: 1000, // 10.00 EUR en centimes currency: 'eur', metadata: { : 'true', source: 'payment--component' } }) }); const data = await response.json(); if (response.ok) { setPaymentResult({ success: true, message: 'PaymentIntent cr√©√© avec succ√®s', paymentIntentId: data.paymentIntent?.id }); } else { setPaymentResult({ success: false, message: 'Erreur lors de la cr√©ation du PaymentIntent', error: data.error'Erreur inconnue' }); } } catch (error) { setPaymentResult({ success: false, message: 'Erreur de connexion √† l\'API', error: error instanceof Error ? error.message : 'Erreur inconnue' }); } finally { setIsingPayment(false); } }; const checkSecurityHeaders = async () => { try { const response = await fetch(window.location.origin, { method: 'HEAD' }); const headers = response.headers; const hasCSP = headers.get('content-security-policy'); const hasHSTS = headers.get('strict-transport-security'); const hasXFrame = headers.get('x-frame-options'); const updatedChecks = securityChecks.map(check => { if (check.name === 'Headers de S√©curit√©') { const hasAllHeaders = hasCSP && hasHSTS && hasXFrame; const status: SecurityCheck['status'] = hasAllHeaders ? 'pass' : 'warning'; return { ...check, status, details: `CSP: ${hasCSP ? '‚úì' : '‚úó'}, HSTS: ${hasHSTS ? '‚úì' : '‚úó'}, X-Frame: ${hasXFrame ? '‚úì' : '‚úó'}` }; } return check; }); setSecurityChecks(updatedChecks); } catch (error) { console.error('Erreur lors de la v√©rification des headers:', error); } }; const checkStripeConfig = () => { const hasPublic = process.env.NEXT_PUBLIC_STRIPE_PUBLIC_; const updatedChecks = securityChecks.map(check => { if (check.name === 'Variables d\'Environnement') { const status: SecurityCheck['status'] = hasPublic ? 'pass' : 'fail'; return { ...check, status, details: hasPublic ? 'Cl√© publique Stripe configur√©e' : 'Cl√© publique Stripe manquante' }; } return check; }); setSecurityChecks(updatedChecks); }; React.useEffect(() => { checkSecurityHeaders(); checkStripeConfig(); //  de chargement Stripe Elements const StripeElements = async () => { try { const { loadStripe } = await import('@stripe/stripe-js'); const stripe = await loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_''); const updatedChecks = securityChecks.map(check => { if (check.name === 'Stripe Elements') { const status: SecurityCheck['status'] = stripe ? 'pass' : 'fail'; return { ...check, status, details: stripe ? 'Stripe charg√© avec succ√®s' : '√âchec du chargement Stripe' }; } return check; }); setSecurityChecks(updatedChecks); } catch (error) { console.error('Erreur Stripe:', error); } }; StripeElements(); }, []); return ( <div className="space-y-6 p-6"> <div className="flex items-center space-x-2"> <Shield className="h-6 w-6 text-blue-600" /> <h2 className="text-2xl font-bold"> de S√©curit√© PCI DSS</h2> </div> {/* V√©rifications de S√©curit√© */} <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Lock className="h-5 w-5" /> <span>V√©rifications de S√©curit√©</span> </CardTitle> <CardDescription> Validation des mesures de s√©curit√© PCI DSS impl√©ment√©es </CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> {securityChecks.map((check, index) => ( <div ={index} className="flex items-center justify-between p-3 border rounded-lg"> <div className="flex items-center space-x-3"> {getStatusIcon(check.status)} <div> <div className="font-medium">{check.name}</div> <div className="text-sm text-gray-600">{check.description}</div> {check.details && ( <div className="text-xs text-gray-500 mt-1">{check.details}</div> )} </div> </div> {getStatusBadge(check.status)} </div> ))} </div> </CardContent> </Card> {/*  API de Paiement */} <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <CreditCard className="h-5 w-5" /> <span> API de Paiement</span> </CardTitle> <CardDescription> de cr√©ation d'un PaymentIntent via l'API s√©curis√©e </CardDescription> </CardHeader> <CardContent> <div className="space-y-4"> <Button onClick={PaymentAPI} disabled={isingPayment} className="w-full" > {isingPayment ?  en cours...' : er l\'API de Paiement'} </Button> {paymentResult && ( <Alert className={paymentResult.success ? 'border-green-200 bg-green-50' : 'border-red-200 bg-red-50'}> <AlertDescription> <div className="space-y-2"> <div className="font-medium">{paymentResult.message}</div> {paymentResult.paymentIntentId && ( <div className="text-sm text-gray-600"> PaymentIntent ID: <code className="bg-gray-100 px-1 rounded">{paymentResult.paymentIntentId}</code> </div> )} {paymentResult.error && ( <div className="text-sm text-red-600"> Erreur: {paymentResult.error} </div> )} </div> </AlertDescription> </Alert> )} </div> </CardContent> </Card> {/* Informations de Conformit√© */} <Card> <CardHeader> <CardTitle>Conformit√© PCI DSS</CardTitle> <CardDescription> Statut de conformit√© aux standards de s√©curit√© </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div className="space-y-2"> <h4 className="font-medium">‚úÖ Mesures Impl√©ment√©es</h4> <ul className="text-sm text-gray-600 space-y-1"> <li>‚Ä¢ Chiffrement HTTPS/TLS</li> <li>‚Ä¢ Headers de s√©curit√©</li> <li>‚Ä¢ Pas de stockage de donn√©es carte</li> <li>‚Ä¢ Validation des entr√©es</li> <li>‚Ä¢ Webhooks s√©curis√©s</li> </ul> </div> <div className="space-y-2"> <h4 className="font-medium">üîÑ Actions Recommand√©es</h4> <ul className="text-sm text-gray-600 space-y-1"> <li>‚Ä¢ s de p√©n√©tration r√©guliers</li> <li>‚Ä¢ Audit des logs de s√©curit√©</li> <li>‚Ä¢ Formation √©quipe s√©curit√©</li> <li>‚Ä¢ Mise √† jour des d√©pendances</li> <li>‚Ä¢ Monitoring continu</li> </ul> </div> </div> </CardContent> </Card> </div> );
};

export default Payment;