'use client';

import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { CheckCircle, ArrowLeft, MapPin, Clock, Utensils } from 'lucide-react';
import SecureCheckout from './SecureCheckout';
import { useCartStore } from '@/store/cart-store';

interface CheckoutModalProps { isOpen: boolean; onClose: () => void;
}

type CheckoutStep = 'info' | 'payment' | 'success';
type OrderType = 'dine-in' | 'takeaway' | 'delivery';

interface CustomerInfo { email: string; name: string; phone: string;
}

interface DeliveryInfo { address: string; city: string; postalCode: string;
}

export default function CheckoutModal({ isOpen, onClose }: CheckoutModalProps) { const { items, getTotalPrice, clearCart } = useCartStore(); const [currentStep, setCurrentStep] = useState<CheckoutStep>('info'); const [orderType, setOrderType] = useState<OrderType>('takeaway'); const [customerInfo, setCustomerInfo] = useState<CustomerInfo>({ email: '', name: '', phone: '' }); const [deliveryInfo, setDeliveryInfo] = useState<DeliveryInfo>({ address: '', city: '', postalCode: '' }); const [errors, setErrors] = useState<Record<string, string>>({}); const [paymentIntentId, setPaymentIntentId] = useState<string | null>(null); // Validation des informations client const validateCustomerInfo = (): boolean => { const newErrors: Record<string, string> = {}; if (!customerInfo.email) { newErrors.email = 'Email requis'; } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.(customerInfo.email)) { newErrors.email = 'Email invalide'; } if (!customerInfo.name.trim()) { newErrors.name = 'Nom requis'; } if (!customerInfo.phone.trim()) { newErrors.phone = 'Téléphone requis'; } else if (!/^[0-9+\s-()]{10,}$/.(customerInfo.phone)) { newErrors.phone = 'Numéro de téléphone invalide'; } // Validation des informations de livraison si nécessaire if (orderType === 'delivery') { if (!deliveryInfo.address.trim()) { newErrors.address = 'Adresse requise'; } if (!deliveryInfo.city.trim()) { newErrors.city = 'Ville requise'; } if (!deliveryInfo.postalCode.trim()) { newErrors.postalCode = 'Code postal requis'; } else if (!/^[0-9]{5}$/.(deliveryInfo.postalCode)) { newErrors.postalCode = 'Code postal invalide (5 chiffres)'; } } setErrors(newErrors); return Object.s(newErrors).length === 0; }; const handleNextStep = () => { if (currentStep === 'info' && validateCustomerInfo()) { setCurrentStep('payment'); } }; const handlePaymentSuccess = (intentId: string) => { setPaymentIntentId(intentId); setCurrentStep('success'); // Vider le panier après paiement réussi setTimeout(() => { clearCart(); }, 2000); }; const handlePaymentError = (error: string) => { console.error('Erreur de paiement:', error); // L'erreur est déjà gérée dans le composant SecureCheckout }; const handleClose = () => { // Reset du modal setCurrentStep('info'); setCustomerInfo({ email: '', name: '', phone: '' }); setDeliveryInfo({ address: '', city: '', postalCode: '' }); setErrors({}); setPaymentIntentId(null); onClose(); }; const orderTypeOptions = [ { value: 'dine-in' as const, label: 'Sur place', icon: Utensils, description: 'Consommer au restaurant' }, { value: 'takeaway' as const, label: 'À emporter', icon: Clock, description: 'Récupérer votre commande' }, { value: 'delivery' as const, label: 'Livraison', icon: MapPin, description: 'Livraison à domicile (+3€)' } ]; const deliveryFee = orderType === 'delivery' ? 3 : 0; const totalWithDelivery = getTotalPrice() + deliveryFee; return ( <Dialog open={isOpen} onOpenChange={handleClose}> <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto"> <DialogHeader> <DialogTitle> {currentStep === 'info' && 'Informations de commande'} {currentStep === 'payment' && 'Paiement sécurisé'} {currentStep === 'success' && 'Commande confirmée'} </DialogTitle> </DialogHeader> {/* Étape 1: Informations client */} {currentStep === 'info' && ( <div className="space-y-6"> {/* Résumé de la commande */} <Card> <CardHeader> <CardTitle className="text-lg">Résumé de votre commande</CardTitle> </CardHeader> <CardContent> <div className="space-y-2"> {items.map((item) => ( <div ={item.id} className="flex justify-between text-sm"> <span>{item.name} x{item.quantity}</span> <span>{(item.price * item.quantity).toFixed(2)}€</span> </div> ))} <Separator /> <div className="flex justify-between font-medium"> <span>Sous-total</span> <span>{getTotalPrice().toFixed(2)}€</span> </div> </div> </CardContent> </Card> {/* Type de commande */} <div className="space-y-3"> <Label className="text-base font-medium">Type de commande</Label> <RadioGroup value={orderType} onValueChange={(value) => setOrderType(value as OrderType)}> {orderTypeOptions.map((option) => { const Icon = option.icon; return ( <div ={option.value} className="flex items-center space-x-2"> <RadioGroupItem value={option.value} id={option.value} /> <Label htmlFor={option.value} className="flex items-center space-x-2 cursor-pointer flex-1"> <Icon className="h-4 w-4" /> <div> <div className="font-medium">{option.label}</div> <div className="text-sm text-muted-foreground">{option.description}</div> </div> </Label> </div> ); })} </RadioGroup> </div> {/* Informations client */} <div className="space-y-4"> <Label className="text-base font-medium">Vos informations</Label> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div className="space-y-2"> <Label htmlFor="name">Nom complet *</Label> <Input id="name" value={customerInfo.name} onChange={(e) => setCustomerInfo(prev => ({ ...prev, name: e.target.value }))} placeholder="Votre nom" /> {errors.name && <p className="text-sm text-red-600">{errors.name}</p>} </div> <div className="space-y-2"> <Label htmlFor="phone">Téléphone *</Label> <Input id="phone" value={customerInfo.phone} onChange={(e) => setCustomerInfo(prev => ({ ...prev, phone: e.target.value }))} placeholder="06 12 34 56 78" /> {errors.phone && <p className="text-sm text-red-600">{errors.phone}</p>} </div> </div> <div className="space-y-2"> <Label htmlFor="email">Email *</Label> <Input id="email" type="email" value={customerInfo.email} onChange={(e) => setCustomerInfo(prev => ({ ...prev, email: e.target.value }))} placeholder="votre@email.com" /> {errors.email && <p className="text-sm text-red-600">{errors.email}</p>} </div> </div> {/* Informations de livraison */} {orderType === 'delivery' && ( <div className="space-y-4"> <Label className="text-base font-medium">Adresse de livraison</Label> <div className="space-y-4"> <div className="space-y-2"> <Label htmlFor="address">Adresse *</Label> <Input id="address" value={deliveryInfo.address} onChange={(e) => setDeliveryInfo(prev => ({ ...prev, address: e.target.value }))} placeholder="12 Rue des Ponts Saint-Michel" /> {errors.address && <p className="text-sm text-red-600">{errors.address}</p>} </div> <div className="grid grid-cols-2 gap-4"> <div className="space-y-2"> <Label htmlFor="city">Ville *</Label> <Input id="city" value={deliveryInfo.city} onChange={(e) => setDeliveryInfo(prev => ({ ...prev, city: e.target.value }))} placeholder="Paris" /> {errors.city && <p className="text-sm text-red-600">{errors.city}</p>} </div> <div className="space-y-2"> <Label htmlFor="postalCode">Code postal *</Label> <Input id="postalCode" value={deliveryInfo.postalCode} onChange={(e) => setDeliveryInfo(prev => ({ ...prev, postalCode: e.target.value }))} placeholder="75001" /> {errors.postalCode && <p className="text-sm text-red-600">{errors.postalCode}</p>} </div> </div> </div> </div> )} {/* Total avec frais de livraison */} <Card> <CardContent className="pt-6"> <div className="space-y-2"> <div className="flex justify-between"> <span>Sous-total</span> <span>{getTotalPrice().toFixed(2)}€</span> </div> {orderType === 'delivery' && ( <div className="flex justify-between"> <span>Frais de livraison</span> <span>{deliveryFee.toFixed(2)}€</span> </div> )} <Separator /> <div className="flex justify-between text-lg font-bold"> <span>Total</span> <span>{totalWithDelivery.toFixed(2)}€</span> </div> </div> </CardContent> </Card> <Button onClick={handleNextStep} className="w-full"> Continuer vers le paiement </Button> </div> )} {/* Étape 2: Paiement */} {currentStep === 'payment' && ( <div className="space-y-6"> <Button variant="ghost" onClick={() => setCurrentStep('info')} className="mb-4" > <ArrowLeft className="h-4 w-4 mr-2" /> Retour aux informations </Button> <SecureCheckout customerInfo={customerInfo} deliveryInfo={orderType === 'delivery' ? deliveryInfo : undefined} orderType={orderType} onSuccess={handlePaymentSuccess} onError={handlePaymentError} /> </div> )} {/* Étape 3: Succès */} {currentStep === 'success' && ( <div className="text-center space-y-6 py-8"> <CheckCircle className="h-16 w-16 text-green-600 mx-auto" /> <div> <h3 className="text-2xl font-bold text-green-600 mb-2">Commande confirmée !</h3> <p className="text-muted-foreground"> Votre paiement a été traité avec succès. </p> {paymentIntentId && ( <p className="text-sm text-muted-foreground mt-2"> Référence: {paymentIntentId.slice(-8).toUpperCase()} </p> )} </div> <Alert> <AlertDescription> Un email de confirmation a été envoyé à {customerInfo.email}. {orderType === 'takeaway' && ' Votre commande sera prête dans 15-20 minutes.'} {orderType === 'delivery' && ' Votre commande sera livrée dans 30-45 minutes.'} {orderType === 'dine-in' && ' Présentez-vous à l\'accueil avec votre référence.'} </AlertDescription> </Alert> <Button onClick={handleClose} className="w-full"> Fermer </Button> </div> )} </DialogContent> </Dialog> );
}