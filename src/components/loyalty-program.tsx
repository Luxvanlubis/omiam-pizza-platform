"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Star, Gift, Crown, Pizza } from "lucide-react";

interface LoyaltyProgramProps { userId?: string;
}

interface LoyaltyData { points: number; tier: "bronze" | "silver" | "gold" | "platinum"; visits: number; totalSpent: number; nextTierPoints: number; rewards: Array<{ id: string; name: string; description: string; pointsRequired: number; claimed: boolean; }>;
}

const TIER_CONFIG = { bronze: { name: "Bronze", color: "bg-orange-600", minPoints: 0, benefits: ["1 point par 10€", "Offre anniversaire"] }, silver: { name: "Argent", color: "bg-gray-400", minPoints: 100, benefits: ["2 points par 10€", "Offre anniversaire", "Pizza gratuite tous les 10 achats"] }, gold: { name: "Or", color: "bg-yellow-500", minPoints: 300, benefits: ["3 points par 10€", "Offre anniversaire", "Pizza gratuite tous les 5 achats", "Dessert offert"] }, platinum: { name: "Platine", color: "bg-purple-600", minPoints: 600, benefits: ["5 points par 10€", "Offre anniversaire", "Pizza gratuite tous les 3 achats", "Dessert offert", "Priorité réservation"] }
};

export default function LoyaltyProgram({ userId }: LoyaltyProgramProps) { const [loyaltyData, setLoyaltyData] = useState<LoyaltyData | null>(null); const [loading, setLoading] = useState(true); useEffect(() => { // Simuler le chargement des données de fidélité const mockData: LoyaltyData = { points: 245, tier: "silver", visits: 18, totalSpent: 485, nextTierPoints: 300, rewards: [ { id: "1", name: "Pizza Gratuite", description: "Une pizza de votre choix", pointsRequired: 100, claimed: true }, { id: "2", name: "Dessert Offert", description: "Dessert au choix", pointsRequired: 50, claimed: false }, { id: "3", name: "Apéritif Gratuit", description: "Antipasto pour 2 personnes", pointsRequired: 150, claimed: false }, { id: "4", name: "Menu Dégustation", description: "Menu complet pour 2 personnes", pointsRequired: 400, claimed: false } ] }; setTimeout(() => { setLoyaltyData(mockData); setLoading(false); }, 1000); }, [userId]); if (loading) { return ( <div className="animate-pulse"> <Card className="w-full"> <CardHeader> <div className="h-6 bg-gray-200 rounded"></div> </CardHeader> <CardContent> <div className="space-y-4"> <div className="h-4 bg-gray-200 rounded"></div> <div className="h-4 bg-gray-200 rounded w-3/4"></div> </div> </CardContent> </Card> </div> ); } if (!loyaltyData) return null; const currentTier = TIER_CONFIG[loyaltyData.tier]; const nextTier = Object.entries(TIER_CONFIG).find(([_, config]) => config.minPoints > loyaltyData.points )?.[1]; const progressToNextTier = nextTier ? ((loyaltyData.points - currentTier.minPoints) / (nextTier.minPoints - currentTier.minPoints)) * 100 : 100; return ( <div className="space-y-6"> {/* Carte de fidélité */} <Card className="relative overflow-hidden bg-gradient-to-br from-red-600 to-orange-600 text-white"> <CardHeader> <div className="flex justify-between items-start"> <div> <CardTitle className="text-2xl">Programme de Fidélité</CardTitle> <CardDescription className="text-red-100"> Merci pour votre fidélité ! </CardDescription> </div> <div className="flex items-center space-x-2"> <Star className="w-6 h-6 fill-current" /> <span className="text-2xl font-bold">{loyaltyData.points}</span> </div> </div> </CardHeader> <CardContent> <div className="flex items-center justify-between mb-4"> <div className="flex items-center space-x-3"> <div className={`w-12 h-12 rounded-full ${currentTier.color} flex items-center justify-center`}> <Crown className="w-6 h-6" /> </div> <div> <p className="text-lg font-semibold">Statut {currentTier.name}</p> <p className="text-sm text-red-100">{loyaltyData.visits} visites</p> </div> </div> <div className="text-right"> <p className="text-sm text-red-100">Total dépensé</p> <p className="text-xl font-bold">{loyaltyData.totalSpent.toFixed(2)}€</p> </div> </div> {nextTier && ( <div className="space-y-2"> <div className="flex justify-between text-sm"> <span>Prochain niveau: {nextTier.name}</span> <span>{loyaltyData.points}/{nextTier.minPoints} points</span> </div> <Progress value={progressToNextTier} className="h-2 bg-red-300" /> </div> )} </CardContent> </Card> {/* Bénéfices du niveau actuel */} <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Gift className="w-5 h-5" /> <span>Vos Avantages {currentTier.name}</span> </CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-2 gap-3"> {currentTier.benefits.map((benefit, index) => ( <div ={index} className="flex items-center space-x-2 p-3 bg-orange-50 rounded-lg"> <Star className="w-4 h-4 text-orange-600" /> <span className="text-sm text-gray-700">{benefit}</span> </div> ))} </div> </CardContent> </Card> {/* Récompenses disponibles */} <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Pizza className="w-5 h-5" /> <span>Récompenses Disponibles</span> </CardTitle> <CardDescription> Échangez vos points contre des récompenses exclusives </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> {loyaltyData.rewards.map((reward) => ( <Card ={reward.id} className={`relative ${reward.claimed ? 'bg-gray-50' : 'hover:shadow-lg transition-shadow'}`}> <CardHeader className="pb-3"> <div className="flex justify-between items-start"> <CardTitle className={`text-lg ${reward.claimed ? 'text-gray-500' : 'text-red-800'}`}> {reward.name} </CardTitle> <Badge variant={reward.claimed ? "secondary" : "default"} className={reward.claimed ? "bg-gray-400" : "bg-red-600"}> {reward.pointsRequired} pts </Badge> </div> <CardDescription>{reward.description}</CardDescription> </CardHeader> <CardContent> <Button className="w-full" disabled={reward.claimed || loyaltyData.points < reward.pointsRequired} variant={reward.claimed ? "secondary" : "default"} > {reward.claimed ? "Déjà utilisé" : loyaltyData.points >= reward.pointsRequired ? "Échanger" : "Points insuffisants"} </Button> </CardContent> </Card> ))} </div> </CardContent> </Card> </div> );
}