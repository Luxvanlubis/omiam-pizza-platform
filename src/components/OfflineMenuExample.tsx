'use client';

import { useState, useEffect } from 'react';
import { useOfflineCache } from '@/hooks/usePWA';
import { Wifi, WifiOff, RefreshCw } from 'lucide-react';

interface MenuItem { id: string; name: string; price: number; category: string; available: boolean;
}

export default function OfflineMenuExample() { const [menuItems, setMenuItems] = useState<MenuItem[]>([]); const [loading, setLoading] = useState(true); const [isOnline, setIsOnline] = useState(true); const { fetchWithCache, fetchWithOfflineQueue } = useOfflineCache(); useEffect(() => { // √âcouter les changements de statut r√©seau const handleOnline = () => setIsOnline(true); const handleOffline = () => setIsOnline(false); window.addEventListener('online', handleOnline); window.addEventListener('offline', handleOffline); setIsOnline(navigator.onLine); // Charger les donn√©es du menu loadMenuItems(); return () => { window.removeEventListener('online', handleOnline); window.removeEventListener('offline', handleOffline); }; }, []); const loadMenuItems = async () => { setLoading(true); try { // Utiliser fetchWithCache pour obtenir les donn√©es avec fallback cache const response = await fetchWithCache('/api/menu/items', {}, 'menu-items'); const data = await response.json(); setMenuItems(data.items || []); } catch (error) { console.error('Erreur lors du chargement du menu:', error); // En cas d'erreur, essayer de charger depuis le cache const cachedData = JSON.parse(localStorage.getItem('omiam_cache_menu-items') || 'null'); if (cachedData) { setMenuItems(cachedData.data.items || []); } } finally { setLoading(false); } }; const updateItemAvailability = async (itemId: string, available: boolean) => { try { // Mettre √† jour localement d'abord setMenuItems(prev => prev.map(item => item.id === itemId ? { ...item, available } : item ) ); // Utiliser fetchWithOfflineQueue pour g√©rer les requ√™tes offline await fetchWithOfflineQueue('/api/menu/items/availability', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ itemId, available }) }); console.log(`Disponibilit√© mise √† jour pour l'item ${itemId}: ${available}`); } catch (error) { console.error('Erreur lors de la mise √† jour:', error); // Revenir √† l'√©tat pr√©c√©dent en cas d'erreur setMenuItems(prev => prev.map(item => item.id === itemId ? { ...item, available: !available } : item ) ); } }; if (loading) { return ( <div className="flex items-center justify-center p-8"> <RefreshCw className="h-6 w-6 animate-spin mr-2" /> <span>Chargement du menu...</span> </div> ); } return ( <div className="max-w-4xl mx-auto p-6"> {/* Indicateur de statut r√©seau */} <div className="mb-6 flex items-center justify-between"> <h2 className="text-2xl font-bold text-gray-900">Menu - Exemple Offline</h2> <div className={`flex items-center space-x-2 px-3 py-1 rounded-full text-sm ${ isOnline ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800' }`}> {isOnline ? ( <Wifi className="h-4 w-4" /> ) : ( <WifiOff className="h-4 w-4" /> )} <span>{isOnline ? 'En ligne' : 'Mode offline'}</span> </div> </div> {/* Message d'information offline */} {!isOnline && ( <div className="mb-6 p-4 bg-orange-50 border border-orange-200 rounded-lg"> <p className="text-orange-800 text-sm"> üì± <strong>Mode offline activ√©</strong> - Vos modifications seront synchronis√©es automatiquement lors de la reconnexion. </p> </div> )} {/* Actions */} <div className="mb-6 flex space-x-4"> <button onClick={loadMenuItems} disabled={loading} className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center" > <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} /> Actualiser </button> </div> {/* Liste des items du menu */} <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3"> {menuItems.map((item) => ( <div key={item.id} className={`border rounded-lg p-4 transition-all ${ item.available ? 'border-gray-200 bg-white' : 'border-gray-300 bg-gray-50' }`} > <div className="flex items-start justify-between mb-2"> <h3 className={`font-semibold ${ item.available ? 'text-gray-900' : 'text-gray-500' }`}> {item.name} </h3> <span className={`text-sm px-2 py-1 rounded ${ item.available ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' }`}> {item.available ? 'Disponible' : 'Indisponible'} </span> </div> <p className="text-gray-600 text-sm mb-2"> Cat√©gorie: {item.category} </p> <div className="flex items-center justify-between"> <span className={`font-bold ${ item.available ? 'text-gray-900' : 'text-gray-500' }`}> {item.price.toFixed(2)} ‚Ç¨ </span> <button onClick={() => updateItemAvailability(item.id, !item.available)} className={`px-3 py-1 rounded text-sm font-medium transition-colors ${ item.available ? 'bg-red-100 text-red-800 hover:bg-red-200' : 'bg-green-100 text-green-800 hover:bg-green-200' }`} > {item.available ? 'Marquer indisponible' : 'Marquer disponible'} </button> </div> </div> ))} </div> {menuItems.length === 0 && ( <div className="text-center py-12"> <p className="text-gray-500">Aucun item de menu trouv√©.</p> <button onClick={loadMenuItems} className="mt-4 text-blue-600 hover:text-blue-800 underline" > R√©essayer </button> </div> )} {/* Informations de d√©bogage */} <div className="mt-8 p-4 bg-gray-50 rounded-lg"> <h4 className="font-semibold text-gray-900 mb-2">Informations de d√©bogage</h4> <div className="text-sm text-gray-600 space-y-1"> <p>‚Ä¢ Statut r√©seau: {isOnline ? 'Connect√©' : 'D√©connect√©'}</p> <p>‚Ä¢ Items charg√©s: {menuItems.length}</p> <p>‚Ä¢ Cache utilis√©: {!isOnline ? 'Oui' : 'Non'}</p> </div> </div> </div> );
}