'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Plus, Minus, Pizza, ChefHat, Flame, Wheat } from 'lucide-react';
import { cn } from '@/lib/utils';

interface PizzaSize { id: string; name: string; diameter: number; basePrice: number;
}

interface DoughType { id: string; name: string; description?: string; extraPrice: number;
}

interface CookingLevel { id: string; name: string; description?: string; extraPrice: number;
}

interface Ingredient { id: string; name: string; description?: string; price: number; category: string; allergens: string[]; isVegetarian: boolean; isVegan: boolean;
}

interface PizzaCustomization { sizeId: string; doughTypeId: string; cookingLevelId: string; extraIngredients: { ingredientId: string; quantity: number }[];
}

interface PizzaCustomizerProps { productId: string; basePrice: number; onCustomizationChange: (customization: PizzaCustomization, totalPrice: number) => void; onAddToCart: () => void;
}

const PizzaCustomizer: React.FC<PizzaCustomizerProps> = ({ productId, basePrice, onCustomizationChange, onAddToCart
}) => { // Mock data - In real app, fetch from API const [sizes] = useState<PizzaSize[]>([ { id: '1', name: 'Petite', diameter: 26, basePrice: 0 }, { id: '2', name: 'Moyenne', diameter: 30, basePrice: 3 }, { id: '3', name: 'Grande', diameter: 34, basePrice: 6 }, { id: '4', name: 'Familiale', diameter: 40, basePrice: 10 } ]); const [doughTypes] = useState<DoughType[]>([ { id: '1', name: 'Classique', description: 'Pâte traditionnelle', extraPrice: 0 }, { id: '2', name: 'Fine', description: 'Pâte fine et croustillante', extraPrice: 1 }, { id: '3', name: 'Épaisse', description: 'Pâte moelleuse et généreuse', extraPrice: 1.5 }, { id: '4', name: 'Sans Gluten', description: 'Pâte sans gluten', extraPrice: 3 } ]); const [cookingLevels] = useState<CookingLevel[]>([ { id: '1', name: 'Normale', description: 'Cuisson standard', extraPrice: 0 }, { id: '2', name: 'Bien Cuite', description: 'Cuisson prolongée', extraPrice: 0 }, { id: '3', name: 'Peu Cuite', description: 'Cuisson légère', extraPrice: 0 } ]); const [ingredients] = useState<Ingredient[]>([ // Fromages { id: '1', name: 'Mozzarella Extra', description: 'Double portion', price: 2, category: 'CHEESE', allergens: ['Lait'], isVegetarian: true, isVegan: false }, { id: '2', name: 'Chèvre', description: 'Fromage de chèvre crémeux', price: 2.5, category: 'CHEESE', allergens: ['Lait'], isVegetarian: true, isVegan: false }, { id: '3', name: 'Parmesan', description: 'Copeaux de parmesan', price: 2, category: 'CHEESE', allergens: ['Lait'], isVegetarian: true, isVegan: false }, { id: '4', name: 'Gorgonzola', description: 'Fromage bleu italien', price: 3, category: 'CHEESE', allergens: ['Lait'], isVegetarian: true, isVegan: false }, // Viandes { id: '5', name: 'Pepperoni', description: 'Saucisson épicé', price: 2.5, category: 'MEAT', allergens: [], isVegetarian: false, isVegan: false }, { id: '6', name: 'Jambon', description: 'Jambon de qualité', price: 2, category: 'MEAT', allergens: [], isVegetarian: false, isVegan: false }, { id: '7', name: 'Chorizo', description: 'Saucisson espagnol', price: 3, category: 'MEAT', allergens: [], isVegetarian: false, isVegan: false }, { id: '8', name: 'Poulet', description: 'Émincé de poulet', price: 2.5, category: 'MEAT', allergens: [], isVegetarian: false, isVegan: false }, // Légumes { id: '9', name: 'Champignons', description: 'Champignons frais', price: 1.5, category: 'VEGETABLE', allergens: [], isVegetarian: true, isVegan: true }, { id: '10', name: 'Poivrons', description: 'Poivrons colorés', price: 1.5, category: 'VEGETABLE', allergens: [], isVegetarian: true, isVegan: true }, { id: '11', name: 'Olives', description: 'Olives noires', price: 1, category: 'VEGETABLE', allergens: [], isVegetarian: true, isVegan: true }, { id: '12', name: 'Tomates Cerises', description: 'Tomates cerises fraîches', price: 2, category: 'VEGETABLE', allergens: [], isVegetarian: true, isVegan: true }, { id: '13', name: 'Roquette', description: 'Roquette fraîche', price: 1.5, category: 'VEGETABLE', allergens: [], isVegetarian: true, isVegan: true }, { id: '14', name: 'Oignons Rouges', description: 'Oignons rouges émincés', price: 1, category: 'VEGETABLE', allergens: [], isVegetarian: true, isVegan: true } ]); const [customization, setCustomization] = useState<PizzaCustomization>({ sizeId: '1', doughTypeId: '1', cookingLevelId: '1', extraIngredients: [] }); const [totalPrice, setTotalPrice] = useState(basePrice); // Calculate total price useEffect(() => { const selectedSize = sizes.find(s => s.id === customization.sizeId); const selectedDough = doughTypes.find(d => d.id === customization.doughTypeId); const selectedCooking = cookingLevels.find(c => c.id === customization.cookingLevelId); let price = basePrice; if (selectedSize) price += selectedSize.basePrice; if (selectedDough) price += selectedDough.extraPrice; if (selectedCooking) price += selectedCooking.extraPrice; customization.extraIngredients.forEach(extra => { const ingredient = ingredients.find(i => i.id === extra.ingredientId); if (ingredient) { price += ingredient.price * extra.quantity; } }); setTotalPrice(price); onCustomizationChange(customization, price); }, [customization, basePrice, sizes, doughTypes, cookingLevels, ingredients, onCustomizationChange]); const addIngredient = (ingredientId: string) => { setCustomization(prev => { const existing = prev.extraIngredients.find(e => e.ingredientId === ingredientId); if (existing) { return { ...prev, extraIngredients: prev.extraIngredients.map(e => e.ingredientId === ingredientId ? { ...e, quantity: e.quantity + 1 } : e ) }; } else { return { ...prev, extraIngredients: [...prev.extraIngredients, { ingredientId, quantity: 1 }] }; } }); }; const removeIngredient = (ingredientId: string) => { setCustomization(prev => { const existing = prev.extraIngredients.find(e => e.ingredientId === ingredientId); if (existing && existing.quantity > 1) { return { ...prev, extraIngredients: prev.extraIngredients.map(e => e.ingredientId === ingredientId ? { ...e, quantity: e.quantity - 1 } : e ) }; } else { return { ...prev, extraIngredients: prev.extraIngredients.filter(e => e.ingredientId !== ingredientId) }; } }); }; const getIngredientQuantity = (ingredientId: string) => { const extra = customization.extraIngredients.find(e => e.ingredientId === ingredientId); return extra ? extra.quantity : 0; }; const groupedIngredients = ingredients.reduce((acc, ingredient) => { if (!acc[ingredient.category]) { acc[ingredient.category] = []; } acc[ingredient.category].push(ingredient); return acc; }, {} as Record<string, Ingredient[]>); const categoryNames = { CHEESE: 'Fromages', MEAT: 'Viandes', VEGETABLE: 'Légumes', SAUCE: 'Sauces', HERB_SPICE: 'Herbes & Épices', SEAFOOD: 'Fruits de mer', OTHER: 'Autres' }; return ( <div className="space-y-6"> {/* Taille */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Pizza className="h-5 w-5" /> Taille de la pizza </CardTitle> <CardDescription> Choisissez la taille qui vous convient </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-2 md:grid-cols-4 gap-3"> {sizes.map((size) => ( <Button ={size.id} variant={customization.sizeId === size.id ? "default" : "outline"} className="h-auto p-4 flex flex-col items-center gap-2" onClick={() => setCustomization(prev => ({ ...prev, sizeId: size.id }))} > <span className="font-semibold">{size.name}</span> <span className="text-sm text-muted-foreground">{size.diameter}cm</span> {size.basePrice > 0 && ( <Badge variant="secondary">+{size.basePrice}€</Badge> )} </Button> ))} </div> </CardContent> </Card> {/* Type de pâte */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Wheat className="h-5 w-5" /> Type de pâte </CardTitle> <CardDescription> Sélectionnez votre pâte préférée </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-2 gap-3"> {doughTypes.map((dough) => ( <Button ={dough.id} variant={customization.doughTypeId === dough.id ? "default" : "outline"} className="h-auto p-4 flex flex-col items-start gap-2 text-left" onClick={() => setCustomization(prev => ({ ...prev, doughTypeId: dough.id }))} > <div className="flex items-center justify-between w-full"> <span className="font-semibold">{dough.name}</span> {dough.extraPrice > 0 && ( <Badge variant="secondary">+{dough.extraPrice}€</Badge> )} </div> {dough.description && ( <span className="text-sm text-muted-foreground">{dough.description}</span> )} </Button> ))} </div> </CardContent> </Card> {/* Niveau de cuisson */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Flame className="h-5 w-5" /> Niveau de cuisson </CardTitle> <CardDescription> Comment souhaitez-vous votre pizza ? </CardDescription> </CardHeader> <CardContent> <div className="grid grid-cols-1 md:grid-cols-3 gap-3"> {cookingLevels.map((level) => ( <Button ={level.id} variant={customization.cookingLevelId === level.id ? "default" : "outline"} className="h-auto p-4 flex flex-col items-center gap-2" onClick={() => setCustomization(prev => ({ ...prev, cookingLevelId: level.id }))} > <span className="font-semibold">{level.name}</span> {level.description && ( <span className="text-sm text-muted-foreground text-center">{level.description}</span> )} </Button> ))} </div> </CardContent> </Card> {/* Ingrédients supplémentaires */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <ChefHat className="h-5 w-5" /> Ingrédients supplémentaires </CardTitle> <CardDescription> Personnalisez votre pizza avec des ingrédients de qualité </CardDescription> </CardHeader> <CardContent className="space-y-6"> {Object.entries(groupedIngredients).map(([category, categoryIngredients]) => ( <div ={category}> <h4 className="font-semibold mb-3">{categoryNames[category as of typeof categoryNames]}</h4> <div className="grid grid-cols-1 md:grid-cols-2 gap-3"> {categoryIngredients.map((ingredient) => { const quantity = getIngredientQuantity(ingredient.id); return ( <div ={ingredient.id} className={cn( "border rounded-lg p-4 transition-colors", quantity > 0 ? "border-primary bg-primary/5" : "border-border" )} > <div className="flex items-start justify-between mb-2"> <div className="flex-1"> <div className="flex items-center gap-2 mb-1"> <span className="font-medium">{ingredient.name}</span> <Badge variant="outline">{ingredient.price}€</Badge> {ingredient.isVegetarian && ( <Badge variant="secondary" className="text-xs">Végé</Badge> )} {ingredient.isVegan && ( <Badge variant="secondary" className="text-xs">Vegan</Badge> )} </div> {ingredient.description && ( <p className="text-sm text-muted-foreground">{ingredient.description}</p> )} {ingredient.allergens.length > 0 && ( <p className="text-xs text-orange-600 mt-1"> Allergènes: {ingredient.allergens.join(', ')} </p> )} </div> </div> <div className="flex items-center justify-between"> <div className="flex items-center gap-2"> <Button size="sm" variant="outline" onClick={() => removeIngredient(ingredient.id)} disabled={quantity === 0} > <Minus className="h-4 w-4" /> </Button> <span className="w-8 text-center font-medium">{quantity}</span> <Button size="sm" variant="outline" onClick={() => addIngredient(ingredient.id)} > <Plus className="h-4 w-4" /> </Button> </div> {quantity > 0 && ( <Badge variant="default"> +{(ingredient.price * quantity).toFixed(2)}€ </Badge> )} </div> </div> ); })} </div> {category !== 'OTHER' && <Separator className="mt-4" />} </div> ))} </CardContent> </Card> {/* Résumé et ajout au panier */} <Card> <CardContent className="pt-6"> <div className="flex items-center justify-between mb-4"> <span className="text-lg font-semibold">Prix total:</span> <span className="text-2xl font-bold text-primary">{totalPrice.toFixed(2)}€</span> </div> <Button onClick={onAddToCart} className="w-full" size="lg"> Ajouter au panier </Button> </CardContent> </Card> </div> );
};

export default PizzaCustomizer;