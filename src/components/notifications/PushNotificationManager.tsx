"use client";

import { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Bell, BellOff, Settings, Check, X, AlertCircle, Smartphone, Mail, MessageSquare
} from 'lucide-react';
import { toast } from 'sonner';

interface NotificationPreferences { orderStatusUpdates: boolean; promotions: boolean; newProducts: boolean; loyaltyRewards: boolean; systemMessages: boolean; emailNotifications: boolean; pushNotifications: boolean; smsNotifications: boolean;
}

interface PushNotificationManagerProps { userId: string; className?: string;
}

export function PushNotificationManager({ userId, className }: PushNotificationManagerProps) { const [isSupported, setIsSupported] = useState(false); const [permission, setPermission] = useState<NotificationPermission>('default'); const [isSubscribed, setIsSubscribed] = useState(false); const [isLoading, setIsLoading] = useState(false); const [preferences, setPreferences] = useState<NotificationPreferences | null>(null); const [showSettings, setShowSettings] = useState(false); // Vérifier le support des notifications push useEffect(() => { if ('serviceWorker' in navigator && 'PushManager' in window) { setIsSupported(true); setPermission(Notification.permission); checkSubscriptionStatus(); loadPreferences(); } }, [userId]); // Vérifier si l'utilisateur est déjà abonné const checkSubscriptionStatus = useCallback(async () => { try { const registration = await navigator.serviceWorker.ready; const subscription = await registration.pushManager.getSubscription(); setIsSubscribed(!!subscription); } catch (error) { console.error('Error checking subscription status:', error instanceof Error ? error.message : String(error)); } }, []); // Charger les préférences de notification const loadPreferences = useCallback(async () => { try { const response = await fetch(`/api/notifications/preferences?userId=${userId}`); if (response.ok) { const prefs = await response.json(); setPreferences(prefs); } } catch (error) { console.error('Error loading preferences:', error instanceof Error ? error.message : String(error)); } }, [userId]); // Demander la permission et s'abonner const subscribeToPush = async () => { if (!isSupported) { toast.error('Les notifications push ne sont pas supportées sur ce navigateur'); return; } setIsLoading(true); try { // Demander la permission const permission = await Notification.requestPermission(); setPermission(permission); if (permission !== 'granted') { toast.error('Permission refusée pour les notifications'); return; } // Enregistrer le service worker const registration = await navigator.serviceWorker.register('/sw.js'); await navigator.serviceWorker.ready; // Créer la souscription push const subscription = await registration.pushManager.subscribe({ userVisibleOnly: true, applicationServer: process.env.NEXT_PUBLIC_VAPID_PUBLIC_ }); // Envoyer la souscription au serveur const response = await fetch('/api/notifications/subscribe', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId, subscription, userAgent: navigator.userAgent }) }); if (response.ok) { setIsSubscribed(true); toast.success('Notifications push activées avec succès!'); } else { throw new Error('Failed to subscribe'); } } catch (error) { console.error('Error subscribing to push notifications:', error instanceof Error ? error.message : String(error)); toast.error('Erreur lors de l\'activation des notifications'); } finally { setIsLoading(false); } }; // Se désabonner des notifications push const unsubscribeFromPush = async () => { setIsLoading(true); try { const registration = await navigator.serviceWorker.ready; const subscription = await registration.pushManager.getSubscription(); if (subscription) { await subscription.unsubscribe(); // Informer le serveur await fetch('/api/notifications/subscribe', { method: 'DELETE', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId, endpoint: subscription.endpoint }) }); } setIsSubscribed(false); toast.success('Notifications push désactivées'); } catch (error) { console.error('Error unsubscribing from push notifications:', error instanceof Error ? error.message : String(error)); toast.error('Erreur lors de la désactivation'); } finally { setIsLoading(false); } }; // Mettre à jour les préférences const updatePreferences = async (newPreferences: Partial<NotificationPreferences>) => { try { const response = await fetch('/api/notifications/preferences', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ userId, ...newPreferences }) }); if (response.ok) { const updatedPrefs = await response.json(); setPreferences(updatedPrefs); toast.success('Préférences mises à jour'); } else { throw new Error('Failed to update preferences'); } } catch (error) { console.error('Error updating preferences:', error instanceof Error ? error.message : String(error)); toast.error('Erreur lors de la mise à jour'); } }; if (!isSupported) { return ( <Card className={className}> <CardContent className="pt-6"> <div className="flex items-center gap-2 text-muted-foreground"> <AlertCircle className="h-4 w-4" /> <span className="text-sm">Notifications push non supportées</span> </div> </CardContent> </Card> ); } return ( <div className={className}> <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Bell className="h-5 w-5" /> Notifications Push <Badge variant={isSubscribed ? 'default' : 'secondary'}> {isSubscribed ? 'Activées' : 'Désactivées'} </Badge> </CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="flex items-center justify-between"> <div className="space-y-1"> <p className="text-sm font-medium"> Recevoir des notifications en temps réel </p> <p className="text-xs text-muted-foreground"> Soyez informé des mises à jour de vos commandes </p> </div> <Button onClick={isSubscribed ? unsubscribeFromPush : subscribeToPush} disabled={isLoading || permission === 'denied'} variant={isSubscribed ? 'outline' : 'default'} size="sm" > {isLoading ? ( 'Chargement...' ) : isSubscribed ? ( <><BellOff className="h-4 w-4 mr-2" />Désactiver</> ) : ( <><Bell className="h-4 w-4 mr-2" />Activer</> )} </Button> </div> {permission === 'denied' && ( <div className="p-3 bg-destructive/10 border border-destructive/20 rounded-md"> <p className="text-sm text-destructive"> Les notifications sont bloquées. Veuillez les autoriser dans les paramètres de votre navigateur. </p> </div> )} <Separator /> <div className="flex items-center justify-between"> <span className="text-sm font-medium">Préférences de notification</span> <Button variant="ghost" size="sm" onClick={() => setShowSettings(!showSettings)} > <Settings className="h-4 w-4" /> </Button> </div> {showSettings && preferences && ( <div className="space-y-4 pt-2"> <div className="grid gap-4"> <div className="flex items-center justify-between"> <div className="flex items-center gap-2"> <Smartphone className="h-4 w-4 text-muted-foreground" /> <Label htmlFor="push-notifications" className="text-sm"> Notifications push </Label> </div> <Switch id="push-notifications" checked={preferences.pushNotifications} onCheckedChange={(checked) => updatePreferences({ pushNotifications: checked }) } /> </div> <div className="flex items-center justify-between"> <div className="flex items-center gap-2"> <Mail className="h-4 w-4 text-muted-foreground" /> <Label htmlFor="email-notifications" className="text-sm"> Notifications email </Label> </div> <Switch id="email-notifications" checked={preferences.emailNotifications} onCheckedChange={(checked) => updatePreferences({ emailNotifications: checked }) } /> </div> <div className="flex items-center justify-between"> <div className="flex items-center gap-2"> <MessageSquare className="h-4 w-4 text-muted-foreground" /> <Label htmlFor="sms-notifications" className="text-sm"> Notifications SMS </Label> </div> <Switch id="sms-notifications" checked={preferences.smsNotifications} onCheckedChange={(checked) => updatePreferences({ smsNotifications: checked }) } /> </div> </div> <Separator /> <div className="space-y-3"> <h4 className="text-sm font-medium">Types de notifications</h4> <div className="grid gap-3"> <div className="flex items-center justify-between"> <Label htmlFor="order-updates" className="text-sm"> Mises à jour de commandes </Label> <Switch id="order-updates" checked={preferences.orderStatusUpdates} onCheckedChange={(checked) => updatePreferences({ orderStatusUpdates: checked }) } /> </div> <div className="flex items-center justify-between"> <Label htmlFor="promotions" className="text-sm"> Promotions et offres </Label> <Switch id="promotions" checked={preferences.promotions} onCheckedChange={(checked) => updatePreferences({ promotions: checked }) } /> </div> <div className="flex items-center justify-between"> <Label htmlFor="new-products" className="text-sm"> Nouveaux produits </Label> <Switch id="new-products" checked={preferences.newProducts} onCheckedChange={(checked) => updatePreferences({ newProducts: checked }) } /> </div> <div className="flex items-center justify-between"> <Label htmlFor="loyalty-rewards" className="text-sm"> Récompenses fidélité </Label> <Switch id="loyalty-rewards" checked={preferences.loyaltyRewards} onCheckedChange={(checked) => updatePreferences({ loyaltyRewards: checked }) } /> </div> <div className="flex items-center justify-between"> <Label htmlFor="system-messages" className="text-sm"> Messages système </Label> <Switch id="system-messages" checked={preferences.systemMessages} onCheckedChange={(checked) => updatePreferences({ systemMessages: checked }) } /> </div> </div> </div> </div> )} </CardContent> </Card> </div> );
}