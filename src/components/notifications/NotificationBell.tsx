'use client';

import React, { useState } from 'react';
import { Bell, Settings, Check, Trash2, X } from 'lucide-react';
import { useNotifications, useRealtimeNotifications } from '@/hooks/useNotifications';
import { formatDistanceToNow } from 'date-fns';
import { fr } from 'date-fns/locale';
import { DropdownMenu, DropdownMenuContent, DropdownMenuTrigger, DropdownMenuSeparator, DropdownMenuLabel,
} from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Skeleton } from '@/components/ui/skeleton';
import { cn } from '@/lib/utils';

interface NotificationBellProps { userId?: string; className?: string;
}

export function NotificationBell({ userId, className }: NotificationBellProps) { const [isOpen, setIsOpen] = useState(false); const { notifications, unreadCount, isLoading, markAsRead, markAllAsRead, deleteNotification, } = useNotifications(userId); // Activer les notifications en temps r√©el useRealtimeNotifications(userId); // Obtenir l'ic√¥ne selon le type de notification const getNotificationIcon = (type: string) => { switch (type) { case 'ORDER_STATUS_UPDATE': return 'üçï'; case 'PROMOTION': return 'üéâ'; case 'NEW_PRODUCT': return '‚ú®'; case 'SYSTEM': return '‚öôÔ∏è'; default: return 'üì¢'; } }; // Obtenir la couleur selon le type const getNotificationColor = (type: string) => { switch (type) { case 'ORDER_STATUS_UPDATE': return 'bg-blue-50 border-blue-200'; case 'PROMOTION': return 'bg-green-50 border-green-200'; case 'NEW_PRODUCT': return 'bg-purple-50 border-purple-200'; case 'SYSTEM': return 'bg-gray-50 border-gray-200'; default: return 'bg-gray-50 border-gray-200'; } }; // G√©rer le clic sur une notification const handleNotificationClick = async (notification: any) => { // Marquer comme lue si pas encore lue if (!notification.isRead) { await markAsRead(notification.id); } // Rediriger selon le type de notification if (notification.orderId) { window.location.href = `/orders/${notification.orderId}`; } else if (notification.data?.productId) { window.location.href = `/menu#${notification.data.productId}`; } else if (notification.data?.promoCode) { window.location.href = `/menu?promo=${notification.data.promoCode}`; } setIsOpen(false); }; // G√©rer la suppression d'une notification const handleDelete = async (e: React.MouseEvent, notificationId: string) => { e.stopPropagation(); await deleteNotification(notificationId); }; // G√©rer marquer comme lu const handleMarkAsRead = async (e: React.MouseEvent, notificationId: string) => { e.stopPropagation(); await markAsRead(notificationId); }; if (!userId) { return null; } return ( <DropdownMenu open={isOpen} onOpenChange={setIsOpen}> <DropdownMenuTrigger asChild> <Button variant="ghost" size="sm" className={cn( "relative p-2 hover:bg-gray-100 rounded-full", className )} > <Bell className="h-5 w-5" /> {unreadCount > 0 && ( <Badge variant="destructive" className="absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs" > {unreadCount > 99 ? '99+' : unreadCount} </Badge> )} </Button> </DropdownMenuTrigger> <DropdownMenuContent align="end" className="w-80 max-h-96 p-0" sideOffset={8} > {/* En-t√™te */} <div className="flex items-center justify-between p-4 border-b"> <DropdownMenuLabel className="text-base font-semibold p-0"> Notifications {unreadCount > 0 && ( <Badge variant="secondary" className="ml-2"> {unreadCount} </Badge> )} </DropdownMenuLabel> <div className="flex items-center gap-1"> {unreadCount > 0 && ( <Button variant="ghost" size="sm" onClick={() => markAllAsRead()} className="h-8 px-2 text-xs" > <Check className="h-3 w-3 mr-1" /> Tout lire </Button> )} <Button variant="ghost" size="sm" onClick={() => { window.location.href = '/notifications'; setIsOpen(false); }} className="h-8 px-2 text-xs" > <Settings className="h-3 w-3" /> </Button> </div> </div> {/* Liste des notifications */} <ScrollArea className="max-h-80"> {isLoading ? ( // Skeleton de chargement <div className="p-2 space-y-2"> {[...Array(3)].map((_, i) => ( <div ={i} className="flex items-start gap-3 p-3 rounded-lg"> <Skeleton className="h-8 w-8 rounded-full" /> <div className="flex-1 space-y-2"> <Skeleton className="h-4 w-3/4" /> <Skeleton className="h-3 w-1/2" /> </div> </div> ))} </div> ) : notifications.length === 0 ? ( // Aucune notification <div className="p-8 text-center text-gray-500"> <Bell className="h-12 w-12 mx-auto mb-4 opacity-50" /> <p className="text-sm">Aucune notification</p> <p className="text-xs text-gray-400 mt-1"> Vous serez notifi√© des mises √† jour de vos commandes </p> </div> ) : ( // Liste des notifications <div className="p-2"> {notifications.slice(0, 10).map((notification) => ( <div ={notification.id} onClick={() => handleNotificationClick(notification)} className={cn( "flex items-start gap-3 p-3 rounded-lg cursor-pointer transition-colors hover:bg-gray-50 border mb-2", getNotificationColor(notification.type), !notification.isRead && "bg-opacity-80" )} > {/* Ic√¥ne de notification */} <div className="flex-shrink-0 text-lg"> {getNotificationIcon(notification.type)} </div> {/* Contenu */} <div className="flex-1 min-w-0"> <div className="flex items-start justify-between gap-2"> <h4 className={cn( "text-sm font-medium text-gray-900 truncate", !notification.isRead && "font-semibold" )}> {notification.title} </h4> {/* Indicateur non lu */} {!notification.isRead && ( <div className="flex-shrink-0 w-2 h-2 bg-blue-500 rounded-full mt-1" /> )} </div> <p className="text-xs text-gray-600 mt-1 line-clamp-2"> {notification.message} </p> <div className="flex items-center justify-between mt-2"> <span className="text-xs text-gray-400"> {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true, locale: fr, })} </span> {/* Actions */} <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity"> {!notification.isRead && ( <Button variant="ghost" size="sm" onClick={(e) => handleMarkAsRead(e, notification.id)} className="h-6 w-6 p-0 hover:bg-blue-100" > <Check className="h-3 w-3" /> </Button> )} <Button variant="ghost" size="sm" onClick={(e) => handleDelete(e, notification.id)} className="h-6 w-6 p-0 hover:bg-red-100 text-red-500" > <Trash2 className="h-3 w-3" /> </Button> </div> </div> </div> </div> ))} {/* Lien vers toutes les notifications */} {notifications.length > 10 && ( <div className="p-3 text-center border-t"> <Button variant="ghost" size="sm" onClick={() => { window.location.href = '/notifications'; setIsOpen(false); }} className="text-xs text-blue-600 hover:text-blue-800" > Voir toutes les notifications ({notifications.length}) </Button> </div> )} </div> )} </ScrollArea> </DropdownMenuContent> </DropdownMenu> );
}

// Composant pour afficher le nombre de notifications non lues
export function NotificationBadge({ userId, className }: NotificationBellProps) { const { unreadCount } = useNotifications(userId); if (!userId || unreadCount === 0) { return null; } return ( <Badge variant="destructive" className={cn("h-5 w-5 flex items-center justify-center p-0 text-xs", className)} > {unreadCount > 99 ? '99+' : unreadCount} </Badge> );
}

// Composant pour les notifications toast personnalis√©es
export function NotificationToast({ notification, onClose 
}: { notification: any; onClose: () => void; 
}) { return ( <div className="flex items-start gap-3 p-4 bg-white border border-gray-200 rounded-lg shadow-lg max-w-sm"> <div className="flex-shrink-0 text-lg"> {notification.type === 'ORDER_STATUS_UPDATE' && 'üçï'} {notification.type === 'PROMOTION' && 'üéâ'} {notification.type === 'NEW_PRODUCT' && '‚ú®'} {notification.type === 'SYSTEM' && '‚öôÔ∏è'} </div> <div className="flex-1 min-w-0"> <h4 className="text-sm font-semibold text-gray-900"> {notification.title} </h4> <p className="text-xs text-gray-600 mt-1"> {notification.message} </p> {notification.data?.orderId && ( <Button variant="outline" size="sm" onClick={() => { window.location.href = `/orders/${notification.data.orderId}`; onClose(); }} className="mt-2 h-7 text-xs" > Voir la commande </Button> )} </div> <Button variant="ghost" size="sm" onClick={onClose} className="h-6 w-6 p-0 text-gray-400 hover:text-gray-600" > <X className="h-4 w-4" /> </Button> </div> );
}