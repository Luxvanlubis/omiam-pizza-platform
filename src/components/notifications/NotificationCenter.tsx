"use client";

import { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Bell, BellRing, BellOff, Check, CheckCheck, Clock, Package, Gift, AlertCircle, Settings, Trash2, MoreVertical, Smartphone, Mail, MessageSquare, Zap, Users, Target, Filter, Search, Send, Globe, Webhook, Database, Activity, BarChart3, TrendingUp, Calendar, User, ShoppingCart, CreditCard, Star, Heart, MessageCircle, Share2, Download, Upload, RefreshCw, Play, Pause, Volume2, VolumeX, Plus, Slack
} from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { fr } from 'date-fns/locale';
import { cn } from '@/lib/utils';
import { useI18n } from '@/hooks/useI18n';
import { toast } from 'sonner';

// Types avancés pour le centre de notifications
interface AdvancedNotification { id: string; title: string; message: string; type: 'order' | 'promotion' | 'system' | 'loyalty' | 'review' | 'payment' | 'inventory' | 'security' | 'marketing' | 'social'; priority: 'low' | 'medium' | 'high' | 'urgent'; category: string; isRead: boolean; isArchived: boolean; isFavorite: boolean; createdAt: string; updatedAt: string; expiresAt?: string; data?: Record<string, any>; actions?: NotificationAction[]; channels: NotificationChannel[]; tags: string[]; userId: string; groupId?: string; templateId?: string; analytics: NotificationAnalytics;
}

interface NotificationAction { id: string; label: string; type: 'button' | 'link' | 'api'; url?: string; method?: 'GET' | 'POST' | 'PUT' | 'DELETE'; payload?: Record<string, any>; style: 'primary' | 'secondary' | 'destructive';
}

interface NotificationChannel { type: 'push' | 'email' | 'sms' | 'webhook' | 'slack' | 'discord' | 'teams'; enabled: boolean; config: Record<string, any>; status: 'pending' | 'sent' | 'delivered' | 'failed' | 'read'; sentAt?: string; deliveredAt?: string; readAt?: string; error?: string;
}

interface NotificationAnalytics { views: number; clicks: number; conversions: number; engagement: number; deliveryRate: number; openRate: number; clickRate: number; conversionRate: number;
}

interface NotificationTemplate { id: string; name: string; description: string; type: string; subject: string; content: string; variables: string[]; channels: NotificationChannel[]; isActive: boolean; createdAt: string; updatedAt: string;
}

interface NotificationRule { id: string; name: string; description: string; trigger: { event: string; conditions: Record<string, any>; }; template: string; channels: string[]; schedule?: { type: 'immediate' | 'delayed' | 'scheduled'; delay?: number; scheduledAt?: string; timezone?: string; }; isActive: boolean; priority: 'low' | 'medium' | 'high' | 'urgent'; createdAt: string; updatedAt: string;
}

interface NotificationSettings { pushEnabled: boolean; emailEnabled: boolean; smsEnabled: boolean; soundEnabled: boolean; vibrationEnabled: boolean; quietHours: { enabled: boolean; start: string; end: string; }; categories: Record<string, boolean>; frequency: 'realtime' | 'batched' | 'daily' | 'weekly'; batchSize: number; retryAttempts: number; webhookUrl?: string; api?: string;
}

interface NotificationStats { total: number; unread: number; today: number; thisWeek: number; thisMonth: number; byType: Record<string, number>; byPriority: Record<string, number>; byChannel: Record<string, number>; deliveryRate: number; engagementRate: number; averageResponseTime: number;
}

interface NotificationCenterProps { userId: string; className?: string; showAsDropdown?: boolean; realTimeEnabled?: boolean; maxNotifications?: number; autoRefresh?: boolean; refreshInterval?: number;
}

// Données mockées pour les notifications avancées
const mockNotifications: AdvancedNotification[] = [ { id: '1', title: 'Nouvelle commande reçue', message: 'Commande #12345 pour 45,90€ - Pizza Margherita x2', type: 'order', priority: 'high', category: 'Commandes', isRead: false, isArchived: false, isFavorite: false, createdAt: new Date(Date.now() - 5 * 60 * 1000).toISOString(), updatedAt: new Date().toISOString(), data: { orderId: '12345', amount: 45.90, items: 2 }, actions: [ { id: '1', label: 'Voir commande', type: 'link', url: '//orders/12345', style: 'primary' }, { id: '2', label: 'Accepter', type: 'api', method: 'POST', payload: { status: 'accepted' }, style: 'secondary' } ], channels: [ { type: 'push', enabled: true, config: {}, status: 'delivered', sentAt: new Date().toISOString(), deliveredAt: new Date().toISOString() }, { type: 'email', enabled: true, config: {}, status: 'sent', sentAt: new Date().toISOString() } ], tags: ['urgent', 'commande', 'nouveau'], userId: 'user1', analytics: { views: 1, clicks: 0, conversions: 0, engagement: 0.8, deliveryRate: 100, openRate: 100, clickRate: 0, conversionRate: 0 } }, { id: '2', title: 'Promotion active', message: 'Votre promotion "Pizza du jour -20%" génère de bons résultats', type: 'promotion', priority: 'medium', category: 'Marketing', isRead: true, isArchived: false, isFavorite: true, createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(), updatedAt: new Date().toISOString(), data: { promotionId: 'promo123', conversions: 15, revenue: 234.50 }, actions: [ { id: '1', label: 'Voir stats', type: 'link', url: '//promotions/promo123', style: 'primary' } ], channels: [ { type: 'push', enabled: true, config: {}, status: 'read', sentAt: new Date().toISOString(), readAt: new Date().toISOString() } ], tags: ['marketing', 'promotion', 'succès'], userId: 'user1', analytics: { views: 3, clicks: 1, conversions: 1, engagement: 0.9, deliveryRate: 100, openRate: 100, clickRate: 33, conversionRate: 33 } }, { id: '3', title: 'Stock faible détecté', message: 'Mozzarella: seulement 5 unités restantes', type: 'inventory', priority: 'urgent', category: 'Inventaire', isRead: false, isArchived: false, isFavorite: false, createdAt: new Date(Date.now() - 30 * 60 * 1000).toISOString(), updatedAt: new Date().toISOString(), data: { productId: 'mozzarella', currentStock: 5, minStock: 10 }, actions: [ { id: '1', label: 'Réapprovisionner', type: 'link', url: '//inventory/mozzarella', style: 'primary' }, { id: '2', label: 'Ignorer', type: 'api', method: 'POST', payload: { action: 'ignore' }, style: 'secondary' } ], channels: [ { type: 'push', enabled: true, config: {}, status: 'delivered', sentAt: new Date().toISOString() }, { type: 'email', enabled: true, config: {}, status: 'pending' } ], tags: ['urgent', 'stock', 'inventaire'], userId: 'user1', analytics: { views: 0, clicks: 0, conversions: 0, engagement: 0, deliveryRate: 50, openRate: 0, clickRate: 0, conversionRate: 0 } }
];

const mockSettings: NotificationSettings = { pushEnabled: true, emailEnabled: true, smsEnabled: false, soundEnabled: true, vibrationEnabled: true, quietHours: { enabled: true, start: '22:00', end: '08:00' }, categories: { 'order': true, 'promotion': true, 'system': true, 'inventory': true, 'security': false }, frequency: 'realtime', batchSize: 10, retryAttempts: 3, webhookUrl: 'https://api.example.com/webhooks/notifications', api: process.env.NOTIFICATION_API_'mock_api__for_development'
};

const mockStats: NotificationStats = { total: 156, unread: 23, today: 12, thisWeek: 45, thisMonth: 156, byType: { 'order': 45, 'promotion': 23, 'system': 34, 'inventory': 28, 'security': 12, 'marketing': 14 }, byPriority: { 'low': 45, 'medium': 67, 'high': 32, 'urgent': 12 }, byChannel: { 'push': 156, 'email': 89, 'sms': 23, 'webhook': 45 }, deliveryRate: 98.5, engagementRate: 67.3, averageResponseTime: 2.4
};

const getNotificationIcon = (type: string) => { switch (type) { case 'order': return <ShoppingCart className="h-4 w-4" />; case 'promotion': return <Gift className="h-4 w-4" />; case 'system': return <AlertCircle className="h-4 w-4" />; case 'loyalty': return <Star className="h-4 w-4" />; case 'review': return <MessageCircle className="h-4 w-4" />; case 'payment': return <CreditCard className="h-4 w-4" />; case 'inventory': return <Package className="h-4 w-4" />; case 'security': return <AlertCircle className="h-4 w-4" />; case 'marketing': return <Target className="h-4 w-4" />; case 'social': return <Share2 className="h-4 w-4" />; default: return <Bell className="h-4 w-4" />; }
};

const getNotificationColor = (type: string) => { switch (type) { case 'order': return 'text-blue-600'; case 'promotion': return 'text-green-600'; case 'system': return 'text-red-600'; case 'loyalty': return 'text-yellow-600'; case 'review': return 'text-purple-600'; case 'payment': return 'text-emerald-600'; case 'inventory': return 'text-orange-600'; case 'security': return 'text-red-700'; case 'marketing': return 'text-pink-600'; case 'social': return 'text-cyan-600'; default: return 'text-gray-600'; }
};

const getPriorityColor = (priority: string) => { switch (priority) { case 'urgent': return 'bg-red-100 text-red-800 border-red-200'; case 'high': return 'bg-orange-100 text-orange-800 border-orange-200'; case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200'; case 'low': return 'bg-gray-100 text-gray-800 border-gray-200'; default: return 'bg-gray-100 text-gray-800 border-gray-200'; }
};

const getChannelIcon = (type: string) => { switch (type) { case 'push': return <Smartphone className="h-4 w-4" />; case 'email': return <Mail className="h-4 w-4" />; case 'sms': return <MessageSquare className="h-4 w-4" />; case 'webhook': return <Webhook className="h-4 w-4" />; case 'slack': return <MessageSquare className="h-4 w-4" />; case 'discord': return <MessageSquare className="h-4 w-4" />; case 'teams': return <Users className="h-4 w-4" />; default: return <Bell className="h-4 w-4" />; }
};

export function NotificationCenter({ userId, className, showAsDropdown = false, realTimeEnabled = true, maxNotifications = 50, autoRefresh = true, refreshInterval = 30000
}: NotificationCenterProps) { const { t } = useI18n(); // États principaux const [notifications, setNotifications] = useState<AdvancedNotification[]>(mockNotifications); const [settings, setSettings] = useState<NotificationSettings>(mockSettings); const [stats, setStats] = useState<NotificationStats>(mockStats); const [selectedNotifications, setSelectedNotifications] = useState<string[]>([]); const [showOnlyUnread, setShowOnlyUnread] = useState(false); const [searchQuery, setSearchQuery] = useState(''); const [filterType, setFilterType] = useState<string>('all'); const [filterPriority, setFilterPriority] = useState<string>('all'); const [sortBy, setSortBy] = useState<'date' | 'priority' | 'type'>('date'); const [isLoading, setIsLoading] = useState(false); const [isRealTimeActive, setIsRealTimeActive] = useState(realTimeEnabled); const [showSettings, setShowSettings] = useState(false); const [showAnalytics, setShowAnalytics] = useState(false); const [showComposer, setShowComposer] = useState(false); const [activeTab, setActiveTab] = useState('notifications'); // États pour le compositeur de notifications const [composerData, setComposerData] = useState({ title: '', message: '', type: 'system' as const, priority: 'medium' as const, channels: ['push'] as string[], scheduledAt: '', expiresAt: '', tags: [] as string[] }); // Calculs dérivés const unreadCount = notifications.filter(n => !n.isRead).length; // Filtrer et trier les notifications const filteredNotifications = notifications .filter(notification => { if (showOnlyUnread && notification.isRead) return false; if (searchQuery && !notification.title.toLowerCase().includes(searchQuery.toLowerCase()) && !notification.message.toLowerCase().includes(searchQuery.toLowerCase())) return false; if (filterType !== 'all' && notification.type !== filterType) return false; if (filterPriority !== 'all' && notification.priority !== filterPriority) return false; return true; }) .sort((a, b) => { switch (sortBy) { case 'priority': const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 }; return priorityOrder[b.priority] - priorityOrder[a.priority]; case 'type': return a.type.localeCompare(b.type); case 'date': default: return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(); } }) .slice(0, maxNotifications); // Fonctions de gestion const toggleSelection = (notificationId: string) => { setSelectedNotifications(prev => prev.includes(notificationId) ? prev.filter(id => id !== notificationId) : [...prev, notificationId] ); }; const markAsRead = useCallback(async (notificationId?: string) => { setIsLoading(true); try { if (notificationId) { setNotifications(prev => prev.map(n => n.id === notificationId ? { ...n, isRead: true, updatedAt: new Date().toISOString() } : n) ); } else { setNotifications(prev => prev.map(n => ({ ...n, isRead: true, updatedAt: new Date().toISOString() })) ); } toast.success(notificationId ? 'Notification marquée comme lue' : 'Toutes les notifications marquées comme lues'); } catch (error) { toast.error('Erreur lors de la mise à jour'); } finally { setIsLoading(false); } }, []); const markSelectedAsRead = async () => { for (const notificationId of selectedNotifications) { await markAsRead(notificationId); } setSelectedNotifications([]); }; const markAllAsRead = async () => { await markAsRead(); setSelectedNotifications([]); }; const deleteNotification = useCallback(async (notificationId: string) => { setIsLoading(true); try { setNotifications(prev => prev.filter(n => n.id !== notificationId)); toast.success('Notification supprimée'); } catch (error) { toast.error('Erreur lors de la suppression'); } finally { setIsLoading(false); } }, []); const deleteSelected = async () => { setIsLoading(true); try { setNotifications(prev => prev.filter(n => !selectedNotifications.includes(n.id))); setSelectedNotifications([]); toast.success(`${selectedNotifications.length} notifications supprimées`); } catch (error) { toast.error('Erreur lors de la suppression'); } finally { setIsLoading(false); } }; const toggleFavorite = useCallback(async (notificationId: string) => { setNotifications(prev => prev.map(n => n.id === notificationId ? { ...n, isFavorite: !n.isFavorite, updatedAt: new Date().toISOString() } : n) ); }, []); const archiveNotification = useCallback(async (notificationId: string) => { setNotifications(prev => prev.map(n => n.id === notificationId ? { ...n, isArchived: true, updatedAt: new Date().toISOString() } : n) ); toast.success('Notification archivée'); }, []); const sendNotification = useCallback(async () => { if (!composerData.title || !composerData.message) { toast.error('Titre et message requis'); return; } setIsLoading(true); try { const newNotification: AdvancedNotification = { id: Date.now().toString(), title: composerData.title, message: composerData.message, type: composerData.type, priority: composerData.priority, category: 'Manuel', isRead: false, isArchived: false, isFavorite: false, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString(), expiresAt: composerData.expiresAt || undefined, channels: composerData.channels.map(type => ({ type: type as any, enabled: true, config: {}, status: 'pending' as const })), tags: composerData.tags, userId, analytics: { views: 0, clicks: 0, conversions: 0, engagement: 0, deliveryRate: 0, openRate: 0, clickRate: 0, conversionRate: 0 } }; setNotifications(prev => [newNotification, ...prev]); setComposerData({ title: '', message: '', type: 'system', priority: 'medium', channels: ['push'], scheduledAt: '', expiresAt: '', tags: [] }); setShowComposer(false); toast.success('Notification envoyée avec succès'); } catch (error) { toast.error('Erreur lors de l\'envoi'); } finally { setIsLoading(false); } }, [composerData, userId]); const refreshNotifications = useCallback(async () => { setIsLoading(true); try { // Simulation d'un appel API await new Promise(resolve => setTimeout(resolve, 1000)); toast.success('Notifications actualisées'); } catch (error) { toast.error('Erreur lors de l\'actualisation'); } finally { setIsLoading(false); } }, []); const sendNotification = useCallback(async () => { const Notification: AdvancedNotification = { id: `-${Date.now()}`, title: 'Notification de , message: 'Ceci est une notification de  pour vérifier le bon fonctionnement du système.', type: 'system', priority: 'medium', category: , isRead: false, isArchived: false, isFavorite: false, createdAt: new Date().toISOString(), updatedAt: new Date().toISOString(), channels: [{ type: 'push', enabled: true, config: {}, status: 'delivered' }], tags: [], userId, analytics: { views: 0, clicks: 0, conversions: 0, engagement: 0, deliveryRate: 100, openRate: 0, clickRate: 0, conversionRate: 0 } }; setNotifications(prev => [Notification, ...prev]); toast.success('Notification de  envoyée'); }, [userId]); // Auto-refresh useEffect(() => { if (!autoRefresh || !isRealTimeActive) return; const interval = setInterval(() => { refreshNotifications(); }, refreshInterval); return () => clearInterval(interval); }, [autoRefresh, isRealTimeActive, refreshInterval, refreshNotifications]); const NotificationList = () => ( <div className="space-y-2"> {filteredNotifications.length === 0 ? ( <div className="text-center py-8 text-muted-foreground"> <Bell className="h-12 w-12 mx-auto mb-4 opacity-50" /> <p className="text-sm"> {showOnlyUnread ? 'Aucune notification non lue' : 'Aucune notification'} </p> {searchQuery && ( <p className="text-sm mt-2">Aucun résultat pour "{searchQuery}"</p> )} </div> ) : ( filteredNotifications.map((notification) => ( <Card ={notification.id} className={cn( 'cursor-pointer transition-colors hover:bg-muted/50', !notification.isRead && 'border-l-4 border-l-primary bg-muted/20', selectedNotifications.includes(notification.id) && 'ring-2 ring-primary' )} onClick={() => toggleSelection(notification.id)} > <CardContent className="p-4"> <div className="flex items-start gap-3"> <input type="checkbox" checked={selectedNotifications.includes(notification.id)} onChange={() => toggleSelection(notification.id)} className="mt-1 rounded border-gray-300 text-blue-600 focus:ring-blue-500" onClick={(e) => e.stopPropagation()} /> <div className={cn( 'flex-shrink-0 p-2 rounded-full bg-muted', getNotificationColor(notification.type) )}> {getNotificationIcon(notification.type)} </div> <div className="flex-1 min-w-0"> <div className="flex items-center justify-between mb-1"> <div className="flex items-center gap-2"> <h4 className={cn( 'text-sm font-medium truncate', !notification.isRead && 'font-semibold' )}> {notification.title} </h4> <Badge variant="outline" className={cn('text-xs', getPriorityColor(notification.priority))} > {notification.priority} </Badge> {notification.isFavorite && ( <Heart className="h-4 w-4 text-red-500 fill-current" /> )} </div> <div className="flex items-center gap-2 flex-shrink-0"> {!notification.isRead && ( <Badge variant="secondary" className="h-2 w-2 p-0 rounded-full" /> )} <span className="text-xs text-muted-foreground"> {formatDistanceToNow(new Date(notification.createdAt), { addSuffix: true, locale: fr })} </span> </div> </div> <p className="text-sm text-muted-foreground line-clamp-2"> {notification.message} </p> <div className="flex items-center justify-between mt-2"> <div className="flex flex-wrap gap-1"> <Badge variant="outline" className="text-xs"> {notification.category} </Badge> {notification.tags?.map(tag => ( <Badge ={tag} variant="secondary" className="text-xs"> {tag} </Badge> ))} {notification.data?.orderId && ( <Badge variant="outline" className="text-xs"> Commande #{notification.data.orderId} </Badge> )} </div> <div className="flex items-center gap-1"> {notification.channels?.map(channel => ( <div ={channel.type} className="flex items-center gap-1"> {getChannelIcon(channel.type)} <span className={cn( 'w-2 h-2 rounded-full', channel.status === 'delivered' && 'bg-green-500', channel.status === 'pending' && 'bg-yellow-500', channel.status === 'failed' && 'bg-red-500', channel.status === 'sent' && 'bg-blue-500' )} /> </div> ))} </div> </div> {notification.actions && notification.actions.length > 0 && ( <div className="flex gap-2 mt-3"> {notification.actions.map((action) => ( <Button ={action.id} variant={action.style === 'primary' ? 'default' : action.style === 'destructive' ? 'destructive' : 'outline'} size="sm" onClick={(e) => { e.stopPropagation(); if (action.url) { window.open(action.url, '_blank'); } }} > {action.label} </Button> ))} </div> )} </div> <div className="flex items-center gap-1"> <Button variant="ghost" size="sm" onClick={(e) => { e.stopPropagation(); toggleFavorite(notification.id); }} className={cn( 'h-8 w-8 p-0', notification.isFavorite ? 'text-red-600' : 'text-gray-400' )} > <Heart className="h-4 w-4" /> </Button> <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={(e) => e.stopPropagation()} > <MoreVertical className="h-4 w-4" /> </Button> </DropdownMenuTrigger> <DropdownMenuContent align="end"> <DropdownMenuItem onClick={(e) => { e.stopPropagation(); markAsRead(notification.id); }} disabled={notification.isRead} > <Check className="h-4 w-4 mr-2" /> Marquer comme lu </DropdownMenuItem> <DropdownMenuItem onClick={(e) => { e.stopPropagation(); archiveNotification(notification.id); }} > <Package className="h-4 w-4 mr-2" /> Archiver </DropdownMenuItem> <DropdownMenuSeparator /> <DropdownMenuItem onClick={(e) => { e.stopPropagation(); deleteNotification(notification.id); }} className="text-destructive" > <Trash2 className="h-4 w-4 mr-2" /> Supprimer </DropdownMenuItem> </DropdownMenuContent> </DropdownMenu> </div> </div> </CardContent> </Card> )) )} </div> ); if (showAsDropdown) { return ( <DropdownMenu> <DropdownMenuTrigger asChild> <Button variant="ghost" size="sm" className="relative"> <Bell className="h-4 w-4" /> {unreadCount > 0 && ( <Badge variant="destructive" className="absolute -top-1 -right-1 h-5 w-5 text-xs p-0 flex items-center justify-center" > {unreadCount > 99 ? '99+' : unreadCount} </Badge> )} </Button> </DropdownMenuTrigger> <DropdownMenuContent align="end" className="w-96 max-h-[600px] overflow-y-auto"> <div className="p-4"> <div className="flex items-center justify-between mb-4"> <div className="flex items-center space-x-2"> <h3 className="font-semibold">Notifications</h3> <Badge variant="secondary" className="text-xs"> {unreadCount} non lues </Badge> {isRealTimeActive && ( <div className="flex items-center space-x-1 text-green-600"> <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" /> <span className="text-xs">En direct</span> </div> )} </div> <div className="flex items-center gap-1"> <Button variant="ghost" size="sm" onClick={() => setShowOnlyUnread(!showOnlyUnread)} className={showOnlyUnread ? 'bg-blue-100 text-blue-700' : ''} > <Filter className="h-4 w-4" /> </Button> <Button variant="ghost" size="sm" onClick={refreshNotifications} disabled={isLoading} > <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} /> </Button> <Button variant="ghost" size="sm" onClick={markAllAsRead} disabled={unreadCount === 0} > <CheckCheck className="h-4 w-4" /> </Button> </div> </div> {/* Barre de recherche rapide */} <div className="relative mb-4"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" /> <Input placeholder="Rechercher..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-10 h-8" /> </div> {/* Actions en lot */} {selectedNotifications.length > 0 && ( <div className="flex items-center justify-between p-2 bg-blue-50 rounded-lg mb-4"> <span className="text-sm text-blue-700"> {selectedNotifications.length} sélectionnée(s) </span> <div className="flex space-x-2"> <Button size="sm" variant="outline" onClick={markSelectedAsRead}> <Check className="h-4 w-4 mr-1" /> Lire </Button> <Button size="sm" variant="outline" onClick={deleteSelected}> <Trash2 className="h-4 w-4 mr-1" /> Supprimer </Button> </div> </div> )} <ScrollArea className="h-96"> <NotificationList /> </ScrollArea> {/* Pied de page avec actions rapides */} <div className="flex items-center justify-between pt-4 mt-4 border-t"> <Button variant="outline" size="sm" onClick={() => setShowSettings(true)} > <Settings className="h-4 w-4 mr-2" /> Paramètres </Button> <Button variant="outline" size="sm" onClick={() => setShowComposer(true)} > <Send className="h-4 w-4 mr-2" /> Nouveau </Button> </div> </div> </DropdownMenuContent> </DropdownMenu> ); } // Interface principale return ( <div className="space-y-6"> {/* En-tête avec statistiques et contrôles temps réel */} <div className="flex items-center justify-between"> <div> <div className="flex items-center space-x-3"> <h1 className="text-2xl font-bold text-gray-900">Centre de Notifications</h1> {isRealTimeActive && ( <div className="flex items-center space-x-2 px-3 py-1 bg-green-100 rounded-full"> <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" /> <span className="text-sm text-green-700 font-medium">Temps réel actif</span> </div> )} </div> <p className="text-gray-600 mt-1"> Gérez toutes vos notifications avec des fonctionnalités avancées </p> </div> <div className="flex items-center space-x-4"> <div className="grid grid-cols-4 gap-4 text-center"> <div> <div className="text-2xl font-bold text-blue-600">{mockStats.total}</div> <div className="text-sm text-gray-500">Total</div> </div> <div> <div className="text-2xl font-bold text-red-600">{mockStats.unread}</div> <div className="text-sm text-gray-500">Non lues</div> </div> <div> <div className="text-2xl font-bold text-green-600">{mockStats.deliveryRate}%</div> <div className="text-sm text-gray-500">Livrées</div> </div> <div> <div className="text-2xl font-bold text-purple-600">{mockStats.engagementRate}%</div> <div className="text-sm text-gray-500">Engagement</div> </div> </div> <div className="flex space-x-2"> <Button variant={isRealTimeActive ? 'default' : 'outline'} size="sm" onClick={() => setIsRealTimeActive(!isRealTimeActive)} > {isRealTimeActive ? <Pause className="h-4 w-4 mr-2" /> : <Play className="h-4 w-4 mr-2" />} {isRealTimeActive ? 'Pause' : 'Temps réel'} </Button> <Button onClick={() => setShowComposer(true)}> <Send className="h-4 w-4 mr-2" /> Nouvelle notification </Button> </div> </div> </div> {/* Onglets principaux */} <Tabs value={activeTab} onValueChange={setActiveTab}> <TabsList className="grid w-full grid-cols-5"> <TabsTrigger value="notifications" className="flex items-center space-x-2"> <Bell className="h-4 w-4" /> <span>Notifications</span> {unreadCount > 0 && ( <Badge variant="destructive" className="ml-2 text-xs"> {unreadCount} </Badge> )} </TabsTrigger> <TabsTrigger value="analytics" className="flex items-center space-x-2"> <BarChart3 className="h-4 w-4" /> <span>Analytiques</span> </TabsTrigger> <TabsTrigger value="templates" className="flex items-center space-x-2"> <Package className="h-4 w-4" /> <span>Modèles</span> </TabsTrigger> <TabsTrigger value="rules" className="flex items-center space-x-2"> <Zap className="h-4 w-4" /> <span>Règles</span> </TabsTrigger> <TabsTrigger value="settings" className="flex items-center space-x-2"> <Settings className="h-4 w-4" /> <span>Paramètres</span> </TabsTrigger> </TabsList> <TabsContent value="notifications" className="space-y-4"> {/* Barre d'outils */} <Card> <CardContent className="p-4"> <div className="flex items-center justify-between space-x-4"> <div className="flex items-center space-x-4 flex-1"> <div className="relative flex-1 max-w-md"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" /> <Input placeholder="Rechercher des notifications..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-10" /> </div> <Select value={filterType} onValueChange={setFilterType}> <SelectTrigger className="w-40"> <SelectValue placeholder="Type" /> </SelectTrigger> <SelectContent> <SelectItem value="all">Tous les types</SelectItem> <SelectItem value="order">Commandes</SelectItem> <SelectItem value="promotion">Promotions</SelectItem> <SelectItem value="system">Système</SelectItem> <SelectItem value="security">Sécurité</SelectItem> <SelectItem value="marketing">Marketing</SelectItem> <SelectItem value="social">Social</SelectItem> </SelectContent> </Select> <Select value={filterPriority} onValueChange={setFilterPriority}> <SelectTrigger className="w-40"> <SelectValue placeholder="Priorité" /> </SelectTrigger> <SelectContent> <SelectItem value="all">Toutes</SelectItem> <SelectItem value="urgent">Urgent</SelectItem> <SelectItem value="high">Élevée</SelectItem> <SelectItem value="medium">Moyenne</SelectItem> <SelectItem value="low">Faible</SelectItem> </SelectContent> </Select> <Select value={sortBy} onValueChange={setSortBy}> <SelectTrigger className="w-40"> <SelectValue placeholder="Trier par" /> </SelectTrigger> <SelectContent> <SelectItem value="date">Date</SelectItem> <SelectItem value="priority">Priorité</SelectItem> <SelectItem value="type">Type</SelectItem> </SelectContent> </Select> </div> <div className="flex items-center space-x-2"> <Button variant={showOnlyUnread ? 'default' : 'outline'} size="sm" onClick={() => setShowOnlyUnread(!showOnlyUnread)} > <Filter className="h-4 w-4 mr-2" /> Non lues ({unreadCount}) </Button> <Button variant="outline" size="sm" onClick={refreshNotifications} disabled={isLoading} > <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} /> Actualiser </Button> <Button variant="outline" size="sm" onClick={sendNotification} > <Activity className="h-4 w-4 mr-2" /> </Button> </div> </div> </CardContent> </Card> {/* Actions en lot */} {selectedNotifications.length > 0 && ( <Card className="border-blue-200 bg-blue-50"> <CardContent className="p-4"> <div className="flex items-center justify-between"> <span className="text-blue-700 font-medium"> {selectedNotifications.length} notification(s) sélectionnée(s) </span> <div className="flex space-x-2"> <Button size="sm" variant="outline" onClick={markSelectedAsRead}> <Check className="h-4 w-4 mr-2" /> Marquer comme lues </Button> <Button size="sm" variant="outline" onClick={deleteSelected}> <Trash2 className="h-4 w-4 mr-2" /> Supprimer </Button> <Button size="sm" variant="outline" onClick={() => setSelectedNotifications([])} > Annuler </Button> </div> </div> </CardContent> </Card> )} {/* Liste des notifications */} <NotificationList /> </TabsContent> <TabsContent value="analytics" className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"> <Card> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-gray-600">Taux de livraison</p> <p className="text-2xl font-bold text-green-600">{mockStats.deliveryRate}%</p> </div> <TrendingUp className="h-8 w-8 text-green-600" /> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-gray-600">Taux d'engagement</p> <p className="text-2xl font-bold text-blue-600">{mockStats.engagementRate}%</p> </div> <Activity className="h-8 w-8 text-blue-600" /> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-gray-600">Temps de réponse</p> <p className="text-2xl font-bold text-purple-600">{mockStats.averageResponseTime}s</p> </div> <Clock className="h-8 w-8 text-purple-600" /> </div> </CardContent> </Card> <Card> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-gray-600">Cette semaine</p> <p className="text-2xl font-bold text-orange-600">{mockStats.thisWeek}</p> </div> <Calendar className="h-8 w-8 text-orange-600" /> </div> </CardContent> </Card> </div> <Card> <CardHeader> <CardTitle>Répartition par canal</CardTitle> </CardHeader> <CardContent> <div className="space-y-4"> {Object.entries(mockStats.byChannel).map(([channel, count]) => ( <div ={channel} className="flex items-center justify-between"> <div className="flex items-center space-x-2"> {getChannelIcon(channel as any)} <span className="capitalize">{channel}</span> </div> <div className="flex items-center space-x-2"> <div className="w-32 bg-gray-200 rounded-full h-2"> <div className="bg-blue-600 h-2 rounded-full" style={{ width: `${(count / mockStats.total) * 100}%` }} /> </div> <span className="text-sm font-medium">{count}</span> </div> </div> ))} </div> </CardContent> </Card> </TabsContent> <TabsContent value="templates"> <Card> <CardHeader> <CardTitle>Modèles de notifications</CardTitle> <p className="text-sm text-gray-600"> Créez et gérez des modèles réutilisables pour vos notifications </p> </CardHeader> <CardContent> <div className="text-center py-8 text-gray-500"> <Package className="h-12 w-12 mx-auto mb-4 text-gray-300" /> <p>Fonctionnalité en développement</p> <p className="text-sm mt-2">Les modèles de notifications seront bientôt disponibles</p> </div> </CardContent> </Card> </TabsContent> <TabsContent value="rules"> <Card> <CardHeader> <CardTitle>Règles automatiques</CardTitle> <p className="text-sm text-gray-600"> Configurez des règles pour automatiser l'envoi de notifications </p> </CardHeader> <CardContent> <div className="text-center py-8 text-gray-500"> <Zap className="h-12 w-12 mx-auto mb-4 text-gray-300" /> <p>Fonctionnalité en développement</p> <p className="text-sm mt-2">Les règles automatiques seront bientôt disponibles</p> </div> </CardContent> </Card> </TabsContent> <TabsContent value="settings"> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> <Card> <CardHeader> <CardTitle>Préférences générales</CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="flex items-center justify-between"> <div> <Label htmlFor="auto-refresh">Actualisation automatique</Label> <p className="text-sm text-gray-500">Actualiser automatiquement les notifications</p> </div> <Switch id="auto-refresh" checked={autoRefresh} onCheckedChange={(checked) => setAutoRefresh(checked)} /> </div> <div className="flex items-center justify-between"> <div> <Label htmlFor="real-time">Temps réel</Label> <p className="text-sm text-gray-500">Recevoir les notifications en temps réel</p> </div> <Switch id="real-time" checked={isRealTimeActive} onCheckedChange={setIsRealTimeActive} /> </div> <div className="space-y-2"> <Label>Intervalle d'actualisation (ms)</Label> <Input type="number" value={refreshInterval} onChange={(e) => setRefreshInterval(Number(e.target.value))} min={1000} max={60000} step={1000} /> </div> <div className="space-y-2"> <Label>Nombre maximum de notifications</Label> <Input type="number" value={maxNotifications} onChange={(e) => setMaxNotifications(Number(e.target.value))} min={10} max={1000} step={10} /> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle>Canaux de notification</CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="flex items-center justify-between"> <div className="flex items-center space-x-2"> <Smartphone className="h-4 w-4" /> <span>Push</span> </div> <Switch checked={settings.pushEnabled} onCheckedChange={(checked) => { setSettings(prev => ({ ...prev, pushEnabled: checked })); }} /> </div> <div className="flex items-center justify-between"> <div className="flex items-center space-x-2"> <Mail className="h-4 w-4" /> <span>Email</span> </div> <Switch checked={settings.emailEnabled} onCheckedChange={(checked) => { setSettings(prev => ({ ...prev, emailEnabled: checked })); }} /> </div> <div className="flex items-center justify-between"> <div className="flex items-center space-x-2"> <MessageSquare className="h-4 w-4" /> <span>SMS</span> </div> <Switch checked={settings.smsEnabled} onCheckedChange={(checked) => { setSettings(prev => ({ ...prev, smsEnabled: checked })); }} /> </div> <div className="flex items-center justify-between"> <div className="flex items-center space-x-2"> <Volume2 className="h-4 w-4" /> <span>Son</span> </div> <Switch checked={settings.soundEnabled} onCheckedChange={(checked) => { setSettings(prev => ({ ...prev, soundEnabled: checked })); }} /> </div> </CardContent> </Card> </div> </TabsContent> </Tabs> {/* Dialogue de composition */} <Dialog open={showComposer} onOpenChange={setShowComposer}> <DialogContent className="max-w-2xl"> <DialogHeader> <DialogTitle>Composer une notification</DialogTitle> <DialogDescription> Créez et envoyez une nouvelle notification à vos utilisateurs </DialogDescription> </DialogHeader> <div className="space-y-4"> <div className="grid grid-cols-2 gap-4"> <div className="space-y-2"> <Label>Type</Label> <Select value={composerData.type} onValueChange={(value) => setComposerData(prev => ({ ...prev, type: value as any }))} > <SelectTrigger> <SelectValue placeholder="Sélectionner un type" /> </SelectTrigger> <SelectContent> <SelectItem value="order">Commande</SelectItem> <SelectItem value="promotion">Promotion</SelectItem> <SelectItem value="system">Système</SelectItem> <SelectItem value="marketing">Marketing</SelectItem> <SelectItem value="social">Social</SelectItem> </SelectContent> </Select> </div> <div className="space-y-2"> <Label>Priorité</Label> <Select value={composerData.priority} onValueChange={(value) => setComposerData(prev => ({ ...prev, priority: value as any }))} > <SelectTrigger> <SelectValue placeholder="Sélectionner une priorité" /> </SelectTrigger> <SelectContent> <SelectItem value="low">Faible</SelectItem> <SelectItem value="medium">Moyenne</SelectItem> <SelectItem value="high">Élevée</SelectItem> <SelectItem value="urgent">Urgent</SelectItem> </SelectContent> </Select> </div> </div> <div className="space-y-2"> <Label>Titre</Label> <Input placeholder="Titre de la notification" value={composerData.title} onChange={(e) => setComposerData(prev => ({ ...prev, title: e.target.value }))} /> </div> <div className="space-y-2"> <Label>Message</Label> <Textarea placeholder="Contenu de la notification" value={composerData.message} onChange={(e) => setComposerData(prev => ({ ...prev, message: e.target.value }))} rows={4} /> </div> <div className="space-y-2"> <Label>Canaux de diffusion</Label> <div className="flex flex-wrap gap-2"> {(['push', 'email', 'sms', 'inApp'] as const).map((channel) => ( <div ={channel} className="flex items-center space-x-2"> <input type="checkbox" id={`channel-${channel}`} checked={composerData.channels.includes(channel)} onChange={(e) => { if (e.target.checked) { setComposerData(prev => ({ ...prev, channels: [...prev.channels, channel] })); } else { setComposerData(prev => ({ ...prev, channels: prev.channels.filter(c => c !== channel) })); } }} className="rounded border-gray-300" /> <Label htmlFor={`channel-${channel}`} className="capitalize"> {channel === 'inApp' ? 'In-App' : channel} </Label> </div> ))} </div> </div> <div className="flex items-center space-x-2"> <input type="checkbox" id="schedule-later" checked={composerData.scheduledFor !== undefined} onChange={(e) => { if (e.target.checked) { setComposerData(prev => ({ ...prev, scheduledFor: new Date(Date.now() + 60 * 60 * 1000) // 1 heure plus tard })); } else { setComposerData(prev => ({ ...prev, scheduledFor: undefined })); } }} className="rounded border-gray-300" /> <Label htmlFor="schedule-later">Programmer l'envoi</Label> </div> {composerData.scheduledFor && ( <div className="space-y-2"> <Label>Date et heure d'envoi</Label> <Input type="datetime-local" value={composerData.scheduledFor.toISOString().slice(0, 16)} onChange={(e) => setComposerData(prev => ({ ...prev, scheduledFor: new Date(e.target.value) }))} /> </div> )} </div> <DialogFooter> <Button variant="outline" onClick={() => setShowComposer(false)}> Annuler </Button> <Button onClick={sendNotification}> <Send className="h-4 w-4 mr-2" /> {composerData.scheduledFor ? 'Programmer' : 'Envoyer'} </Button> </DialogFooter> </DialogContent> </Dialog> {/* Dialogue des paramètres avancés */} <Dialog open={showSettings} onOpenChange={setShowSettings}> <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto"> <DialogHeader> <DialogTitle>Paramètres avancés</DialogTitle> <DialogDescription> Configurez les paramètres avancés du centre de notifications </DialogDescription> </DialogHeader> <Tabs defaultValue="general" className="w-full"> <TabsList className="grid w-full grid-cols-4"> <TabsTrigger value="general">Général</TabsTrigger> <TabsTrigger value="channels">Canaux</TabsTrigger> <TabsTrigger value="integrations">Intégrations</TabsTrigger> <TabsTrigger value="advanced">Avancé</TabsTrigger> </TabsList> <TabsContent value="general" className="space-y-4"> <Card> <CardHeader> <CardTitle>Préférences générales</CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="grid grid-cols-2 gap-4"> <div className="space-y-2"> <Label>Intervalle d'actualisation (ms)</Label> <Input type="number" value={refreshInterval} onChange={(e) => setRefreshInterval(Number(e.target.value))} min={1000} max={60000} step={1000} /> </div> <div className="space-y-2"> <Label>Nombre maximum de notifications</Label> <Input type="number" value={maxNotifications} onChange={(e) => setMaxNotifications(Number(e.target.value))} min={10} max={1000} step={10} /> </div> </div> <div className="space-y-4"> <div className="flex items-center justify-between"> <div> <Label>Actualisation automatique</Label> <p className="text-sm text-gray-500">Actualiser automatiquement les notifications</p> </div> <Switch checked={autoRefresh} onCheckedChange={setAutoRefresh} /> </div> <div className="flex items-center justify-between"> <div> <Label>Mode temps réel</Label> <p className="text-sm text-gray-500">Recevoir les notifications en temps réel</p> </div> <Switch checked={isRealTimeActive} onCheckedChange={setIsRealTimeActive} /> </div> <div className="flex items-center justify-between"> <div> <Label>Notifications sonores</Label> <p className="text-sm text-gray-500">Jouer un son lors de nouvelles notifications</p> </div> <Switch checked={settings.soundEnabled} onCheckedChange={(checked) => setSettings(prev => ({ ...prev, soundEnabled: checked }))} /> </div> </div> </CardContent> </Card> </TabsContent> <TabsContent value="channels" className="space-y-4"> <Card> <CardHeader> <CardTitle>Configuration des canaux</CardTitle> </CardHeader> <CardContent className="space-y-6"> {Object.entries(mockSettings.channels).map(([channel, enabled]) => ( <div ={channel} className="border rounded-lg p-4"> <div className="flex items-center justify-between mb-3"> <div className="flex items-center space-x-3"> {getChannelIcon(channel as any)} <div> <h4 className="font-medium capitalize">{channel}</h4> <p className="text-sm text-gray-500"> {channel === 'push' && 'Notifications push sur les appareils'} {channel === 'email' && 'Notifications par email'} {channel === 'sms' && 'Notifications par SMS'} {channel === 'inApp' && 'Notifications dans l\'application'} </p> </div> </div> <Switch checked={enabled} onCheckedChange={(checked) => { setMockSettings(prev => ({ ...prev, channels: { ...prev.channels, [channel]: checked } })); }} /> </div> {enabled && ( <div className="space-y-3 pl-10"> <div className="flex items-center justify-between"> <span className="text-sm">Notifications urgentes</span> <Switch defaultChecked /> </div> <div className="flex items-center justify-between"> <span className="text-sm">Notifications marketing</span> <Switch defaultChecked={channel !== 'sms'} /> </div> </div> )} </div> ))} </CardContent> </Card> </TabsContent> <TabsContent value="integrations" className="space-y-4"> <Card> <CardHeader> <CardTitle>Intégrations externes</CardTitle> <CardDescription> Connectez des services externes pour enrichir vos notifications </CardDescription> </CardHeader> <CardContent className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div className="border rounded-lg p-4"> <div className="flex items-center justify-between mb-2"> <div className="flex items-center space-x-2"> <Webhook className="h-5 w-5" /> <span className="font-medium">Webhooks</span> </div> <Switch defaultChecked /> </div> <p className="text-sm text-gray-500 mb-3">Recevoir des notifications via webhooks</p> <Input placeholder="https://api.example.com/webhook" /> </div> <div className="border rounded-lg p-4"> <div className="flex items-center justify-between mb-2"> <div className="flex items-center space-x-2"> <Slack className="h-5 w-5" /> <span className="font-medium">Slack</span> </div> <Switch /> </div> <p className="text-sm text-gray-500 mb-3">Envoyer des notifications vers Slack</p> <Input placeholder= d'accès Slack" type= /> </div> <div className="border rounded-lg p-4"> <div className="flex items-center justify-between mb-2"> <div className="flex items-center space-x-2"> <MessageSquare className="h-5 w-5" /> <span className="font-medium">Discord</span> </div> <Switch /> </div> <p className="text-sm text-gray-500 mb-3">Intégration avec Discord</p> <Input placeholder="URL du webhook Discord" /> </div> <div className="border rounded-lg p-4"> <div className="flex items-center justify-between mb-2"> <div className="flex items-center space-x-2"> <Mail className="h-5 w-5" /> <span className="font-medium">SendGrid</span> </div> <Switch /> </div> <p className="text-sm text-gray-500 mb-3">Service d'email transactionnel</p> <Input placeholder="Clé API SendGrid" type= /> </div> </div> </CardContent> </Card> </TabsContent> <TabsContent value="advanced" className="space-y-4"> <Card> <CardHeader> <CardTitle>Paramètres avancés</CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="space-y-4"> <div className="flex items-center justify-between"> <div> <Label>Mode debug</Label> <p className="text-sm text-gray-500">Afficher les logs détaillés</p> </div> <Switch /> </div> <div className="flex items-center justify-between"> <div> <Label>Compression des données</Label> <p className="text-sm text-gray-500">Compresser les données pour économiser la bande passante</p> </div> <Switch defaultChecked /> </div> <div className="flex items-center justify-between"> <div> <Label>Cache local</Label> <p className="text-sm text-gray-500">Mettre en cache les notifications localement</p> </div> <Switch defaultChecked /> </div> </div> <div className="space-y-2"> <Label>Durée de rétention (jours)</Label> <Input type="number" defaultValue={30} min={1} max={365} /> <p className="text-sm text-gray-500">Durée de conservation des notifications</p> </div> <div className="space-y-2"> <Label>Limite de débit (req/min)</Label> <Input type="number" defaultValue={100} min={10} max={1000} /> <p className="text-sm text-gray-500">Nombre maximum de notifications par minute</p> </div> <div className="pt-4 border-t"> <h4 className="font-medium mb-3">Actions de maintenance</h4> <div className="flex flex-wrap gap-2"> <Button variant="outline" size="sm"> <Trash2 className="h-4 w-4 mr-2" /> Vider le cache </Button> <Button variant="outline" size="sm"> <RefreshCw className="h-4 w-4 mr-2" /> Recalculer les statistiques </Button> <Button variant="outline" size="sm"> <Download className="h-4 w-4 mr-2" /> Exporter les données </Button> <Button variant="outline" size="sm"> <Upload className="h-4 w-4 mr-2" /> Importer des notifications </Button> </div> </div> </CardContent> </Card> </TabsContent> </Tabs> <DialogFooter> <Button variant="outline" onClick={() => setShowSettings(false)}> Fermer </Button> <Button> Sauvegarder </Button> </DialogFooter> </DialogContent> </Dialog> {/* Dialogue d'analytiques */} <Dialog open={showAnalytics} onOpenChange={setShowAnalytics}> <DialogContent className="max-w-6xl max-h-[80vh] overflow-y-auto"> <DialogHeader> <DialogTitle>Analytiques détaillées</DialogTitle> <DialogDescription> Analyse approfondie des performances de vos notifications </DialogDescription> </DialogHeader> <div className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4"> <Card> <CardContent className="p-4"> <div className="text-center"> <div className="text-2xl font-bold text-blue-600">{mockStats.total}</div> <div className="text-sm text-gray-500">Total envoyées</div> </div> </CardContent> </Card> <Card> <CardContent className="p-4"> <div className="text-center"> <div className="text-2xl font-bold text-green-600">{mockStats.deliveryRate}%</div> <div className="text-sm text-gray-500">Taux de livraison</div> </div> </CardContent> </Card> <Card> <CardContent className="p-4"> <div className="text-center"> <div className="text-2xl font-bold text-purple-600">{mockStats.engagementRate}%</div> <div className="text-sm text-gray-500">Taux d'engagement</div> </div> </CardContent> </Card> <Card> <CardContent className="p-4"> <div className="text-center"> <div className="text-2xl font-bold text-orange-600">{mockStats.averageResponseTime}s</div> <div className="text-sm text-gray-500">Temps de réponse</div> </div> </CardContent> </Card> </div> <Card> <CardHeader> <CardTitle>Tendances sur 7 jours</CardTitle> </CardHeader> <CardContent> <div className="text-center py-8 text-gray-500"> <BarChart3 className="h-12 w-12 mx-auto mb-4 text-gray-300" /> <p>Graphique des tendances</p> <p className="text-sm mt-2">Intégration avec une bibliothèque de graphiques à venir</p> </div> </CardContent> </Card> </div> <DialogFooter> <Button variant="outline" onClick={() => setShowAnalytics(false)}> Fermer </Button> </DialogFooter> </DialogContent> </Dialog> </div> );
 }