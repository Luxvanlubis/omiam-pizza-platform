"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { CheckCircle, XCircle, User, LogOut, RefreshCw, Database, Shield, Settings
} from "lucide-react";

interface AuthStatus { isAuthenticated: boolean; user: any; session: any; error?: string;
}

interface Result { name: string; status: 'success' | 'error' | 'pending'; message: string; details?: any;
}

export default function AuthPage() { const [authStatus, setAuthStatus] = useState<AuthStatus>({ isAuthenticated: false, user: null, session: null }); const [Results, setResults] = useState<Result[]>([]); const [isLoading, setIsLoading] = useState(true); const router = useRouter(); const runAuths = async () => { setIsLoading(true); const results: Result[] = []; //  1: V√©rifier la session NextAuth try { const sessionResponse = await fetch('/api/auth/session'); if (sessionResponse.ok) { const sessionData = await sessionResponse.json(); results.push({ name: 'NextAuth Session', status: sessionData.user ? 'success' : 'error', message: sessionData.user ? 'Session active trouv√©e' : 'Aucune session active', details: sessionData }); if (sessionData.user) { setAuthStatus({ isAuthenticated: true, user: sessionData.user, session: sessionData }); } } else { results.push({ name: 'NextAuth Session', status: 'error', message: `Erreur HTTP ${sessionResponse.status}`, }); } } catch (error) { results.push({ name: 'NextAuth Session', status: 'error', message: 'Erreur de connexion √† l\'API session', details: error }); } //  2: V√©rifier l'acc√®s √† Supabase try { const supabaseResponse = await fetch('/api/health/supabase'); if (supabaseResponse.ok) { const supabaseData = await supabaseResponse.json(); results.push({ name: 'Connexion Supabase', status: supabaseData.status === 'success' ? 'success' : 'error', message: supabaseData.status === 'success' ? 'Supabase connect√©' : 'Probl√®me Supabase', details: supabaseData }); } else { results.push({ name: 'Connexion Supabase', status: 'error', message: 'Endpoint Supabase non accessible' }); } } catch (error) { results.push({ name: 'Connexion Supabase', status: 'error', message: 'Erreur de connexion Supabase', details: error }); } //  3: V√©rifier l'acc√®s aux endpoints d'auth try { const signupResponse = await fetch('/api/auth/signup', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: @.com', process.env.SECURE_'' }) }); results.push({ name: 'Endpoint Signup', status: signupResponse.status === 400 ? 'success' : 'error', message: signupResponse.status === 400 ? 'Endpoint accessible (erreur attendue)' : 'Probl√®me endpoint', details: { status: signupResponse.status } }); } catch (error) { results.push({ name: 'Endpoint Signup', status: 'error', message: 'Endpoint signup non accessible', details: error }); } setResults(results); setIsLoading(false); }; const handleLogout = async () => { try { await fetch('/api/auth/signout', { method: 'POST' }); setAuthStatus({ isAuthenticated: false, user: null, session: null }); router.refresh(); } catch (error) { console.error('Erreur de d√©connexion:', error); } }; useEffect(() => { runAuths(); }, []); const getStatusIcon = (status: string) => { switch (status) { case 'success': return <CheckCircle className="h-4 w-4 text-green-600" />; case 'error': return <XCircle className="h-4 w-4 text-red-600" />; default: return <RefreshCw className="h-4 w-4 text-yellow-600 animate-spin" />; } }; const getStatusColor = (status: string) => { switch (status) { case 'success': return 'bg-green-100 text-green-800 border-green-200'; case 'error': return 'bg-red-100 text-red-800 border-red-200'; default: return 'bg-yellow-100 text-yellow-800 border-yellow-200'; } }; return ( <div className="min-h-screen bg-background p-4"> <div className="max-w-4xl mx-auto space-y-6"> {/* Header */} <div className="text-center space-y-2"> <h1 className="text-3xl font-bold text-blue-800 dark:text-blue-600"> üîê  d'Authentification O'Miam </h1> <p className="text-muted-foreground"> Diagnostic complet de l'int√©gration Supabase Auth </p> </div> {/* Statut de l'utilisateur */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <User className="h-5 w-5" /> Statut de l'Authentification </CardTitle> </CardHeader> <CardContent> {authStatus.isAuthenticated ? ( <div className="space-y-4"> <Alert className="border-green-200 bg-green-50"> <CheckCircle className="h-4 w-4 text-green-600" /> <AlertDescription className="text-green-800"> <strong>Utilisateur connect√© :</strong> {authStatus.user?.email} </AlertDescription> </Alert> <div className="flex gap-2"> <Badge variant="outline" className="bg-green-50"> ID: {authStatus.user?.id?.slice(0, 8)}... </Badge> <Badge variant="outline" className="bg-blue-50"> R√¥le: {authStatus.user?.role'user'} </Badge> </div> <Button onClick={handleLogout} variant="outline" className="w-full"> <LogOut className="h-4 w-4 mr-2" /> Se d√©connecter </Button> </div> ) : ( <div className="space-y-4"> <Alert variant="destructive"> <XCircle className="h-4 w-4" /> <AlertDescription> Aucune session active d√©tect√©e </AlertDescription> </Alert> <div className="grid grid-cols-2 gap-4"> <Link href="/auth/signup"> <Button className="w-full bg-green-600 hover:bg-green-700"> Cr√©er un compte </Button> </Link> <Link href="/auth/login"> <Button variant="outline" className="w-full"> Se connecter </Button> </Link> </div> </div> )} </CardContent> </Card> {/* R√©sultats des s */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Database className="h-5 w-5" /> R√©sultats des s <Button onClick={runAuths} size="sm" variant="outline" disabled={isLoading} > <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} /> </Button> </CardTitle> <CardDescription> Diagnostic des composants d'authentification </CardDescription> </CardHeader> <CardContent> <div className="space-y-3"> {Results.map((result, index) => ( <div ={index} className={`p-3 rounded-lg border ${getStatusColor(result.status)}`}> <div className="flex items-center justify-between"> <div className="flex items-center gap-2"> {getStatusIcon(result.status)} <span className="font-medium">{result.name}</span> </div> <Badge variant="outline" className={getStatusColor(result.status)}> {result.status} </Badge> </div> <p className="text-sm mt-1">{result.message}</p> {result.details && ( <details className="mt-2"> <summary className="text-xs cursor-pointer hover:underline"> Voir les d√©tails </summary> <pre className="text-xs mt-1 p-2 bg-black/5 rounded overflow-auto"> {JSON.stringify(result.details, null, 2)} </pre> </details> )} </div> ))} {Results.length === 0 && isLoading && ( <div className="text-center py-8"> <RefreshCw className="h-8 w-8 animate-spin mx-auto text-muted-foreground" /> <p className="text-muted-foreground mt-2">Ex√©cution des s...</p> </div> )} </div> </CardContent> </Card> {/* Actions rapides */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Settings className="h-5 w-5" /> Actions Rapides </CardTitle> </CardHeader> <CardContent> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> <Link href="/"> <Button variant="outline" className="w-full"> Accueil </Button> </Link> <Link href="/> <Button variant="outline" className="w-full"> </Button> </Link> <Link href="/api/health"> <Button variant="outline" className="w-full"> Health Check </Button> </Link> <Link href="/login"> <Button variant="outline" className="w-full"> Login </Button> </Link> </div> </CardContent> </Card> {/* Guide de r√©solution */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Shield className="h-5 w-5" /> Guide de R√©solution </CardTitle> </CardHeader> <CardContent> <div className="space-y-3 text-sm"> <div className="p-3 bg-blue-50 rounded-lg"> <h4 className="font-medium text-blue-800">‚úÖ Si tous les s passent :</h4> <p className="text-blue-700">L'authentification fonctionne correctement. Vous pouvez passer aux √©tapes suivantes.</p> </div> <div className="p-3 bg-yellow-50 rounded-lg"> <h4 className="font-medium text-yellow-800">‚ö†Ô∏è Erreur "captcha verification failed" :</h4> <p className="text-yellow-700">D√©sactivez le captcha dans Supabase Dashboard ‚Üí Authentication ‚Üí Bot Protection</p> </div> <div className="p-3 bg-red-50 rounded-lg"> <h4 className="font-medium text-red-800">‚ùå Erreur de session NextAuth :</h4> <p className="text-red-700">V√©rifiez NEXTAUTH_ dans .env.local et red√©marrez le serveur</p> </div> </div> </CardContent> </Card> </div> </div> );
}