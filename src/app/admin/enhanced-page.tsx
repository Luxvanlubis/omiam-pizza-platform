"use client";

import { useState, useEffect } from "react";
import { Header } from "@/components/Header";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { UnifiedPOSModule } from "@/components//UnifiedPOSModule";
import { MenuManagement } from "@/components//MenuManagement";
import { LoyaltyManagement } from "@/components//LoyaltyManagement";
import { SystemSettings } from "@/components//SystemSettings";
import AnalyticsReports from "@/components//AnalyticsReports";
import { MediaManagement } from "@/components//MediaManagement";
import { ContentManagement } from "@/components//ContentManagement";
import { LocalizationManagement } from "@/components//LocalizationManagement";
import { LinksManagement } from "@/components//LinksManagement";
import OrderTracking from "@/components//OrderTracking";
import { Users, ShoppingCart, TrendingUp, Settings, Pizza, Star, Clock, DollarSign, AlertCircle, CheckCircle, BarChart3, Database, LogOut, Image as ImageIcon, FileText, Globe, Link as LinkIcon, Timer, Search, Bell, Menu, X, ChevronDown, Activity, Calendar, Filter
} from "lucide-react";
import { cn } from "@/lib/utils";

// Enhanced stats with trends
const stats = { totalOrders: { value: 1247, trend: +12.5, period: "vs mois dernier" }, totalRevenue: { value: 25480, trend: +8.3, period: "vs mois dernier" }, totalCustomers: { value: 892, trend: +15.2, period: "vs mois dernier" }, averageOrderValue: { value: 20.4, trend: -2.1, period: "vs mois dernier" }
};

const recentOrders = [ { id: "ORD-001", customer: "Marie Dupont", items: ["Margherita Royale", "Coca-Cola"], total: 15, status: "completed", date: "2024-01-15 14:30", priority: "normal" }, { id: "ORD-002", customer: "Jean Martin", items: ["O'Miam Spéciale", "Eau"], total: 17, status: "preparing", date: "2024-01-15 14:45", priority: "urgent" }, { id: "ORD-003", customer: "Sophie Bernard", items: ["4 Fromages", "Vin Rouge"], total: 18, status: "pending", date: "2024-01-15 15:00", priority: "normal" }
];

const popularItems = [ { name: "Margherita Royale", orders: 342, revenue: 4104, trend: +5.2 }, { name: "O'Miam Spéciale", orders: 289, revenue: 4335, trend: +12.1 }, { name: "Reine", orders: 198, revenue: 2574, trend: -3.4 }, { name: "4 Fromages", orders: 156, revenue: 2184, trend: +8.7 }
];

const loyaltyCustomers = [ { name: "Marie Dupont", level: "Or", points: 1250, orders: 23, totalSpent: 456, lastOrder: "Il y a 2 jours" }, { name: "Jean Martin", level: "Argent", points: 780, orders: 15, totalSpent: 298, lastOrder: "Il y a 1 semaine" }, { name: "Sophie Bernard", level: "Bronze", points: 450, orders: 8, totalSpent: 156, lastOrder: "Il y a 3 jours" }
];

// Navigation items with enhanced structure
const navigationItems = [ { id: "dashboard", label: "Dashboard", icon: BarChart3, description: "Vue d'ensemble", badge: null }, { id: "orders", label: "Commandes", icon: ShoppingCart, description: "Gestion des commandes", badge: { count: 3, variant: "destructive" as const } }, { id: "tracking", label: "Suivi", icon: Timer, description: "Suivi des livraisons", badge: null }, { id: "menu", label: "Menu", icon: Pizza, description: "Gestion du menu", badge: null }, { id: "loyalty", label: "Fidélité", icon: Star, description: "Programme fidélité", badge: null }, { id: "analytics", label: "Analytics", icon: TrendingUp, description: "Analyses et rapports", badge: null }, { id: "settings", label: "Paramètres", icon: Settings, description: "Configuration", badge: null }, { id: "media", label: "Médias", icon: ImageIcon, description: "Gestion des médias", badge: null }, { id: "content", label: "Contenu", icon: FileText, description: "Gestion du contenu", badge: null }, { id: "localization", label: "Langues", icon: Globe, description: "Localisation", badge: null }, { id: "links", label: "Liens", icon: LinkIcon, description: "Gestion des liens", badge: null }
];

export default function EnhancedPage() { const [activeTab, setActiveTab] = useState("dashboard"); const [sidebarOpen, setSidebarOpen] = useState(true); const [searchQuery, setSearchQuery] = useState(""); const [notifications, setNotifications] = useState([ { id: 1, message: "Nouvelle commande reçue", type: "info", time: "Il y a 2 min" }, { id: 2, message: "Stock faible: Mozzarella", type: "warning", time: "Il y a 15 min" }, { id: 3, message: "Commande #ORD-002 prête", type: "success", time: "Il y a 30 min" } ]); const handleLogout = () => { document.cookie = -auth=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT"; window.location.href = '/login'; }; const StatCard = ({ title, value, trend, period, icon: Icon, format = "" }) => ( <Card className="transform hover:scale-105 transition-all duration-200 hover:shadow-lg" data-id={`stat-${title.toLowerCase().replace(/\s+/g, '-')}`}> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div className="space-y-2"> <p className="text-sm font-medium text-muted-foreground">{title}</p> <p className="text-2xl font-bold text-red-600"> {format === "currency" ? `${value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}€` : value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ')}{format === "euro" ? "€" : ""} </p> <div className="flex items-center gap-1 text-xs"> <span className={cn( "flex items-center gap-1 font-medium", trend > 0 ? "text-green-600" : "text-red-600" )}> <TrendingUp className={cn("h-3 w-3", trend < 0 && "rotate-180")} /> {Math.abs(trend)}% </span> <span className="text-muted-foreground">{period}</span> </div> </div> <Icon className="h-8 w-8 text-red-600" /> </div> </CardContent> </Card> ); const NavigationSidebar = () => ( <div className={cn( "fixed left-0 top-0 h-full bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-800 transition-all duration-300 z-40", sidebarOpen ? "w-64" : "w-16" )}> <div className="p-4 border-b border-gray-200 dark:border-gray-800"> <div className="flex items-center justify-between"> {sidebarOpen && ( <h2 className="text-lg font-semibold text-red-800 dark:text-red-600">O'Miam </h2> )} <Button variant="ghost" size="sm" onClick={() => setSidebarOpen(!sidebarOpen)} data-id="sidebar-toggle" > {sidebarOpen ? <X className="h-4 w-4" /> : <Menu className="h-4 w-4" />} </Button> </div> </div> <nav className="p-2 space-y-1"> {navigationItems.map((item) => { const Icon = item.icon; const isActive = activeTab === item.id; return ( <button ={item.id} onClick={() => setActiveTab(item.id)} className={cn( "w-full flex items-center gap-3 px-3 py-2 rounded-lg text-left transition-all duration-200", isActive ? "bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-600 font-medium" : "hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300" )} data-id={`nav-${item.id}`} > <Icon className="h-5 w-5 flex-shrink-0" /> {sidebarOpen && ( <> <div className="flex-1 min-w-0"> <div className="flex items-center justify-between"> <span className="truncate">{item.label}</span> {item.badge && ( <Badge variant={item.badge.variant} className="ml-2 text-xs"> {item.badge.count} </Badge> )} </div> <p className="text-xs text-muted-foreground truncate">{item.description}</p> </div> </> )} </button> ); })} </nav> </div> ); const TopBar = () => ( <div className="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 px-6 py-4"> <div className="flex items-center justify-between"> <div className="flex items-center gap-4"> <h1 className="text-2xl font-bold text-red-800 dark:text-red-600"> {navigationItems.find(item => item.id === activeTab)?.label"Dashboard"} </h1> <Badge variant="outline" className="text-xs"> {new Date().toLocaleDaring('fr-FR', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })} </Badge> </div> <div className="flex items-center gap-4"> <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" /> <Input placeholder="Rechercher..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-10 w-64" data-id="global-search" /> </div> <div className="relative"> <Button variant="ghost" size="sm" className="relative" data-id="notifications-button"> <Bell className="h-4 w-4" /> {notifications.length > 0 && ( <Badge className="absolute -top-1 -right-1 h-5 w-5 p-0 flex items-center justify-center text-xs"> {notifications.length} </Badge> )} </Button> </div> <Button variant="outline" onClick={handleLogout} className="flex items-center gap-2" data-id="logout-button" > <LogOut className="h-4 w-4" /> Déconnexion </Button> </div> </div> </div> ); return ( <div className="min-h-screen bg-gray-50 dark:bg-gray-950"> <NavigationSidebar /> <div className={cn( "transition-all duration-300", sidebarOpen ? "ml-64" : "ml-16" )}> <TopBar /> <main className="p-6"> {activeTab === "dashboard" && ( <div className="space-y-6" data-id="dashboard-content"> {/* Enhanced Statistics */} <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6"> <StatCard title="Commandes totales" value={stats.totalOrders.value} trend={stats.totalOrders.trend} period={stats.totalOrders.period} icon={ShoppingCart} /> <StatCard title="Revenu total" value={stats.totalRevenue.value} trend={stats.totalRevenue.trend} period={stats.totalRevenue.period} icon={DollarSign} format="currency" /> <StatCard title="Clients" value={stats.totalCustomers.value} trend={stats.totalCustomers.trend} period={stats.totalCustomers.period} icon={Users} /> <StatCard title="Panier moyen" value={stats.averageOrderValue.value} trend={stats.averageOrderValue.trend} period={stats.averageOrderValue.period} icon={TrendingUp} format="euro" /> </div> {/* Enhanced Dashboard Content */} <div className="grid lg:grid-cols-2 gap-6"> <Card data-id="recent-orders-card"> <CardHeader> <div className="flex items-center justify-between"> <CardTitle className="text-red-800 dark:text-red-600 flex items-center gap-2"> <Activity className="h-5 w-5" /> Commandes récentes </CardTitle> <Button variant="outline" size="sm"> <Filter className="h-4 w-4 mr-2" /> Filtrer </Button> </div> </CardHeader> <CardContent> <div className="space-y-4"> {recentOrders.map((order) => ( <div ={order.id} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"> <div className="space-y-1"> <div className="flex items-center gap-2"> <p className="font-semibold">{order.id}</p> {order.priority === "urgent" && ( <Badge variant="destructive" className="text-xs">Urgent</Badge> )} </div> <p className="text-sm text-muted-foreground">{order.customer}</p> <p className="text-xs text-muted-foreground flex items-center gap-1"> <Clock className="h-3 w-3" /> {order.date} </p> </div> <div className="text-right space-y-1"> <Badge variant={ order.status === "completed" ? "default" : order.status === "preparing" ? "secondary" : "destructive" } > {order.status === "completed" ? "Terminée" : order.status === "preparing" ? "Préparation" : "En attente"} </Badge> <p className="text-lg font-bold text-red-600">{order.total}€</p> </div> </div> ))} </div> </CardContent> </Card> <Card data-id="popular-items-card"> <CardHeader> <CardTitle className="text-red-800 dark:text-red-600 flex items-center gap-2"> <Pizza className="h-5 w-5" /> Plats populaires </CardTitle> </CardHeader> <CardContent> <div className="space-y-4"> {popularItems.map((item, index) => ( <div ={index} className="flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"> <div className="flex items-center gap-3"> <div className="w-8 h-8 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center"> <Pizza className="h-4 w-4 text-red-600" /> </div> <div> <p className="font-semibold">{item.name}</p> <p className="text-sm text-muted-foreground">{item.orders} commandes</p> </div> </div> <div className="text-right space-y-1"> <p className="text-lg font-bold text-red-600">{item.revenue}€</p> <div className="flex items-center gap-1 text-xs"> <span className={cn( "flex items-center gap-1", item.trend > 0 ? "text-green-600" : "text-red-600" )}> <TrendingUp className={cn("h-3 w-3", item.trend < 0 && "rotate-180")} /> {Math.abs(item.trend)}% </span> </div> </div> </div> ))} </div> </CardContent> </Card> </div> <Card data-id="loyalty-customers-card"> <CardHeader> <CardTitle className="text-red-800 dark:text-red-600 flex items-center gap-2"> <Star className="h-5 w-5" /> Programme de fidélité </CardTitle> <CardDescription>Top clients du programme de fidélité</CardDescription> </CardHeader> <CardContent> <div className="grid md:grid-cols-3 gap-4"> {loyaltyCustomers.map((customer, index) => ( <div ={index} className="p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"> <div className="flex items-center justify-between mb-3"> <p className="font-semibold">{customer.name}</p> <Star className="h-4 w-4 text-yellow-500" /> </div> <div className="space-y-2"> <div className="flex items-center justify-between"> <Badge variant={ customer.level === "Or" ? "default" : customer.level === "Argent" ? "secondary" : "outline" } > {customer.level} </Badge> <span className="text-sm font-medium">{customer.points} pts</span> </div> <div className="text-sm text-muted-foreground space-y-1"> <p>{customer.orders} commandes • {customer.totalSpent}€</p> <p className="flex items-center gap-1"> <Calendar className="h-3 w-3" /> {customer.lastOrder} </p> </div> </div> </div> ))} </div> </CardContent> </Card> </div> )} {activeTab === "orders" && <UnifiedPOSModule />} {activeTab === "tracking" && <OrderTracking />} {activeTab === "menu" && <MenuManagement />} {activeTab === "loyalty" && <LoyaltyManagement />} {activeTab === "analytics" && <AnalyticsReports />} {activeTab === "settings" && <SystemSettings />} {activeTab === "media" && <MediaManagement />} {activeTab === "content" && <ContentManagement />} {activeTab === "localization" && <LocalizationManagement />} {activeTab === "links" && <LinksManagement />} </main> </div> </div> );
}