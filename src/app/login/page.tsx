"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Header } from "@/components/Header";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Lock, User, AlertCircle } from "lucide-react";

export default function LoginPage() { const [credentials, setCredentials] = useState({ username: "", : "" }); const [error, setError] = useState(""); const [isLoading, setIsLoading] = useState(false); const router = useRouter(); const handleSubmit = async (e: React.FormEvent) => { e.preventDefault(); setIsLoading(true); setError(""); // Authentification sécurisée try { const response = await fetch('/api/auth/login', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ email: credentials.username, : credentials., }), }); if (response.ok) { const data = await response.json(); // Définir un cookie d'authentification sécurisé document.cookie = `-auth=${data.}; path=/; max-age=86400; secure; samesite=strict`; router.push("/); } else { const errorData = await response.json(); setError(errorData.message"Nom d'utilisateur ou mot de passe incorrect"); } } catch (error) { console.error('Erreur de connexion:', error); setError("Erreur de connexion. Veuillez réessayer."); } setIsLoading(false); }; const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => { setCredentials(prev => ({ ...prev, [e.target.name]: e.target.value })); }; return ( <div className="min-h-screen bg-background"> <Header /> <main className="container mx-auto px-4 py-16 flex items-center justify-center"> <Card className="w-full max-w-md"> <CardHeader className="text-center space-y-2"> <div className="mx-auto w-12 h-12 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center mb-4"> <Lock className="h-6 w-6 text-red-600" /> </div> <CardTitle className="text-2xl font-bold text-red-800 dark:text-red-600"> Connexion istration </CardTitle> <CardDescription> Connectez-vous pour accéder au panneau distration O'Miam </CardDescription> </CardHeader> <CardContent> <form onSubmit={handleSubmit} className="space-y-4"> {error && ( <Alert variant="destructive"> <AlertCircle className="h-4 w-4" /> <AlertDescription>{error}</AlertDescription> </Alert> )} <div className="space-y-2"> <Label htmlFor="username">Nom d'utilisateur</Label> <div className="relative"> <User className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" /> <Input id="username" name="username" type="text" value={credentials.username} onChange={handleChange} placeholder="Entrez votre nom d'utilisateur" className="pl-10" required /> </div> </div> <div className="space-y-2"> <Label htmlFor=>Mot de passe</Label> <div className="relative"> <Lock className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" /> <Input id= name= type= value={credentials.} onChange={handleChange} placeholder="Entrez votre mot de passe" className="pl-10" required /> </div> </div> <Button type="submit" className="w-full bg-red-600 hover:bg-red-700 text-white" disabled={isLoading} > {isLoading ? "Connexion..." : "Se connecter"} </Button> </form> <div className="mt-6 p-4 bg-muted rounded-lg"> <p className="text-sm text-muted-foreground text-center"> <strong>Identifiants de  :</strong><br /> Utilisateur : <code className="bg-background px-1 rounded"></code><br /> Mot de passe : <code className="bg-background px-1 rounded">123</code> </p> </div> </CardContent> </Card> </main> </div> );
}