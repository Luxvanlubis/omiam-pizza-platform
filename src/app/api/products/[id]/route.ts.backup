import { NextRequest, NextResponse } from 'next/server';
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { supabaseIntegrationService } from '@/lib/supabase-integration-service';

// GET /api/products/[id] - Récupérer un produit par ID
export async function GET( request: NextRequest, { params }: { params: Promise<{ id: string }> }
) { const { id } = await params; try { if (!id) { return NextResponse.json( { error: 'ID du produit requis' }, { status: 400 } ); } const supabase = supabaseIntegrationService.getSupabaseClient(); const { data: product, error: productError } = await supabase .from('products') .select('*') .eq('id', id) .single(); if (productError && productError.code !== 'PGRST116') { throw new Error(`Erreur lors de la récupération du produit: ${productError.message}`); } if (!product || productError) { return NextResponse.json( { error: 'Produit non trouvé' }, { status: 404 } ); } return NextResponse.json(product); } catch (error) { console.error('Erreur lors de la récupération du produit:', error); return NextResponse.json( { error: 'Erreur interne du serveur' }, { status: 500 } ); }
}

// PUT /api/products/[id] - Mettre à jour un produit
export async function PUT( request: NextRequest, { params }: { params: Promise<{ id: string }> }
) { const { id } = await params; try { const body = await request.json(); if (!id) { return NextResponse.json( { error: 'ID du produit requis' }, { status: 400 } ); } const { name, description, price, category, image, available } = body; const supabase = supabaseIntegrationService.getSupabaseClient(); // Vérifier si le produit existe const { data: existingProduct, error: checkError } = await supabase .from('products') .select('id') .eq('id', id) .single(); if (checkError || !existingProduct) { return NextResponse.json( { error: 'Produit non trouvé' }, { status: 404 } ); } // Préparer les données de mise à jour const updateData: any = {}; if (name) updateData.name = name; if (description) updateData.description = description; if (price) updateData.price = price; if (category) updateData.category = category; if (image) updateData.image = image; if (available !== undefined) updateData.available = available; // Mettre à jour le produit const { data: updatedProduct, error: updateError } = await supabase .from('products') .update(updateData) .eq('id', id) .select('*') .single(); if (updateError) { throw new Error(`Erreur lors de la mise à jour du produit: ${updateError.message}`); } return NextResponse.json(updatedProduct); } catch (error) { console.error('Erreur lors de la mise à jour du produit:', error); return NextResponse.json( { error: 'Erreur interne du serveur' }, { status: 500 } ); }
}

// DELETE /api/products/[id] - Supprimer un produit
export async function DELETE( request: NextRequest, { params }: { params: Promise<{ id: string }> }
) { const { id } = await params; try { if (!id) { return NextResponse.json( { error: 'ID du produit requis' }, { status: 400 } ); } const supabase = supabaseIntegrationService.getSupabaseClient(); // Vérifier si le produit existe const { data: existingProduct, error: checkError } = await supabase .from('products') .select('id') .eq('id', id) .single(); if (checkError || !existingProduct) { return NextResponse.json( { error: 'Produit non trouvé' }, { status: 404 } ); } // Supprimer le produit const { error: deleteError } = await supabase .from('products') .delete() .eq('id', id); if (deleteError) { throw new Error(`Erreur lors de la suppression du produit: ${deleteError.message}`); } return NextResponse.json( { message: 'Produit supprimé avec succès' }, { status: 200 } ); } catch (error) { console.error('Erreur lors de la suppression du produit:', error); return NextResponse.json( { error: 'Erreur interne du serveur' }, { status: 500 } ); }
}