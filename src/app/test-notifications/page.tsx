'use client';

import { useState } from 'react';
import { NotificationPanel } from '@/components/notifications/NotificationPanel';
import { NotificationCenter } from '@/components/notifications/NotificationCenter';
import { NotificationBell } from '@/components/notifications/NotificationBell';
import { useAuth } from '@/components/auth-provider';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Bell, Tube, Settings, Users } from 'lucide-react';

export default function NotificationsPage() { const { user } = useAuth(); const [activeTab, setActiveTab] = useState< | 'center' | 'bell'>(); const OrderNotification = async () => { try { const response = await fetch('/api/orders/-order-123/notifications', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ status: 'ready', message: 'Votre commande est prête pour le retrait !', estimatedTime: 0 }) }); if (response.ok) { alert('Notification de commande envoyée avec succès !'); } else { alert('Erreur lors de l\'envoi de la notification'); } } catch (error) { console.error('Erreur:', error); alert('Erreur lors de l\'envoi de la notification'); } }; const StreamNotification = async () => { try { const response = await fetch('/api/notifications/stream', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ userId: session?.user?.id || -user', type: 'order_update', title:  de notification en temps réel', message: 'Ceci est un  de notification via Server-Sent Events', data: { orderId: -order-123', status: 'preparing' } }) }); if (response.ok) { alert('Notification en temps réel envoyée !'); } else { alert('Erreur lors de l\'envoi de la notification en temps réel'); } } catch (error) { console.error('Erreur:', error); alert('Erreur lors de l\'envoi de la notification en temps réel'); } }; return ( <div className="container mx-auto p-6 space-y-6"> <div className="text-center space-y-2"> <h1 className="text-3xl font-bold flex items-center justify-center gap-2"> <Tube className="h-8 w-8 text-blue-600" /> des Notifications Push </h1> <p className="text-muted-foreground"> Interface de  pour valider toutes les fonctionnalités de notifications </p> {user ? ( <Badge variant="outline" className="bg-green-50 text-green-700"> Connecté en tant que {user.name || user.email} </Badge> ) : ( <Badge variant="destructive"> Non connecté - Certaines fonctionnalités peuvent être limitées </Badge> )} </div> {/* Navigation des onglets */} <div className="flex justify-center space-x-2"> <Button variant={activeTab ===  ? 'default' : 'outline'} onClick={() => setActiveTab()} className="flex items-center gap-2" > <Tube className="h-4 w-4" /> s Push </Button> <Button variant={activeTab === 'center' ? 'default' : 'outline'} onClick={() => setActiveTab('center')} className="flex items-center gap-2" > <Settings className="h-4 w-4" /> Centre de Notifications </Button> <Button variant={activeTab === 'bell' ? 'default' : 'outline'} onClick={() => setActiveTab('bell')} className="flex items-center gap-2" > <Bell className="h-4 w-4" /> Cloche de Notifications </Button> </div> {/* s rapides */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <Users className="h-5 w-5" /> s Rapides </CardTitle> <CardDescription> ez rapidement les différents types de notifications </CardDescription> </CardHeader> <CardContent className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <Button onClick={OrderNotification} className="w-full"> er Notification de Commande </Button> <Button onClick={StreamNotification} variant="outline" className="w-full"> er Notification Temps Réel </Button> </div> </CardContent> </Card> {/* Contenu des onglets */} <div className="space-y-6"> {activeTab ===  && ( <Card> <CardHeader> <CardTitle>Panel de  des Notifications Push</CardTitle> <CardDescription> ez les permissions, l'abonnement et l'envoi de notifications push </CardDescription> </CardHeader> <CardContent> <NotificationPanel /> </CardContent> </Card> )} {activeTab === 'center' && ( <Card> <CardHeader> <CardTitle>Centre de Notifications</CardTitle> <CardDescription> Gérez et consultez toutes vos notifications </CardDescription> </CardHeader> <CardContent> <NotificationCenter userId={session?.user?.id''} /> </CardContent> </Card> )} {activeTab === 'bell' && ( <Card> <CardHeader> <CardTitle>Cloche de Notifications (Aperçu)</CardTitle> <CardDescription> Aperçu de la cloche de notifications qui apparaît dans l'en-tête </CardDescription> </CardHeader> <CardContent className="flex justify-center p-8"> {session?.user?.id ? ( <div className="bg-gray-50 p-4 rounded-lg"> <NotificationBell userId={session.user.id} /> </div> ) : ( <div className="text-center text-muted-foreground"> Connectez-vous pour voir la cloche de notifications </div> )} </CardContent> </Card> )} </div> {/* Informations de débogage */} <Card> <CardHeader> <CardTitle>Informations de Débogage</CardTitle> </CardHeader> <CardContent className="space-y-2"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm"> <div> <strong>Support Push:</strong> {typeof window !== 'undefined' && 'serviceWorker' in navigator && 'PushManager' in window ? '✅ Supporté' : '❌ Non supporté'} </div> <div> <strong>Service Worker:</strong> {typeof window !== 'undefined' && 'serviceWorker' in navigator ? '✅ Disponible' : '❌ Non disponible'} </div> <div> <strong>Session:</strong> {session ? '✅ Connecté' : '❌ Non connecté'} </div> <div> <strong>User ID:</strong> {session?.user?.id'Non disponible'} </div> </div> </CardContent> </Card> </div> );
}