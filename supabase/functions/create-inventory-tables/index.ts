/// <reference types="https://deno.land/x/deno@v1.28.0/lib/deno.d.ts" />

// Déclaration globale pour Deno dans l'environnement TypeScript
declare const Deno: { env: { get(: string): string | undefined; };
};

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from '@supabase/supabase-js'

const corsHeaders = { 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Headers': 'authorization, x-client-info, api, content-type',
}

serve(async (req) => { // Handle CORS preflight requests if (req.method === 'OPTIONS') { return new Response('ok', { headers: corsHeaders }) } try { const supabaseClient = createClient( Deno.env.get('SUPABASE_URL') ?? '', Deno.env.get('SUPABASE_SERVICE_ROLE_) ?? '' ) // Create inventory_items table const createInventoryItemsTable = ` CREATE TABLE IF NOT EXISTS public.inventory_items ( id UUID DEFAULT gen_random_uuid() PRIMARY , name VARCHAR(255) NOT NULL, description TEXT, sku VARCHAR(100) UNIQUE NOT NULL, category VARCHAR(100), unit VARCHAR(50) DEFAULT 'pcs', current_stock INTEGER DEFAULT 0, min_stock INTEGER DEFAULT 0, max_stock INTEGER, cost_price DECIMAL(10,2), selling_price DECIMAL(10,2), supplier VARCHAR(255), location VARCHAR(255), is_active BOOLEAN DEFAULT true, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); ` // Create inventory_movements table const createInventoryMovementsTable = ` CREATE TABLE IF NOT EXISTS public.inventory_movements ( id UUID DEFAULT gen_random_uuid() PRIMARY , item_id UUID REFERENCES public.inventory_items(id) ON DELETE CASCADE, type VARCHAR(20) CHECK (type IN ('in', 'out', 'adjustment')) NOT NULL, quantity INTEGER NOT NULL, unit_cost DECIMAL(10,2), total_cost DECIMAL(10,2), reason VARCHAR(255), reference_number VARCHAR(100), employee_id VARCHAR(100), notes TEXT, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); ` // Create inventory_alerts table const createInventoryAlertsTable = ` CREATE TABLE IF NOT EXISTS public.inventory_alerts ( id UUID DEFAULT gen_random_uuid() PRIMARY , item_id UUID REFERENCES public.inventory_items(id) ON DELETE CASCADE, type VARCHAR(50) NOT NULL, message TEXT NOT NULL, severity VARCHAR(20) DEFAULT 'medium', is_read BOOLEAN DEFAULT false, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); ` // Create indexes const createIndexes = ` CREATE INDEX IF NOT EXISTS idx_inventory_items_sku ON public.inventory_items(sku); CREATE INDEX IF NOT EXISTS idx_inventory_items_category ON public.inventory_items(category); CREATE INDEX IF NOT EXISTS idx_inventory_movements_item_id ON public.inventory_movements(item_id); CREATE INDEX IF NOT EXISTS idx_inventory_movements_created_at ON public.inventory_movements(created_at); CREATE INDEX IF NOT EXISTS idx_inventory_alerts_item_id ON public.inventory_alerts(item_id); ` // Create updated_at trigger function const createTriggerFunction = ` CREATE OR REPLACE FUNCTION update_updated_at_column() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = NOW(); RETURN NEW; END; $$ language 'plpgsql'; ` // Create trigger const createTrigger = ` DROP TRIGGER IF EXISTS update_inventory_items_updated_at ON public.inventory_items; CREATE TRIGGER update_inventory_items_updated_at BEFORE UPDATE ON public.inventory_items FOR EACH ROW EXECUTE FUNCTION update_updated_at_column(); ` // Execute all SQL commands await supabaseClient.rpc('exec_sql', { sql: createInventoryItemsTable }) await supabaseClient.rpc('exec_sql', { sql: createInventoryMovementsTable }) await supabaseClient.rpc('exec_sql', { sql: createInventoryAlertsTable }) await supabaseClient.rpc('exec_sql', { sql: createIndexes }) await supabaseClient.rpc('exec_sql', { sql: createTriggerFunction }) await supabaseClient.rpc('exec_sql', { sql: createTrigger }) // Insert  data const Items = [ { name: 'Pizza Margherita', description: 'Pizza classique avec tomate et mozzarella', sku: 'PIZZA-MARG', category: 'Pizza', unit: 'pcs', current_stock: 50, min_stock: 10, cost_price: 8.50, selling_price: 12.90, supplier: 'Fournisseur Local', location: 'Stock Principal' }, { name: 'Pizza Pepperoni', description: 'Pizza avec pepperoni et mozzarella', sku: 'PIZZA-PEPP', category: 'Pizza', unit: 'pcs', current_stock: 30, min_stock: 10, cost_price: 9.50, selling_price: 14.90, supplier: 'Fournisseur Local', location: 'Stock Principal' }, { name: 'Coca-Cola 33cl', description: 'Boisson gazeuse', sku: 'COCA-33', category: 'Boisson', unit: 'pcs', current_stock: 100, min_stock: 20, cost_price: 1.20, selling_price: 2.50, supplier: 'Coca-Cola', location: 'Réfrigérateur' } ] // Insert  data if table is empty const { count } = await supabaseClient .from('inventory_items') .select('*', { count: 'exact', head: true }) if (count === 0) { await supabaseClient .from('inventory_items') .insert(Items) } return new Response( JSON.stringify({ success: true, message: 'Tables d\'inventaire créées avec succès', tablesCreated: ['inventory_items', 'inventory_movements', 'inventory_alerts'], DataInserted: count === 0 }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200, }, ) } catch (error) { return new Response( JSON.stringify({ error: error instanceof Error ? error.message : String(error), success: false }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400, }, ) }
})